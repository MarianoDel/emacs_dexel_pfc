ARM GAS  /tmp/ccKDiUbI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -imultilib armv6-m
  19              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  20              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  21              	@ -D__USES_INITFINI__ -D STM32F030 src/main.c -mcpu=cortex-m0 -mthumb
  22              	@ -auxbase-strip src/main.o -g -gdwarf-2 -O0 -Wall -fomit-frame-pointer
  23              	@ -fdata-sections -ffunction-sections -fverbose-asm
  24              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  25              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  26              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  27              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  28              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  29              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  30              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  31              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  32              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  33              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  34              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  35              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  36              	@ -fprefetch-loop-arrays -freg-struct-return
  37              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  38              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  39              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  40              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  41              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  42              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  43              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  44              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  45              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  46              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  47              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  48              	@ -mvectorize-with-neon-quad
  49              	
  50              		.text
  51              	.Ltext0:
  52              		.cfi_sections	.debug_frame
  53              		.section	.text.NVIC_SetPriority,"ax",%progbits
  54              		.align	2
  55              		.code	16
  56              		.thumb_func
  57              		.type	NVIC_SetPriority, %function
ARM GAS  /tmp/ccKDiUbI.s 			page 2


  58              	NVIC_SetPriority:
  59              	.LFB16:
  60              		.file 1 "./cmsis_core/core_cm0.h"
   1:./cmsis_core/core_cm0.h **** /**************************************************************************//**
   2:./cmsis_core/core_cm0.h ****  * @file     core_cm0.h
   3:./cmsis_core/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./cmsis_core/core_cm0.h ****  * @version  V1.30
   5:./cmsis_core/core_cm0.h ****  * @date     30. October 2009
   6:./cmsis_core/core_cm0.h ****  *
   7:./cmsis_core/core_cm0.h ****  * @note
   8:./cmsis_core/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./cmsis_core/core_cm0.h ****  *
  10:./cmsis_core/core_cm0.h ****  * @par
  11:./cmsis_core/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./cmsis_core/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./cmsis_core/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./cmsis_core/core_cm0.h ****  *
  15:./cmsis_core/core_cm0.h ****  * @par
  16:./cmsis_core/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./cmsis_core/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./cmsis_core/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./cmsis_core/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./cmsis_core/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./cmsis_core/core_cm0.h ****  *
  22:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  23:./cmsis_core/core_cm0.h **** 
  24:./cmsis_core/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./cmsis_core/core_cm0.h **** #define __CM0_CORE_H__
  26:./cmsis_core/core_cm0.h **** 
  27:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./cmsis_core/core_cm0.h ****  *
  29:./cmsis_core/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./cmsis_core/core_cm0.h ****  *   - not yet checked
  31:./cmsis_core/core_cm0.h ****  * .
  32:./cmsis_core/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./cmsis_core/core_cm0.h ****  *
  34:./cmsis_core/core_cm0.h ****  */
  35:./cmsis_core/core_cm0.h **** 
  36:./cmsis_core/core_cm0.h **** 
  37:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./cmsis_core/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./cmsis_core/core_cm0.h ****     - CMSIS version number
  40:./cmsis_core/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./cmsis_core/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./cmsis_core/core_cm0.h ****   @{
  43:./cmsis_core/core_cm0.h ****  */
  44:./cmsis_core/core_cm0.h **** 
  45:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  46:./cmsis_core/core_cm0.h ****  extern "C" {
  47:./cmsis_core/core_cm0.h **** #endif 
  48:./cmsis_core/core_cm0.h **** 
  49:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./cmsis_core/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./cmsis_core/core_cm0.h **** 
  53:./cmsis_core/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
  54:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccKDiUbI.s 			page 3


  55:./cmsis_core/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./cmsis_core/core_cm0.h **** 
  57:./cmsis_core/core_cm0.h **** #if defined (__ICCARM__)
  58:./cmsis_core/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./cmsis_core/core_cm0.h **** #endif
  60:./cmsis_core/core_cm0.h **** 
  61:./cmsis_core/core_cm0.h **** 
  62:./cmsis_core/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./cmsis_core/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./cmsis_core/core_cm0.h **** #endif
  65:./cmsis_core/core_cm0.h **** 
  66:./cmsis_core/core_cm0.h **** 
  67:./cmsis_core/core_cm0.h **** 
  68:./cmsis_core/core_cm0.h **** 
  69:./cmsis_core/core_cm0.h **** /**
  70:./cmsis_core/core_cm0.h ****  * IO definitions
  71:./cmsis_core/core_cm0.h ****  *
  72:./cmsis_core/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./cmsis_core/core_cm0.h ****  */
  74:./cmsis_core/core_cm0.h **** 
  75:./cmsis_core/core_cm0.h **** #ifdef __cplusplus
  76:./cmsis_core/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./cmsis_core/core_cm0.h **** #else
  78:./cmsis_core/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./cmsis_core/core_cm0.h **** #endif
  80:./cmsis_core/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./cmsis_core/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./cmsis_core/core_cm0.h **** 
  83:./cmsis_core/core_cm0.h **** 
  84:./cmsis_core/core_cm0.h **** 
  85:./cmsis_core/core_cm0.h **** /*******************************************************************************
  86:./cmsis_core/core_cm0.h ****  *                 Register Abstraction
  87:./cmsis_core/core_cm0.h ****  ******************************************************************************/
  88:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  89:./cmsis_core/core_cm0.h ****  @{
  90:./cmsis_core/core_cm0.h **** */
  91:./cmsis_core/core_cm0.h **** 
  92:./cmsis_core/core_cm0.h **** 
  93:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  94:./cmsis_core/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  95:./cmsis_core/core_cm0.h ****   @{
  96:./cmsis_core/core_cm0.h ****  */
  97:./cmsis_core/core_cm0.h ****  /*
  98:./cmsis_core/core_cm0.h **** typedef struct
  99:./cmsis_core/core_cm0.h **** {
 100:./cmsis_core/core_cm0.h ****   __IO uint32_t ISER[1];                      //!< (Offset: 0x000) Interrupt Set Enable Register
 101:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0[31];
 102:./cmsis_core/core_cm0.h ****   __IO uint32_t ICER[1];                      //!< (Offset: 0x080) Interrupt Clear Enable Register
 103:./cmsis_core/core_cm0.h ****        uint32_t RSERVED1[31];
 104:./cmsis_core/core_cm0.h ****   __IO uint32_t ISPR[1];                      //!< (Offset: 0x100) Interrupt Set Pending Register
 105:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[31];
 106:./cmsis_core/core_cm0.h ****   __IO uint32_t ICPR[1];                      //!< (Offset: 0x180) Interrupt Clear Pending Register
 107:./cmsis_core/core_cm0.h ****        uint32_t RESERVED3[31];
 108:./cmsis_core/core_cm0.h ****        uint32_t RESERVED4[64];
 109:./cmsis_core/core_cm0.h ****   __IO uint32_t IPR[8];                       //!< (Offset: 0x3EC) Interrupt Priority Register
 110:./cmsis_core/core_cm0.h **** }  NVIC_Type;
 111:./cmsis_core/core_cm0.h **** */
ARM GAS  /tmp/ccKDiUbI.s 			page 4


 112:./cmsis_core/core_cm0.h **** 
 113:./cmsis_core/core_cm0.h ****  typedef struct
 114:./cmsis_core/core_cm0.h ****  {
 115:./cmsis_core/core_cm0.h ****    __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register  
 116:./cmsis_core/core_cm0.h ****         uint32_t RESERVED0[31];
 117:./cmsis_core/core_cm0.h ****    __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register
 118:./cmsis_core/core_cm0.h ****         uint32_t RSERVED1[31];
 119:./cmsis_core/core_cm0.h ****    __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register 
 120:./cmsis_core/core_cm0.h ****         uint32_t RESERVED2[31];
 121:./cmsis_core/core_cm0.h ****    __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Registe
 122:./cmsis_core/core_cm0.h ****         uint32_t RESERVED3[31];
 123:./cmsis_core/core_cm0.h ****         uint32_t RESERVED4[64];
 124:./cmsis_core/core_cm0.h ****    __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register    
 125:./cmsis_core/core_cm0.h ****  }  NVIC_Type;
 126:./cmsis_core/core_cm0.h **** 
 127:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 128:./cmsis_core/core_cm0.h **** 
 129:./cmsis_core/core_cm0.h **** 
 130:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 131:./cmsis_core/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 132:./cmsis_core/core_cm0.h ****   @{
 133:./cmsis_core/core_cm0.h ****  */
 134:./cmsis_core/core_cm0.h **** typedef struct
 135:./cmsis_core/core_cm0.h **** {
 136:./cmsis_core/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 137:./cmsis_core/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 138:./cmsis_core/core_cm0.h ****        uint32_t RESERVED0;                                      
 139:./cmsis_core/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 140:./cmsis_core/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 141:./cmsis_core/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 142:./cmsis_core/core_cm0.h ****        uint32_t RESERVED1;                                      
 143:./cmsis_core/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 144:./cmsis_core/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 145:./cmsis_core/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 146:./cmsis_core/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 147:./cmsis_core/core_cm0.h **** } SCB_Type;                                                
 148:./cmsis_core/core_cm0.h **** 
 149:./cmsis_core/core_cm0.h **** /* SCB CPUID Register Definitions */
 150:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 151:./cmsis_core/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 152:./cmsis_core/core_cm0.h **** 
 153:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 154:./cmsis_core/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 155:./cmsis_core/core_cm0.h **** 
 156:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 157:./cmsis_core/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 158:./cmsis_core/core_cm0.h **** 
 159:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 160:./cmsis_core/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 161:./cmsis_core/core_cm0.h **** 
 162:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 163:./cmsis_core/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 164:./cmsis_core/core_cm0.h **** 
 165:./cmsis_core/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 166:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 167:./cmsis_core/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 168:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccKDiUbI.s 			page 5


 169:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 170:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 171:./cmsis_core/core_cm0.h **** 
 172:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 173:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 174:./cmsis_core/core_cm0.h **** 
 175:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 176:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 177:./cmsis_core/core_cm0.h **** 
 178:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 179:./cmsis_core/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 180:./cmsis_core/core_cm0.h **** 
 181:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 182:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 183:./cmsis_core/core_cm0.h **** 
 184:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 185:./cmsis_core/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 186:./cmsis_core/core_cm0.h **** 
 187:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 188:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 189:./cmsis_core/core_cm0.h **** 
 190:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 191:./cmsis_core/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 192:./cmsis_core/core_cm0.h **** 
 193:./cmsis_core/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 194:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 195:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 196:./cmsis_core/core_cm0.h **** 
 197:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 198:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 199:./cmsis_core/core_cm0.h **** 
 200:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 201:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 202:./cmsis_core/core_cm0.h **** 
 203:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 204:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 205:./cmsis_core/core_cm0.h **** 
 206:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 207:./cmsis_core/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 208:./cmsis_core/core_cm0.h **** 
 209:./cmsis_core/core_cm0.h **** /* SCB System Control Register Definitions */
 210:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 211:./cmsis_core/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 212:./cmsis_core/core_cm0.h **** 
 213:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 214:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 215:./cmsis_core/core_cm0.h **** 
 216:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 217:./cmsis_core/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 218:./cmsis_core/core_cm0.h **** 
 219:./cmsis_core/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 220:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 221:./cmsis_core/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 222:./cmsis_core/core_cm0.h **** 
 223:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 224:./cmsis_core/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 225:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccKDiUbI.s 			page 6


 226:./cmsis_core/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 227:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 228:./cmsis_core/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 229:./cmsis_core/core_cm0.h **** 
 230:./cmsis_core/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 231:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 232:./cmsis_core/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 233:./cmsis_core/core_cm0.h **** 
 234:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 235:./cmsis_core/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 236:./cmsis_core/core_cm0.h **** 
 237:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 238:./cmsis_core/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 239:./cmsis_core/core_cm0.h **** 
 240:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 241:./cmsis_core/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 242:./cmsis_core/core_cm0.h **** 
 243:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 244:./cmsis_core/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 245:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 246:./cmsis_core/core_cm0.h **** 
 247:./cmsis_core/core_cm0.h **** 
 248:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 249:./cmsis_core/core_cm0.h ****   memory mapped structure for SysTick
 250:./cmsis_core/core_cm0.h ****   @{
 251:./cmsis_core/core_cm0.h ****  */
 252:./cmsis_core/core_cm0.h **** typedef struct
 253:./cmsis_core/core_cm0.h **** {
 254:./cmsis_core/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 255:./cmsis_core/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 256:./cmsis_core/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 257:./cmsis_core/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 258:./cmsis_core/core_cm0.h **** } SysTick_Type;
 259:./cmsis_core/core_cm0.h **** 
 260:./cmsis_core/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 261:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 262:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 263:./cmsis_core/core_cm0.h **** 
 264:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 265:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 266:./cmsis_core/core_cm0.h **** 
 267:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 268:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 269:./cmsis_core/core_cm0.h **** 
 270:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 271:./cmsis_core/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 272:./cmsis_core/core_cm0.h **** 
 273:./cmsis_core/core_cm0.h **** /* SysTick Reload Register Definitions */
 274:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 275:./cmsis_core/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 276:./cmsis_core/core_cm0.h **** 
 277:./cmsis_core/core_cm0.h **** /* SysTick Current Register Definitions */
 278:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 279:./cmsis_core/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 280:./cmsis_core/core_cm0.h **** 
 281:./cmsis_core/core_cm0.h **** /* SysTick Calibration Register Definitions */
 282:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
ARM GAS  /tmp/ccKDiUbI.s 			page 7


 283:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 284:./cmsis_core/core_cm0.h **** 
 285:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 286:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 287:./cmsis_core/core_cm0.h **** 
 288:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 289:./cmsis_core/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 290:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 291:./cmsis_core/core_cm0.h **** 
 292:./cmsis_core/core_cm0.h **** 
 293:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 294:./cmsis_core/core_cm0.h ****   memory mapped structure for Core Debug Register
 295:./cmsis_core/core_cm0.h ****   @{
 296:./cmsis_core/core_cm0.h ****  */
 297:./cmsis_core/core_cm0.h **** typedef struct
 298:./cmsis_core/core_cm0.h **** {
 299:./cmsis_core/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 300:./cmsis_core/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 301:./cmsis_core/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 302:./cmsis_core/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 303:./cmsis_core/core_cm0.h **** } CoreDebug_Type;
 304:./cmsis_core/core_cm0.h **** 
 305:./cmsis_core/core_cm0.h **** /* Debug Halting Control and Status Register */
 306:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 307:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 308:./cmsis_core/core_cm0.h **** 
 309:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 310:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 311:./cmsis_core/core_cm0.h **** 
 312:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 313:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 314:./cmsis_core/core_cm0.h **** 
 315:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 316:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 317:./cmsis_core/core_cm0.h **** 
 318:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 319:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 320:./cmsis_core/core_cm0.h **** 
 321:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 322:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 323:./cmsis_core/core_cm0.h **** 
 324:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 325:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 326:./cmsis_core/core_cm0.h **** 
 327:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 328:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 329:./cmsis_core/core_cm0.h **** 
 330:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 331:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 332:./cmsis_core/core_cm0.h **** 
 333:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 334:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 335:./cmsis_core/core_cm0.h **** 
 336:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 337:./cmsis_core/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 338:./cmsis_core/core_cm0.h **** 
 339:./cmsis_core/core_cm0.h **** /* Debug Core Register Selector Register */
ARM GAS  /tmp/ccKDiUbI.s 			page 8


 340:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 341:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 342:./cmsis_core/core_cm0.h **** 
 343:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 344:./cmsis_core/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 345:./cmsis_core/core_cm0.h **** 
 346:./cmsis_core/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 347:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 348:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 349:./cmsis_core/core_cm0.h **** 
 350:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 351:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 352:./cmsis_core/core_cm0.h **** 
 353:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 354:./cmsis_core/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 355:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 356:./cmsis_core/core_cm0.h **** 
 357:./cmsis_core/core_cm0.h **** 
 358:./cmsis_core/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 359:./cmsis_core/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 360:./cmsis_core/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 361:./cmsis_core/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 362:./cmsis_core/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 363:./cmsis_core/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 364:./cmsis_core/core_cm0.h **** 
 365:./cmsis_core/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 366:./cmsis_core/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 367:./cmsis_core/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 368:./cmsis_core/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 369:./cmsis_core/core_cm0.h **** 
 370:./cmsis_core/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 371:./cmsis_core/core_cm0.h **** 
 372:./cmsis_core/core_cm0.h **** 
 373:./cmsis_core/core_cm0.h **** /*******************************************************************************
 374:./cmsis_core/core_cm0.h ****  *                Hardware Abstraction Layer
 375:./cmsis_core/core_cm0.h ****  ******************************************************************************/
 376:./cmsis_core/core_cm0.h **** 
 377:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   )
 378:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 379:./cmsis_core/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 380:./cmsis_core/core_cm0.h **** 
 381:./cmsis_core/core_cm0.h **** #elif defined ( __ICCARM__ )
 382:./cmsis_core/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 383:./cmsis_core/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 384:./cmsis_core/core_cm0.h **** 
 385:./cmsis_core/core_cm0.h **** #elif defined   (  __GNUC__  )
 386:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 387:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 388:./cmsis_core/core_cm0.h **** 
 389:./cmsis_core/core_cm0.h **** #elif defined   (  __TASKING__  )
 390:./cmsis_core/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 391:./cmsis_core/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 392:./cmsis_core/core_cm0.h **** 
 393:./cmsis_core/core_cm0.h **** #endif
 394:./cmsis_core/core_cm0.h **** 
 395:./cmsis_core/core_cm0.h **** 
 396:./cmsis_core/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
ARM GAS  /tmp/ccKDiUbI.s 			page 9


 397:./cmsis_core/core_cm0.h **** 
 398:./cmsis_core/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 399:./cmsis_core/core_cm0.h **** /* ARM armcc specific functions */
 400:./cmsis_core/core_cm0.h **** 
 401:./cmsis_core/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 402:./cmsis_core/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 403:./cmsis_core/core_cm0.h **** 
 404:./cmsis_core/core_cm0.h **** #define __NOP                             __nop
 405:./cmsis_core/core_cm0.h **** #define __WFI                             __wfi
 406:./cmsis_core/core_cm0.h **** #define __WFE                             __wfe
 407:./cmsis_core/core_cm0.h **** #define __SEV                             __sev
 408:./cmsis_core/core_cm0.h **** #define __ISB()                           __isb(0)
 409:./cmsis_core/core_cm0.h **** #define __DSB()                           __dsb(0)
 410:./cmsis_core/core_cm0.h **** #define __DMB()                           __dmb(0)
 411:./cmsis_core/core_cm0.h **** #define __REV                             __rev
 412:./cmsis_core/core_cm0.h **** 
 413:./cmsis_core/core_cm0.h **** 
 414:./cmsis_core/core_cm0.h **** /* intrinsic void __enable_irq();     */
 415:./cmsis_core/core_cm0.h **** /* intrinsic void __disable_irq();    */
 416:./cmsis_core/core_cm0.h **** 
 417:./cmsis_core/core_cm0.h **** 
 418:./cmsis_core/core_cm0.h **** /**
 419:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 420:./cmsis_core/core_cm0.h ****  *
 421:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 422:./cmsis_core/core_cm0.h ****  *
 423:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 424:./cmsis_core/core_cm0.h ****  */
 425:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 426:./cmsis_core/core_cm0.h **** 
 427:./cmsis_core/core_cm0.h **** /**
 428:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 429:./cmsis_core/core_cm0.h ****  *
 430:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 431:./cmsis_core/core_cm0.h ****  *
 432:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 433:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 434:./cmsis_core/core_cm0.h ****  */
 435:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 436:./cmsis_core/core_cm0.h **** 
 437:./cmsis_core/core_cm0.h **** /**
 438:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 439:./cmsis_core/core_cm0.h ****  *
 440:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 441:./cmsis_core/core_cm0.h ****  *
 442:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 443:./cmsis_core/core_cm0.h ****  * Cortex processor register
 444:./cmsis_core/core_cm0.h ****  */
 445:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 446:./cmsis_core/core_cm0.h **** 
 447:./cmsis_core/core_cm0.h **** /**
 448:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 449:./cmsis_core/core_cm0.h ****  *
 450:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 451:./cmsis_core/core_cm0.h ****  *
 452:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 453:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
ARM GAS  /tmp/ccKDiUbI.s 			page 10


 454:./cmsis_core/core_cm0.h ****  */
 455:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 456:./cmsis_core/core_cm0.h **** 
 457:./cmsis_core/core_cm0.h **** /**
 458:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 459:./cmsis_core/core_cm0.h ****  *
 460:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 461:./cmsis_core/core_cm0.h ****  * @return         reversed value
 462:./cmsis_core/core_cm0.h ****  *
 463:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 464:./cmsis_core/core_cm0.h ****  */
 465:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 466:./cmsis_core/core_cm0.h **** 
 467:./cmsis_core/core_cm0.h **** /**
 468:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 469:./cmsis_core/core_cm0.h ****  *
 470:./cmsis_core/core_cm0.h ****  * @param   value  value to reverse
 471:./cmsis_core/core_cm0.h ****  * @return         reversed value
 472:./cmsis_core/core_cm0.h ****  *
 473:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 474:./cmsis_core/core_cm0.h ****  */
 475:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 476:./cmsis_core/core_cm0.h **** 
 477:./cmsis_core/core_cm0.h **** 
 478:./cmsis_core/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 479:./cmsis_core/core_cm0.h **** 
 480:./cmsis_core/core_cm0.h **** /**
 481:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 482:./cmsis_core/core_cm0.h ****  *
 483:./cmsis_core/core_cm0.h ****  * @return PriMask
 484:./cmsis_core/core_cm0.h ****  *
 485:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 486:./cmsis_core/core_cm0.h ****  */
 487:./cmsis_core/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 488:./cmsis_core/core_cm0.h **** 
 489:./cmsis_core/core_cm0.h **** /**
 490:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 491:./cmsis_core/core_cm0.h ****  *
 492:./cmsis_core/core_cm0.h ****  * @param   priMask  PriMask
 493:./cmsis_core/core_cm0.h ****  *
 494:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 495:./cmsis_core/core_cm0.h ****  */
 496:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 497:./cmsis_core/core_cm0.h **** 
 498:./cmsis_core/core_cm0.h **** /**
 499:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 500:./cmsis_core/core_cm0.h ****  * 
 501:./cmsis_core/core_cm0.h ****  * @return Control value
 502:./cmsis_core/core_cm0.h ****  *
 503:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 504:./cmsis_core/core_cm0.h ****  */
 505:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 506:./cmsis_core/core_cm0.h **** 
 507:./cmsis_core/core_cm0.h **** /**
 508:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 509:./cmsis_core/core_cm0.h ****  *
 510:./cmsis_core/core_cm0.h ****  * @param  control  Control value
ARM GAS  /tmp/ccKDiUbI.s 			page 11


 511:./cmsis_core/core_cm0.h ****  *
 512:./cmsis_core/core_cm0.h ****  * Set the control register
 513:./cmsis_core/core_cm0.h ****  */
 514:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 515:./cmsis_core/core_cm0.h **** 
 516:./cmsis_core/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 517:./cmsis_core/core_cm0.h **** 
 518:./cmsis_core/core_cm0.h **** 
 519:./cmsis_core/core_cm0.h **** /**
 520:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 521:./cmsis_core/core_cm0.h ****  *
 522:./cmsis_core/core_cm0.h ****  * @return PriMask
 523:./cmsis_core/core_cm0.h ****  *
 524:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 525:./cmsis_core/core_cm0.h ****  */
 526:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 527:./cmsis_core/core_cm0.h **** {
 528:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 529:./cmsis_core/core_cm0.h ****   return(__regPriMask);
 530:./cmsis_core/core_cm0.h **** }
 531:./cmsis_core/core_cm0.h **** 
 532:./cmsis_core/core_cm0.h **** /**
 533:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 534:./cmsis_core/core_cm0.h ****  *
 535:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 536:./cmsis_core/core_cm0.h ****  *
 537:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 538:./cmsis_core/core_cm0.h ****  */
 539:./cmsis_core/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 540:./cmsis_core/core_cm0.h **** {
 541:./cmsis_core/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 542:./cmsis_core/core_cm0.h ****   __regPriMask = (priMask);
 543:./cmsis_core/core_cm0.h **** }
 544:./cmsis_core/core_cm0.h **** 
 545:./cmsis_core/core_cm0.h **** /**
 546:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 547:./cmsis_core/core_cm0.h ****  * 
 548:./cmsis_core/core_cm0.h ****  * @return Control value
 549:./cmsis_core/core_cm0.h ****  *
 550:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 551:./cmsis_core/core_cm0.h ****  */
 552:./cmsis_core/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 553:./cmsis_core/core_cm0.h **** {
 554:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 555:./cmsis_core/core_cm0.h ****   return(__regControl);
 556:./cmsis_core/core_cm0.h **** }
 557:./cmsis_core/core_cm0.h **** 
 558:./cmsis_core/core_cm0.h **** /**
 559:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 560:./cmsis_core/core_cm0.h ****  *
 561:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 562:./cmsis_core/core_cm0.h ****  *
 563:./cmsis_core/core_cm0.h ****  * Set the control register
 564:./cmsis_core/core_cm0.h ****  */
 565:./cmsis_core/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 566:./cmsis_core/core_cm0.h **** {
 567:./cmsis_core/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
ARM GAS  /tmp/ccKDiUbI.s 			page 12


 568:./cmsis_core/core_cm0.h ****   __regControl = control;
 569:./cmsis_core/core_cm0.h **** }
 570:./cmsis_core/core_cm0.h **** 
 571:./cmsis_core/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 572:./cmsis_core/core_cm0.h **** 
 573:./cmsis_core/core_cm0.h **** 
 574:./cmsis_core/core_cm0.h **** 
 575:./cmsis_core/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 576:./cmsis_core/core_cm0.h **** /* IAR iccarm specific functions */
 577:./cmsis_core/core_cm0.h **** 
 578:./cmsis_core/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 579:./cmsis_core/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 580:./cmsis_core/core_cm0.h **** 
 581:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 582:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 583:./cmsis_core/core_cm0.h **** 
 584:./cmsis_core/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 585:./cmsis_core/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 586:./cmsis_core/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 587:./cmsis_core/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 588:./cmsis_core/core_cm0.h **** 
 589:./cmsis_core/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 590:./cmsis_core/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 591:./cmsis_core/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 592:./cmsis_core/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 593:./cmsis_core/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 594:./cmsis_core/core_cm0.h **** 
 595:./cmsis_core/core_cm0.h **** 
 596:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 597:./cmsis_core/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 598:./cmsis_core/core_cm0.h **** 
 599:./cmsis_core/core_cm0.h **** 
 600:./cmsis_core/core_cm0.h **** /**
 601:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 602:./cmsis_core/core_cm0.h ****  *
 603:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 604:./cmsis_core/core_cm0.h ****  *
 605:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 606:./cmsis_core/core_cm0.h ****  */
 607:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 608:./cmsis_core/core_cm0.h **** 
 609:./cmsis_core/core_cm0.h **** /**
 610:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 611:./cmsis_core/core_cm0.h ****  *
 612:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 613:./cmsis_core/core_cm0.h ****  *
 614:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 615:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 616:./cmsis_core/core_cm0.h ****  */
 617:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 618:./cmsis_core/core_cm0.h **** 
 619:./cmsis_core/core_cm0.h **** /**
 620:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 621:./cmsis_core/core_cm0.h ****  *
 622:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 623:./cmsis_core/core_cm0.h ****  *
 624:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
ARM GAS  /tmp/ccKDiUbI.s 			page 13


 625:./cmsis_core/core_cm0.h ****  * Cortex processor register
 626:./cmsis_core/core_cm0.h ****  */
 627:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 628:./cmsis_core/core_cm0.h **** 
 629:./cmsis_core/core_cm0.h **** /**
 630:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 631:./cmsis_core/core_cm0.h ****  *
 632:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 633:./cmsis_core/core_cm0.h ****  *
 634:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 635:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 636:./cmsis_core/core_cm0.h ****  */
 637:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 638:./cmsis_core/core_cm0.h **** 
 639:./cmsis_core/core_cm0.h **** /**
 640:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 641:./cmsis_core/core_cm0.h ****  *
 642:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 643:./cmsis_core/core_cm0.h ****  * @return        reversed value
 644:./cmsis_core/core_cm0.h ****  *
 645:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 646:./cmsis_core/core_cm0.h ****  */
 647:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 648:./cmsis_core/core_cm0.h **** 
 649:./cmsis_core/core_cm0.h **** 
 650:./cmsis_core/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 651:./cmsis_core/core_cm0.h **** /* GNU gcc specific functions */
 652:./cmsis_core/core_cm0.h **** 
 653:./cmsis_core/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 654:./cmsis_core/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 655:./cmsis_core/core_cm0.h **** 
 656:./cmsis_core/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 657:./cmsis_core/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 658:./cmsis_core/core_cm0.h **** 
 659:./cmsis_core/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 660:./cmsis_core/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 661:./cmsis_core/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 662:./cmsis_core/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 663:./cmsis_core/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 664:./cmsis_core/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 665:./cmsis_core/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 666:./cmsis_core/core_cm0.h **** 
 667:./cmsis_core/core_cm0.h **** 
 668:./cmsis_core/core_cm0.h **** /**
 669:./cmsis_core/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 670:./cmsis_core/core_cm0.h ****  *
 671:./cmsis_core/core_cm0.h ****  * @return ProcessStackPointer
 672:./cmsis_core/core_cm0.h ****  *
 673:./cmsis_core/core_cm0.h ****  * Return the actual process stack pointer
 674:./cmsis_core/core_cm0.h ****  */
 675:./cmsis_core/core_cm0.h **** extern uint32_t __get_PSP(void);
 676:./cmsis_core/core_cm0.h **** 
 677:./cmsis_core/core_cm0.h **** /**
 678:./cmsis_core/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 679:./cmsis_core/core_cm0.h ****  *
 680:./cmsis_core/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 681:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccKDiUbI.s 			page 14


 682:./cmsis_core/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 683:./cmsis_core/core_cm0.h ****  * (process stack pointer) Cortex processor register
 684:./cmsis_core/core_cm0.h ****  */
 685:./cmsis_core/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 686:./cmsis_core/core_cm0.h **** 
 687:./cmsis_core/core_cm0.h **** /**
 688:./cmsis_core/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 689:./cmsis_core/core_cm0.h ****  *
 690:./cmsis_core/core_cm0.h ****  * @return Main Stack Pointer
 691:./cmsis_core/core_cm0.h ****  *
 692:./cmsis_core/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 693:./cmsis_core/core_cm0.h ****  * Cortex processor register
 694:./cmsis_core/core_cm0.h ****  */
 695:./cmsis_core/core_cm0.h **** extern uint32_t __get_MSP(void);
 696:./cmsis_core/core_cm0.h **** 
 697:./cmsis_core/core_cm0.h **** /**
 698:./cmsis_core/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 699:./cmsis_core/core_cm0.h ****  *
 700:./cmsis_core/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 701:./cmsis_core/core_cm0.h ****  *
 702:./cmsis_core/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 703:./cmsis_core/core_cm0.h ****  * (main stack pointer) Cortex processor register
 704:./cmsis_core/core_cm0.h ****  */
 705:./cmsis_core/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 706:./cmsis_core/core_cm0.h **** 
 707:./cmsis_core/core_cm0.h **** /**
 708:./cmsis_core/core_cm0.h ****  * @brief  Return the Priority Mask value
 709:./cmsis_core/core_cm0.h ****  *
 710:./cmsis_core/core_cm0.h ****  * @return PriMask
 711:./cmsis_core/core_cm0.h ****  *
 712:./cmsis_core/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 713:./cmsis_core/core_cm0.h ****  */
 714:./cmsis_core/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 715:./cmsis_core/core_cm0.h **** 
 716:./cmsis_core/core_cm0.h **** /**
 717:./cmsis_core/core_cm0.h ****  * @brief  Set the Priority Mask value
 718:./cmsis_core/core_cm0.h ****  *
 719:./cmsis_core/core_cm0.h ****  * @param  priMask  PriMask
 720:./cmsis_core/core_cm0.h ****  *
 721:./cmsis_core/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 722:./cmsis_core/core_cm0.h ****  */
 723:./cmsis_core/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 724:./cmsis_core/core_cm0.h **** 
 725:./cmsis_core/core_cm0.h **** /**
 726:./cmsis_core/core_cm0.h ****  * @brief  Return the Control Register value
 727:./cmsis_core/core_cm0.h **** * 
 728:./cmsis_core/core_cm0.h **** *  @return Control value
 729:./cmsis_core/core_cm0.h ****  *
 730:./cmsis_core/core_cm0.h ****  * Return the content of the control register
 731:./cmsis_core/core_cm0.h ****  */
 732:./cmsis_core/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 733:./cmsis_core/core_cm0.h **** 
 734:./cmsis_core/core_cm0.h **** /**
 735:./cmsis_core/core_cm0.h ****  * @brief  Set the Control Register value
 736:./cmsis_core/core_cm0.h ****  *
 737:./cmsis_core/core_cm0.h ****  * @param  control  Control value
 738:./cmsis_core/core_cm0.h ****  *
ARM GAS  /tmp/ccKDiUbI.s 			page 15


 739:./cmsis_core/core_cm0.h ****  * Set the control register
 740:./cmsis_core/core_cm0.h ****  */
 741:./cmsis_core/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 742:./cmsis_core/core_cm0.h **** 
 743:./cmsis_core/core_cm0.h **** /**
 744:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in integer value
 745:./cmsis_core/core_cm0.h ****  *
 746:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 747:./cmsis_core/core_cm0.h ****  * @return        reversed value
 748:./cmsis_core/core_cm0.h ****  *
 749:./cmsis_core/core_cm0.h ****  * Reverse byte order in integer value
 750:./cmsis_core/core_cm0.h ****  */
 751:./cmsis_core/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 752:./cmsis_core/core_cm0.h **** 
 753:./cmsis_core/core_cm0.h **** /**
 754:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 755:./cmsis_core/core_cm0.h ****  *
 756:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 757:./cmsis_core/core_cm0.h ****  * @return        reversed value
 758:./cmsis_core/core_cm0.h ****  *
 759:./cmsis_core/core_cm0.h ****  * Reverse byte order in unsigned short value
 760:./cmsis_core/core_cm0.h ****  */
 761:./cmsis_core/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 762:./cmsis_core/core_cm0.h **** 
 763:./cmsis_core/core_cm0.h **** /**
 764:./cmsis_core/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 765:./cmsis_core/core_cm0.h ****  *
 766:./cmsis_core/core_cm0.h ****  * @param  value  value to reverse
 767:./cmsis_core/core_cm0.h ****  * @return        reversed value
 768:./cmsis_core/core_cm0.h ****  *
 769:./cmsis_core/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 770:./cmsis_core/core_cm0.h ****  */
 771:./cmsis_core/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 772:./cmsis_core/core_cm0.h **** 
 773:./cmsis_core/core_cm0.h **** 
 774:./cmsis_core/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 775:./cmsis_core/core_cm0.h **** /* TASKING carm specific functions */
 776:./cmsis_core/core_cm0.h **** 
 777:./cmsis_core/core_cm0.h **** /*
 778:./cmsis_core/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 779:./cmsis_core/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 780:./cmsis_core/core_cm0.h ****  * Including the CMSIS ones.
 781:./cmsis_core/core_cm0.h ****  */
 782:./cmsis_core/core_cm0.h **** 
 783:./cmsis_core/core_cm0.h **** #endif
 784:./cmsis_core/core_cm0.h **** 
 785:./cmsis_core/core_cm0.h **** 
 786:./cmsis_core/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 787:./cmsis_core/core_cm0.h ****   Core  Function Interface containing:
 788:./cmsis_core/core_cm0.h ****   - Core NVIC Functions
 789:./cmsis_core/core_cm0.h ****   - Core SysTick Functions
 790:./cmsis_core/core_cm0.h ****   - Core Reset Functions
 791:./cmsis_core/core_cm0.h **** */
 792:./cmsis_core/core_cm0.h **** /*@{*/
 793:./cmsis_core/core_cm0.h **** 
 794:./cmsis_core/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 795:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccKDiUbI.s 			page 16


 796:./cmsis_core/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 797:./cmsis_core/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 798:./cmsis_core/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 799:./cmsis_core/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 800:./cmsis_core/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 801:./cmsis_core/core_cm0.h **** 
 802:./cmsis_core/core_cm0.h **** 
 803:./cmsis_core/core_cm0.h **** /**
 804:./cmsis_core/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 805:./cmsis_core/core_cm0.h ****  *
 806:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 807:./cmsis_core/core_cm0.h ****  *
 808:./cmsis_core/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 809:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 810:./cmsis_core/core_cm0.h ****  */
 811:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 812:./cmsis_core/core_cm0.h **** {
 813:./cmsis_core/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 814:./cmsis_core/core_cm0.h **** }
 815:./cmsis_core/core_cm0.h **** 
 816:./cmsis_core/core_cm0.h **** /**
 817:./cmsis_core/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 818:./cmsis_core/core_cm0.h ****  * 
 819:./cmsis_core/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 820:./cmsis_core/core_cm0.h ****  * 
 821:./cmsis_core/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 822:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 823:./cmsis_core/core_cm0.h ****  */
 824:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 825:./cmsis_core/core_cm0.h **** {
 826:./cmsis_core/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 827:./cmsis_core/core_cm0.h **** }
 828:./cmsis_core/core_cm0.h **** 
 829:./cmsis_core/core_cm0.h **** /**
 830:./cmsis_core/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 831:./cmsis_core/core_cm0.h ****  * 
 832:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 833:./cmsis_core/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 834:./cmsis_core/core_cm0.h ****  *
 835:./cmsis_core/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 836:./cmsis_core/core_cm0.h ****  * otherwise it returns 0
 837:./cmsis_core/core_cm0.h ****  */
 838:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 839:./cmsis_core/core_cm0.h **** {
 840:./cmsis_core/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 841:./cmsis_core/core_cm0.h **** }
 842:./cmsis_core/core_cm0.h **** 
 843:./cmsis_core/core_cm0.h **** /**
 844:./cmsis_core/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 845:./cmsis_core/core_cm0.h ****  * 
 846:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 847:./cmsis_core/core_cm0.h ****  *
 848:./cmsis_core/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 849:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 850:./cmsis_core/core_cm0.h ****  */
 851:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 852:./cmsis_core/core_cm0.h **** {
ARM GAS  /tmp/ccKDiUbI.s 			page 17


 853:./cmsis_core/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 854:./cmsis_core/core_cm0.h **** }
 855:./cmsis_core/core_cm0.h **** 
 856:./cmsis_core/core_cm0.h **** /**
 857:./cmsis_core/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 858:./cmsis_core/core_cm0.h ****  *
 859:./cmsis_core/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 860:./cmsis_core/core_cm0.h ****  *
 861:./cmsis_core/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 862:./cmsis_core/core_cm0.h ****  * The interrupt number cannot be a negative value.
 863:./cmsis_core/core_cm0.h ****  */
 864:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 865:./cmsis_core/core_cm0.h **** {
 866:./cmsis_core/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 867:./cmsis_core/core_cm0.h **** }
 868:./cmsis_core/core_cm0.h **** 
 869:./cmsis_core/core_cm0.h **** /**
 870:./cmsis_core/core_cm0.h ****  * @brief  Set the priority for an interrupt
 871:./cmsis_core/core_cm0.h ****  *
 872:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 873:./cmsis_core/core_cm0.h ****  * @param  priority  The priority to set
 874:./cmsis_core/core_cm0.h ****  *
 875:./cmsis_core/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 876:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 877:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 878:./cmsis_core/core_cm0.h ****  *
 879:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 880:./cmsis_core/core_cm0.h ****  */
 881:./cmsis_core/core_cm0.h **** /*
 882:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 883:./cmsis_core/core_cm0.h **** {
 884:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 885:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 886:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 887:./cmsis_core/core_cm0.h ****   else {
 888:./cmsis_core/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 889:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 890:./cmsis_core/core_cm0.h **** }
 891:./cmsis_core/core_cm0.h **** */
 892:./cmsis_core/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 893:./cmsis_core/core_cm0.h **** {
  61              		.loc 1 893 0
  62              		.cfi_startproc
  63 0000 30B5     		push	{r4, r5, lr}	@
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 12
  66              		.cfi_offset 4, -12
  67              		.cfi_offset 5, -8
  68              		.cfi_offset 14, -4
  69 0002 83B0     		sub	sp, sp, #12	@,,
  70              	.LCFI1:
  71              		.cfi_def_cfa_offset 24
  72 0004 0200     		movs	r2, r0	@ tmp162, IRQn
  73 0006 0091     		str	r1, [sp]	@ priority, priority
  74 0008 6B46     		mov	r3, sp	@ tmp199,
  75 000a 0733     		adds	r3, r3, #7	@ tmp163,
  76 000c 1A70     		strb	r2, [r3]	@ tmp164, IRQn
ARM GAS  /tmp/ccKDiUbI.s 			page 18


 894:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
  77              		.loc 1 894 0
  78 000e 6B46     		mov	r3, sp	@ tmp200,
  79 0010 0733     		adds	r3, r3, #7	@ tmp165,
  80 0012 1B78     		ldrb	r3, [r3]	@ tmp166, IRQn
  81 0014 7F2B     		cmp	r3, #127	@ tmp166,
  82 0016 36D9     		bls	.L2	@,
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
  83              		.loc 1 895 0
  84 0018 324C     		ldr	r4, .L5	@ D.6740,
  85 001a 6B46     		mov	r3, sp	@ tmp201,
  86 001c 0733     		adds	r3, r3, #7	@ tmp167,
  87 001e 1B78     		ldrb	r3, [r3]	@ D.6741, IRQn
  88 0020 1A00     		movs	r2, r3	@ D.6742, D.6741
  89 0022 0F23     		movs	r3, #15	@ tmp168,
  90 0024 1340     		ands	r3, r2	@ D.6742, D.6742
  91 0026 083B     		subs	r3, r3, #8	@ D.6742,
  92 0028 9908     		lsrs	r1, r3, #2	@ D.6742, D.6742,
  93 002a 2E4A     		ldr	r2, .L5	@ D.6740,
  94 002c 6B46     		mov	r3, sp	@ tmp202,
  95 002e 0733     		adds	r3, r3, #7	@ tmp169,
  96 0030 1B78     		ldrb	r3, [r3]	@ D.6741, IRQn
  97 0032 1800     		movs	r0, r3	@ D.6742, D.6741
  98 0034 0F23     		movs	r3, #15	@ tmp170,
  99 0036 0340     		ands	r3, r0	@ D.6742, D.6742
 100 0038 083B     		subs	r3, r3, #8	@ D.6742,
 101 003a 9B08     		lsrs	r3, r3, #2	@ D.6742, D.6742,
 102 003c 0633     		adds	r3, r3, #6	@ tmp171,
 103 003e 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 104 0040 D318     		adds	r3, r2, r3	@ tmp173, D.6740, tmp172
 105 0042 0433     		adds	r3, r3, #4	@ tmp174,
 106 0044 1B68     		ldr	r3, [r3]	@ D.6742, _9->SHP
 107 0046 6A46     		mov	r2, sp	@ tmp203,
 108 0048 0732     		adds	r2, r2, #7	@ tmp175,
 109 004a 1278     		ldrb	r2, [r2]	@ D.6741, IRQn
 110 004c 1000     		movs	r0, r2	@ D.6742, D.6741
 111 004e 0322     		movs	r2, #3	@ tmp176,
 112 0050 0240     		ands	r2, r0	@ D.6742, D.6742
 113 0052 D200     		lsls	r2, r2, #3	@ D.6742, D.6742,
 114 0054 FF20     		movs	r0, #255	@ tmp177,
 115 0056 9040     		lsls	r0, r0, r2	@ D.6743, D.6743, D.6742
 116 0058 0200     		movs	r2, r0	@ D.6743, D.6743
 117 005a D243     		mvns	r2, r2	@ D.6743, D.6743
 118 005c 1A40     		ands	r2, r3	@ D.6742, D.6742
 896:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 119              		.loc 1 896 0
 120 005e 009B     		ldr	r3, [sp]	@ tmp178, priority
 121 0060 9B01     		lsls	r3, r3, #6	@ D.6742, tmp178,
 122 0062 FF20     		movs	r0, #255	@ tmp179,
 123 0064 1840     		ands	r0, r3	@ D.6742, D.6742
 124 0066 6B46     		mov	r3, sp	@ tmp205,
 125 0068 0733     		adds	r3, r3, #7	@ tmp180,
 126 006a 1B78     		ldrb	r3, [r3]	@ D.6741, IRQn
 127 006c 1D00     		movs	r5, r3	@ D.6742, D.6741
 128 006e 0323     		movs	r3, #3	@ tmp181,
 129 0070 2B40     		ands	r3, r5	@ D.6742, D.6742
 130 0072 DB00     		lsls	r3, r3, #3	@ D.6742, D.6742,
ARM GAS  /tmp/ccKDiUbI.s 			page 19


 131 0074 9840     		lsls	r0, r0, r3	@ D.6742, D.6742, D.6742
 132 0076 0300     		movs	r3, r0	@ D.6742, D.6742
 895:./cmsis_core/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 133              		.loc 1 895 0
 134 0078 1A43     		orrs	r2, r3	@ D.6742, D.6742
 135 007a 8B1D     		adds	r3, r1, #6	@ tmp182, D.6742,
 136 007c 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 137 007e E318     		adds	r3, r4, r3	@ tmp184, D.6740, tmp183
 138 0080 0433     		adds	r3, r3, #4	@ tmp185,
 139 0082 1A60     		str	r2, [r3]	@ D.6742, _3->SHP
 897:./cmsis_core/core_cm0.h ****   else {
 898:./cmsis_core/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 899:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 900:./cmsis_core/core_cm0.h **** }
 140              		.loc 1 900 0
 141 0084 2BE0     		b	.L4	@
 142              	.L2:
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 143              		.loc 1 898 0
 144 0086 184C     		ldr	r4, .L5+4	@ D.6744,
 145 0088 6B46     		mov	r3, sp	@ tmp207,
 146 008a 0733     		adds	r3, r3, #7	@ tmp186,
 147 008c 1B78     		ldrb	r3, [r3]	@ D.6742, IRQn
 148 008e 5BB2     		sxtb	r3, r3	@ D.6742, D.6742
 149 0090 9B08     		lsrs	r3, r3, #2	@ D.6742, D.6742,
 150 0092 1549     		ldr	r1, .L5+4	@ D.6744,
 151 0094 6A46     		mov	r2, sp	@ tmp208,
 152 0096 0732     		adds	r2, r2, #7	@ tmp187,
 153 0098 1278     		ldrb	r2, [r2]	@ D.6742, IRQn
 154 009a 52B2     		sxtb	r2, r2	@ D.6742, D.6742
 155 009c 9208     		lsrs	r2, r2, #2	@ D.6742, D.6742,
 156 009e C032     		adds	r2, r2, #192	@ tmp188,
 157 00a0 9200     		lsls	r2, r2, #2	@ tmp189, tmp188,
 158 00a2 5258     		ldr	r2, [r2, r1]	@ D.6742, _38->IP
 159 00a4 6946     		mov	r1, sp	@ tmp209,
 160 00a6 0731     		adds	r1, r1, #7	@ tmp190,
 161 00a8 0978     		ldrb	r1, [r1]	@ D.6741, IRQn
 162 00aa 0800     		movs	r0, r1	@ D.6742, D.6741
 163 00ac 0321     		movs	r1, #3	@ tmp191,
 164 00ae 0140     		ands	r1, r0	@ D.6742, D.6742
 165 00b0 C900     		lsls	r1, r1, #3	@ D.6742, D.6742,
 166 00b2 FF20     		movs	r0, #255	@ tmp192,
 167 00b4 8840     		lsls	r0, r0, r1	@ D.6743, D.6743, D.6742
 168 00b6 0100     		movs	r1, r0	@ D.6743, D.6743
 169 00b8 C943     		mvns	r1, r1	@ D.6743, D.6743
 170 00ba 1140     		ands	r1, r2	@ D.6742, D.6742
 899:./cmsis_core/core_cm0.h **** }
 171              		.loc 1 899 0
 172 00bc 009A     		ldr	r2, [sp]	@ tmp193, priority
 173 00be 9201     		lsls	r2, r2, #6	@ D.6742, tmp193,
 174 00c0 FF20     		movs	r0, #255	@ tmp194,
 175 00c2 1040     		ands	r0, r2	@ D.6742, D.6742
 176 00c4 6A46     		mov	r2, sp	@ tmp211,
 177 00c6 0732     		adds	r2, r2, #7	@ tmp195,
 178 00c8 1278     		ldrb	r2, [r2]	@ D.6741, IRQn
 179 00ca 1500     		movs	r5, r2	@ D.6742, D.6741
 180 00cc 0322     		movs	r2, #3	@ tmp196,
ARM GAS  /tmp/ccKDiUbI.s 			page 20


 181 00ce 2A40     		ands	r2, r5	@ D.6742, D.6742
 182 00d0 D200     		lsls	r2, r2, #3	@ D.6742, D.6742,
 183 00d2 9040     		lsls	r0, r0, r2	@ D.6742, D.6742, D.6742
 184 00d4 0200     		movs	r2, r0	@ D.6742, D.6742
 898:./cmsis_core/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 185              		.loc 1 898 0
 186 00d6 0A43     		orrs	r2, r1	@ D.6742, D.6742
 187 00d8 C033     		adds	r3, r3, #192	@ tmp197,
 188 00da 9B00     		lsls	r3, r3, #2	@ tmp198, tmp197,
 189 00dc 1A51     		str	r2, [r3, r4]	@ D.6742, _35->IP
 190              	.L4:
 191              		.loc 1 900 0
 192 00de C046     		nop
 193 00e0 03B0     		add	sp, sp, #12	@,,
 194              		@ sp needed	@
 195 00e2 30BD     		pop	{r4, r5, pc}
 196              	.L6:
 197              		.align	2
 198              	.L5:
 199 00e4 00ED00E0 		.word	-536810240
 200 00e8 00E100E0 		.word	-536813312
 201              		.cfi_endproc
 202              	.LFE16:
 203              		.size	NVIC_SetPriority, .-NVIC_SetPriority
 204              		.section	.text.SysTick_Config,"ax",%progbits
 205              		.align	2
 206              		.code	16
 207              		.thumb_func
 208              		.type	SysTick_Config, %function
 209              	SysTick_Config:
 210              	.LFB18:
 901:./cmsis_core/core_cm0.h **** /**
 902:./cmsis_core/core_cm0.h ****  * @brief  Read the priority for an interrupt
 903:./cmsis_core/core_cm0.h ****  *
 904:./cmsis_core/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 905:./cmsis_core/core_cm0.h ****  * @return           The priority for the interrupt
 906:./cmsis_core/core_cm0.h ****  *
 907:./cmsis_core/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 908:./cmsis_core/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 909:./cmsis_core/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 910:./cmsis_core/core_cm0.h ****  *
 911:./cmsis_core/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 912:./cmsis_core/core_cm0.h ****  * priority bits of the microcontroller.
 913:./cmsis_core/core_cm0.h ****  *
 914:./cmsis_core/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 915:./cmsis_core/core_cm0.h ****  */
 916:./cmsis_core/core_cm0.h **** /*
 917:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 918:./cmsis_core/core_cm0.h **** {
 919:./cmsis_core/core_cm0.h **** 
 920:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 921:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 922:./cmsis_core/core_cm0.h ****   else {
 923:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 924:./cmsis_core/core_cm0.h **** }
 925:./cmsis_core/core_cm0.h **** */
 926:./cmsis_core/core_cm0.h **** 
ARM GAS  /tmp/ccKDiUbI.s 			page 21


 927:./cmsis_core/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 928:./cmsis_core/core_cm0.h **** {
 929:./cmsis_core/core_cm0.h **** 
 930:./cmsis_core/core_cm0.h ****   if(IRQn < 0) {
 931:./cmsis_core/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 932:./cmsis_core/core_cm0.h ****   else {
 933:./cmsis_core/core_cm0.h ****     return((uint32_t)((NVIC->IP[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  
 934:./cmsis_core/core_cm0.h **** }
 935:./cmsis_core/core_cm0.h **** 
 936:./cmsis_core/core_cm0.h **** 
 937:./cmsis_core/core_cm0.h **** 
 938:./cmsis_core/core_cm0.h **** /* ##################################    SysTick function  ########################################
 939:./cmsis_core/core_cm0.h **** 
 940:./cmsis_core/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 941:./cmsis_core/core_cm0.h **** 
 942:./cmsis_core/core_cm0.h **** /**
 943:./cmsis_core/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 944:./cmsis_core/core_cm0.h ****  *
 945:./cmsis_core/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 946:./cmsis_core/core_cm0.h ****  * @return  1 = failed, 0 = successful
 947:./cmsis_core/core_cm0.h ****  *
 948:./cmsis_core/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 949:./cmsis_core/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 950:./cmsis_core/core_cm0.h ****  * periodical interrupts.
 951:./cmsis_core/core_cm0.h ****  */
 952:./cmsis_core/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 953:./cmsis_core/core_cm0.h **** { 
 211              		.loc 1 953 0
 212              		.cfi_startproc
 213 0000 00B5     		push	{lr}	@
 214              	.LCFI2:
 215              		.cfi_def_cfa_offset 4
 216              		.cfi_offset 14, -4
 217 0002 83B0     		sub	sp, sp, #12	@,,
 218              	.LCFI3:
 219              		.cfi_def_cfa_offset 16
 220 0004 0190     		str	r0, [sp, #4]	@ ticks, ticks
 954:./cmsis_core/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 221              		.loc 1 954 0
 222 0006 019B     		ldr	r3, [sp, #4]	@ tmp117, ticks
 223 0008 0D4A     		ldr	r2, .L10	@ tmp118,
 224 000a 9342     		cmp	r3, r2	@ tmp117, tmp118
 225 000c 01D9     		bls	.L8	@,
 226              		.loc 1 954 0 is_stmt 0 discriminator 1
 227 000e 0123     		movs	r3, #1	@ D.6745,
 228 0010 12E0     		b	.L9	@
 229              	.L8:
 955:./cmsis_core/core_cm0.h ****                                                                
 956:./cmsis_core/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 230              		.loc 1 956 0 is_stmt 1
 231 0012 0C4B     		ldr	r3, .L10+4	@ D.6746,
 232 0014 019A     		ldr	r2, [sp, #4]	@ tmp119, ticks
 233 0016 1202     		lsls	r2, r2, #8	@ tmp120, tmp119,
 234 0018 120A     		lsrs	r2, r2, #8	@ D.6747, tmp120,
 235 001a 013A     		subs	r2, r2, #1	@ D.6747,
 236 001c 5A60     		str	r2, [r3, #4]	@ D.6747, _6->LOAD
 957:./cmsis_core/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
ARM GAS  /tmp/ccKDiUbI.s 			page 22


 237              		.loc 1 957 0
 238 001e 0123     		movs	r3, #1	@ tmp125,
 239 0020 5B42     		rsbs	r3, r3, #0	@ tmp121, tmp125
 240 0022 0321     		movs	r1, #3	@,
 241 0024 1800     		movs	r0, r3	@, tmp121
 242 0026 FFF7FEFF 		bl	NVIC_SetPriority	@
 958:./cmsis_core/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 243              		.loc 1 958 0
 244 002a 064B     		ldr	r3, .L10+4	@ D.6746,
 245 002c 0022     		movs	r2, #0	@ tmp122,
 246 002e 9A60     		str	r2, [r3, #8]	@ tmp122, _11->VAL
 959:./cmsis_core/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 247              		.loc 1 959 0
 248 0030 044B     		ldr	r3, .L10+4	@ D.6746,
 249 0032 0722     		movs	r2, #7	@ tmp123,
 250 0034 1A60     		str	r2, [r3]	@ tmp123, _13->CTRL
 960:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 961:./cmsis_core/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 962:./cmsis_core/core_cm0.h ****   return (0);                                                  /* Function successful */
 251              		.loc 1 962 0
 252 0036 0023     		movs	r3, #0	@ D.6745,
 253              	.L9:
 963:./cmsis_core/core_cm0.h **** }
 254              		.loc 1 963 0
 255 0038 1800     		movs	r0, r3	@, <retval>
 256 003a 03B0     		add	sp, sp, #12	@,,
 257              		@ sp needed	@
 258 003c 00BD     		pop	{pc}
 259              	.L11:
 260 003e C046     		.align	2
 261              	.L10:
 262 0040 FFFFFF00 		.word	16777215
 263 0044 10E000E0 		.word	-536813552
 264              		.cfi_endproc
 265              	.LFE18:
 266              		.size	SysTick_Config, .-SysTick_Config
 267              		.comm	adc_ch,10,4
 268              		.global	seq_ready
 269              		.section	.bss.seq_ready,"aw",%nobits
 270              		.type	seq_ready, %object
 271              		.size	seq_ready, 1
 272              	seq_ready:
 273 0000 00       		.space	1
 274              		.global	timer_led
 275              		.section	.bss.timer_led,"aw",%nobits
 276              		.align	1
 277              		.type	timer_led, %object
 278              		.size	timer_led, 2
 279              	timer_led:
 280 0000 0000     		.space	2
 281              		.global	overcurrent_shutdown
 282              		.section	.bss.overcurrent_shutdown,"aw",%nobits
 283              		.type	overcurrent_shutdown, %object
 284              		.size	overcurrent_shutdown, 1
 285              	overcurrent_shutdown:
 286 0000 00       		.space	1
 287              		.global	wait_ms_var
ARM GAS  /tmp/ccKDiUbI.s 			page 23


 288              		.section	.bss.wait_ms_var,"aw",%nobits
 289              		.align	1
 290              		.type	wait_ms_var, %object
 291              		.size	wait_ms_var, 2
 292              	wait_ms_var:
 293 0000 0000     		.space	2
 294              		.comm	timer_standby,2,2
 295              		.global	timer_filters
 296              		.section	.bss.timer_filters,"aw",%nobits
 297              		.type	timer_filters, %object
 298              		.size	timer_filters, 1
 299              	timer_filters:
 300 0000 00       		.space	1
 301              		.global	mem_signal
 302              		.section	.data.mem_signal,"aw",%progbits
 303              		.align	2
 304              		.type	mem_signal, %object
 305              		.size	mem_signal, 480
 306              	mem_signal:
 307 0000 0D00     		.short	13
 308 0002 1A00     		.short	26
 309 0004 2700     		.short	39
 310 0006 3400     		.short	52
 311 0008 4100     		.short	65
 312 000a 4E00     		.short	78
 313 000c 5B00     		.short	91
 314 000e 6800     		.short	104
 315 0010 7500     		.short	117
 316 0012 8200     		.short	130
 317 0014 8F00     		.short	143
 318 0016 9C00     		.short	156
 319 0018 A900     		.short	169
 320 001a B600     		.short	182
 321 001c C300     		.short	195
 322 001e CF00     		.short	207
 323 0020 DC00     		.short	220
 324 0022 E900     		.short	233
 325 0024 F600     		.short	246
 326 0026 0201     		.short	258
 327 0028 0F01     		.short	271
 328 002a 1C01     		.short	284
 329 002c 2801     		.short	296
 330 002e 3501     		.short	309
 331 0030 4101     		.short	321
 332 0032 4D01     		.short	333
 333 0034 5A01     		.short	346
 334 0036 6601     		.short	358
 335 0038 7201     		.short	370
 336 003a 7E01     		.short	382
 337 003c 8A01     		.short	394
 338 003e 9601     		.short	406
 339 0040 A201     		.short	418
 340 0042 AE01     		.short	430
 341 0044 BA01     		.short	442
 342 0046 C501     		.short	453
 343 0048 D101     		.short	465
 344 004a DD01     		.short	477
ARM GAS  /tmp/ccKDiUbI.s 			page 24


 345 004c E801     		.short	488
 346 004e F301     		.short	499
 347 0050 FF01     		.short	511
 348 0052 0A02     		.short	522
 349 0054 1502     		.short	533
 350 0056 2002     		.short	544
 351 0058 2B02     		.short	555
 352 005a 3602     		.short	566
 353 005c 4102     		.short	577
 354 005e 4B02     		.short	587
 355 0060 5602     		.short	598
 356 0062 6002     		.short	608
 357 0064 6B02     		.short	619
 358 0066 7502     		.short	629
 359 0068 7F02     		.short	639
 360 006a 8902     		.short	649
 361 006c 9302     		.short	659
 362 006e 9D02     		.short	669
 363 0070 A602     		.short	678
 364 0072 B002     		.short	688
 365 0074 B902     		.short	697
 366 0076 C302     		.short	707
 367 0078 CC02     		.short	716
 368 007a D502     		.short	725
 369 007c DE02     		.short	734
 370 007e E702     		.short	743
 371 0080 EF02     		.short	751
 372 0082 F802     		.short	760
 373 0084 0003     		.short	768
 374 0086 0903     		.short	777
 375 0088 1103     		.short	785
 376 008a 1903     		.short	793
 377 008c 2103     		.short	801
 378 008e 2903     		.short	809
 379 0090 3003     		.short	816
 380 0092 3803     		.short	824
 381 0094 3F03     		.short	831
 382 0096 4603     		.short	838
 383 0098 4D03     		.short	845
 384 009a 5403     		.short	852
 385 009c 5B03     		.short	859
 386 009e 6203     		.short	866
 387 00a0 6803     		.short	872
 388 00a2 6E03     		.short	878
 389 00a4 7403     		.short	884
 390 00a6 7B03     		.short	891
 391 00a8 8003     		.short	896
 392 00aa 8603     		.short	902
 393 00ac 8C03     		.short	908
 394 00ae 9103     		.short	913
 395 00b0 9603     		.short	918
 396 00b2 9B03     		.short	923
 397 00b4 A003     		.short	928
 398 00b6 A503     		.short	933
 399 00b8 AA03     		.short	938
 400 00ba AE03     		.short	942
 401 00bc B203     		.short	946
ARM GAS  /tmp/ccKDiUbI.s 			page 25


 402 00be B703     		.short	951
 403 00c0 BB03     		.short	955
 404 00c2 BE03     		.short	958
 405 00c4 C203     		.short	962
 406 00c6 C503     		.short	965
 407 00c8 C903     		.short	969
 408 00ca CC03     		.short	972
 409 00cc CF03     		.short	975
 410 00ce D203     		.short	978
 411 00d0 D403     		.short	980
 412 00d2 D703     		.short	983
 413 00d4 D903     		.short	985
 414 00d6 DB03     		.short	987
 415 00d8 DD03     		.short	989
 416 00da DF03     		.short	991
 417 00dc E103     		.short	993
 418 00de E203     		.short	994
 419 00e0 E303     		.short	995
 420 00e2 E403     		.short	996
 421 00e4 E503     		.short	997
 422 00e6 E603     		.short	998
 423 00e8 E703     		.short	999
 424 00ea E703     		.short	999
 425 00ec E703     		.short	999
 426 00ee E803     		.short	1000
 427 00f0 E703     		.short	999
 428 00f2 E703     		.short	999
 429 00f4 E703     		.short	999
 430 00f6 E603     		.short	998
 431 00f8 E503     		.short	997
 432 00fa E403     		.short	996
 433 00fc E303     		.short	995
 434 00fe E203     		.short	994
 435 0100 E103     		.short	993
 436 0102 DF03     		.short	991
 437 0104 DD03     		.short	989
 438 0106 DB03     		.short	987
 439 0108 D903     		.short	985
 440 010a D703     		.short	983
 441 010c D403     		.short	980
 442 010e D203     		.short	978
 443 0110 CF03     		.short	975
 444 0112 CC03     		.short	972
 445 0114 C903     		.short	969
 446 0116 C503     		.short	965
 447 0118 C203     		.short	962
 448 011a BE03     		.short	958
 449 011c BB03     		.short	955
 450 011e B703     		.short	951
 451 0120 B203     		.short	946
 452 0122 AE03     		.short	942
 453 0124 AA03     		.short	938
 454 0126 A503     		.short	933
 455 0128 A003     		.short	928
 456 012a 9B03     		.short	923
 457 012c 9603     		.short	918
 458 012e 9103     		.short	913
ARM GAS  /tmp/ccKDiUbI.s 			page 26


 459 0130 8C03     		.short	908
 460 0132 8603     		.short	902
 461 0134 8003     		.short	896
 462 0136 7B03     		.short	891
 463 0138 7403     		.short	884
 464 013a 6E03     		.short	878
 465 013c 6803     		.short	872
 466 013e 6203     		.short	866
 467 0140 5B03     		.short	859
 468 0142 5403     		.short	852
 469 0144 4D03     		.short	845
 470 0146 4603     		.short	838
 471 0148 3F03     		.short	831
 472 014a 3803     		.short	824
 473 014c 3003     		.short	816
 474 014e 2903     		.short	809
 475 0150 2103     		.short	801
 476 0152 1903     		.short	793
 477 0154 1103     		.short	785
 478 0156 0903     		.short	777
 479 0158 0003     		.short	768
 480 015a F802     		.short	760
 481 015c EF02     		.short	751
 482 015e E702     		.short	743
 483 0160 DE02     		.short	734
 484 0162 D502     		.short	725
 485 0164 CC02     		.short	716
 486 0166 C302     		.short	707
 487 0168 B902     		.short	697
 488 016a B002     		.short	688
 489 016c A602     		.short	678
 490 016e 9D02     		.short	669
 491 0170 9302     		.short	659
 492 0172 8902     		.short	649
 493 0174 7F02     		.short	639
 494 0176 7502     		.short	629
 495 0178 6B02     		.short	619
 496 017a 6002     		.short	608
 497 017c 5602     		.short	598
 498 017e 4B02     		.short	587
 499 0180 4102     		.short	577
 500 0182 3602     		.short	566
 501 0184 2B02     		.short	555
 502 0186 2002     		.short	544
 503 0188 1502     		.short	533
 504 018a 0A02     		.short	522
 505 018c FF01     		.short	511
 506 018e F301     		.short	499
 507 0190 E801     		.short	488
 508 0192 DD01     		.short	477
 509 0194 D101     		.short	465
 510 0196 C501     		.short	453
 511 0198 BA01     		.short	442
 512 019a AE01     		.short	430
 513 019c A201     		.short	418
 514 019e 9601     		.short	406
 515 01a0 8A01     		.short	394
ARM GAS  /tmp/ccKDiUbI.s 			page 27


 516 01a2 7E01     		.short	382
 517 01a4 7201     		.short	370
 518 01a6 6601     		.short	358
 519 01a8 5A01     		.short	346
 520 01aa 4D01     		.short	333
 521 01ac 4101     		.short	321
 522 01ae 3501     		.short	309
 523 01b0 2801     		.short	296
 524 01b2 1C01     		.short	284
 525 01b4 0F01     		.short	271
 526 01b6 0201     		.short	258
 527 01b8 F600     		.short	246
 528 01ba E900     		.short	233
 529 01bc DC00     		.short	220
 530 01be CF00     		.short	207
 531 01c0 C300     		.short	195
 532 01c2 B600     		.short	182
 533 01c4 A900     		.short	169
 534 01c6 9C00     		.short	156
 535 01c8 8F00     		.short	143
 536 01ca 8200     		.short	130
 537 01cc 7500     		.short	117
 538 01ce 6800     		.short	104
 539 01d0 5B00     		.short	91
 540 01d2 4E00     		.short	78
 541 01d4 4100     		.short	65
 542 01d6 3400     		.short	52
 543 01d8 2700     		.short	39
 544 01da 1A00     		.short	26
 545 01dc 0D00     		.short	13
 546 01de 0000     		.short	0
 547              		.comm	p_signal,4,4
 548              		.section	.text.main,"ax",%progbits
 549              		.align	2
 550              		.global	main
 551              		.code	16
 552              		.thumb_func
 553              		.type	main, %function
 554              	main:
 555              	.LFB20:
 556              		.file 2 "src/main.c"
   1:src/main.c    **** //-----------------------------------------------------
   2:src/main.c    **** // #### PFC 150W PROJECT  F030 - Custom Board ####
   3:src/main.c    **** // ##
   4:src/main.c    **** // ## @Author: Med
   5:src/main.c    **** // ## @Editor: Emacs - ggtags
   6:src/main.c    **** // ## @TAGS:   Global
   7:src/main.c    **** // ## @CPU:    STM32F030
   8:src/main.c    **** // ##
   9:src/main.c    **** // #### MAIN.C ########################################
  10:src/main.c    **** //-----------------------------------------------------
  11:src/main.c    **** 
  12:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  13:src/main.c    **** #include "stm32f0xx.h"
  14:src/main.c    **** 
  15:src/main.c    **** #include <stdio.h>
  16:src/main.c    **** #include <string.h>
ARM GAS  /tmp/ccKDiUbI.s 			page 28


  17:src/main.c    **** #include <stdlib.h>
  18:src/main.c    **** 
  19:src/main.c    **** #include "gpio.h"
  20:src/main.c    **** #include "tim.h"
  21:src/main.c    **** #include "uart.h"
  22:src/main.c    **** #include "hard.h"
  23:src/main.c    **** 
  24:src/main.c    **** #include "core_cm0.h"
  25:src/main.c    **** #include "adc.h"
  26:src/main.c    **** #include "dma.h"
  27:src/main.c    **** #include "flash_program.h"
  28:src/main.c    **** #include "dsp.h"
  29:src/main.c    **** #include "it.h"
  30:src/main.c    **** #include "sync.h"
  31:src/main.c    **** 
  32:src/main.c    **** 
  33:src/main.c    **** // Externals -----------------------------------------------
  34:src/main.c    **** 
  35:src/main.c    **** // -- Externals from or for Serial Port --------------------
  36:src/main.c    **** // volatile unsigned char tx1buff [SIZEOF_DATA];
  37:src/main.c    **** // volatile unsigned char rx1buff [SIZEOF_DATA];
  38:src/main.c    **** // volatile unsigned char usart1_have_data = 0;
  39:src/main.c    **** 
  40:src/main.c    **** // -- Externals from or for the ADC ------------------------
  41:src/main.c    **** volatile unsigned short adc_ch [ADC_CHANNEL_QUANTITY];
  42:src/main.c    **** volatile unsigned char seq_ready = 0;
  43:src/main.c    **** 
  44:src/main.c    **** // -- Externals for the timers -----------------------------
  45:src/main.c    **** volatile unsigned short timer_led = 0;
  46:src/main.c    **** 
  47:src/main.c    **** // -- Externals used for analog or digital filters ---------
  48:src/main.c    **** // volatile unsigned short take_temp_sample = 0;
  49:src/main.c    **** 
  50:src/main.c    **** 
  51:src/main.c    **** 
  52:src/main.c    **** 
  53:src/main.c    **** // Globals -------------------------------------------------
  54:src/main.c    **** volatile unsigned char overcurrent_shutdown = 0;
  55:src/main.c    **** // volatile short d = 0;
  56:src/main.c    **** // short ez1 = 0;
  57:src/main.c    **** // short ez2 = 0;
  58:src/main.c    **** // // unsigned short dmax = 0;
  59:src/main.c    **** // unsigned short last_d = 0;
  60:src/main.c    **** // #define DELTA_D    2
  61:src/main.c    **** 
  62:src/main.c    **** 
  63:src/main.c    **** // ------- de los timers -------
  64:src/main.c    **** volatile unsigned short wait_ms_var = 0;
  65:src/main.c    **** volatile unsigned short timer_standby;
  66:src/main.c    **** //volatile unsigned char display_timer;
  67:src/main.c    **** // volatile unsigned short timer_meas;
  68:src/main.c    **** volatile unsigned char timer_filters = 0;
  69:src/main.c    **** // volatile unsigned short dmax_permited = 0;
  70:src/main.c    **** 
  71:src/main.c    **** #ifdef HARD_TEST_MODE_RECT_SINUSOIDAL
  72:src/main.c    **** #define USE_SIGNAL_CURRENT_SIN_1_A
  73:src/main.c    **** #define SIZEOF_SIGNAL 240
ARM GAS  /tmp/ccKDiUbI.s 			page 29


  74:src/main.c    **** 
  75:src/main.c    **** unsigned short mem_signal [SIZEOF_SIGNAL] = {13,26,39,52,65,78,91,104,117,130,
  76:src/main.c    ****                                              143,156,169,182,195,207,220,233,246,258,
  77:src/main.c    ****                                              271,284,296,309,321,333,346,358,370,382,
  78:src/main.c    ****                                              394,406,418,430,442,453,465,477,488,499,
  79:src/main.c    ****                                              511,522,533,544,555,566,577,587,598,608,
  80:src/main.c    ****                                              619,629,639,649,659,669,678,688,697,707,
  81:src/main.c    ****                                              716,725,734,743,751,760,768,777,785,793,
  82:src/main.c    ****                                              801,809,816,824,831,838,845,852,859,866,
  83:src/main.c    ****                                              872,878,884,891,896,902,908,913,918,923,
  84:src/main.c    ****                                              928,933,938,942,946,951,955,958,962,965,
  85:src/main.c    ****                                              969,972,975,978,980,983,985,987,989,991,
  86:src/main.c    ****                                              993,994,995,996,997,998,999,999,999,1000,
  87:src/main.c    ****                                              999,999,999,998,997,996,995,994,993,991,
  88:src/main.c    ****                                              989,987,985,983,980,978,975,972,969,965,
  89:src/main.c    ****                                              962,958,955,951,946,942,938,933,928,923,
  90:src/main.c    ****                                              918,913,908,902,896,891,884,878,872,866,
  91:src/main.c    ****                                              859,852,845,838,831,824,816,809,801,793,
  92:src/main.c    ****                                              785,777,768,760,751,743,734,725,716,707,
  93:src/main.c    ****                                              697,688,678,669,659,649,639,629,619,608,
  94:src/main.c    ****                                              598,587,577,566,555,544,533,522,511,499,
  95:src/main.c    ****                                              488,477,465,453,442,430,418,406,394,382,
  96:src/main.c    ****                                              370,358,346,333,321,309,296,284,271,258,
  97:src/main.c    ****                                              246,233,220,207,195,182,169,156,143,130,
  98:src/main.c    ****                                              117,104,91,78,65,52,39,26,13,0};
  99:src/main.c    **** #endif
 100:src/main.c    **** 
 101:src/main.c    **** unsigned short * p_signal;
 102:src/main.c    **** 
 103:src/main.c    **** // Module Functions ----------------------------------------
 104:src/main.c    **** void TimingDelay_Decrement (void);
 105:src/main.c    **** // extern void EXTI4_15_IRQHandler(void);
 106:src/main.c    **** 
 107:src/main.c    **** 
 108:src/main.c    **** 
 109:src/main.c    **** //-------------------------------------------//
 110:src/main.c    **** // @brief  Main program.
 111:src/main.c    **** // @param  None
 112:src/main.c    **** // @retval None
 113:src/main.c    **** //------------------------------------------//
 114:src/main.c    **** int main(void)
 115:src/main.c    **** {
 557              		.loc 2 115 0
 558              		.cfi_startproc
 559 0000 00B5     		push	{lr}	@
 560              	.LCFI4:
 561              		.cfi_def_cfa_offset 4
 562              		.cfi_offset 14, -4
 563 0002 85B0     		sub	sp, sp, #20	@,,
 564              	.LCFI5:
 565              		.cfi_def_cfa_offset 24
 116:src/main.c    ****     unsigned char i;
 117:src/main.c    ****     unsigned short ii;
 118:src/main.c    **** 
 119:src/main.c    ****     driver_states_t driver_state = AUTO_RESTART;
 566              		.loc 2 119 0
 567 0004 0E23     		movs	r3, #14	@ tmp143,
ARM GAS  /tmp/ccKDiUbI.s 			page 30


 568 0006 6B44     		add	r3, r3, sp	@ tmp143,
 569 0008 0822     		movs	r2, #8	@ tmp144,
 570 000a 1A70     		strb	r2, [r3]	@ tmp145, driver_state
 120:src/main.c    ****     unsigned char soft_start_cnt = 0;
 571              		.loc 2 120 0
 572 000c 0D23     		movs	r3, #13	@ tmp146,
 573 000e 6B44     		add	r3, r3, sp	@ tmp146,
 574 0010 0022     		movs	r2, #0	@ tmp147,
 575 0012 1A70     		strb	r2, [r3]	@ tmp148, soft_start_cnt
 121:src/main.c    ****     short d = 0;
 576              		.loc 2 121 0
 577 0014 0A23     		movs	r3, #10	@ tmp149,
 578 0016 6B44     		add	r3, r3, sp	@ tmp149,
 579 0018 0022     		movs	r2, #0	@ tmp150,
 580 001a 1A80     		strh	r2, [r3]	@ tmp151, d
 122:src/main.c    ****     short ez1 = 0;
 581              		.loc 2 122 0
 582 001c 02AB     		add	r3, sp, #8	@ tmp152,,
 583 001e 0022     		movs	r2, #0	@ tmp153,
 584 0020 1A80     		strh	r2, [r3]	@ tmp154, ez1
 123:src/main.c    ****     short ez2 = 0;
 585              		.loc 2 123 0
 586 0022 6B46     		mov	r3, sp	@ tmp209,
 587 0024 0633     		adds	r3, r3, #6	@ tmp155,
 588 0026 0022     		movs	r2, #0	@ tmp156,
 589 0028 1A80     		strh	r2, [r3]	@ tmp157, ez2
 124:src/main.c    **** 
 125:src/main.c    **** 
 126:src/main.c    ****     //GPIO Configuration.
 127:src/main.c    ****     GPIO_Config();
 590              		.loc 2 127 0
 591 002a FFF7FEFF 		bl	GPIO_Config	@
 128:src/main.c    **** 
 129:src/main.c    ****     //ACTIVAR SYSTICK TIMER
 130:src/main.c    ****     if (SysTick_Config(48000))
 592              		.loc 2 130 0
 593 002e 3F4B     		ldr	r3, .L24	@ tmp158,
 594 0030 1800     		movs	r0, r3	@, tmp158
 595 0032 FFF7FEFF 		bl	SysTick_Config	@
 596 0036 031E     		subs	r3, r0, #0	@ D.6748,,
 597 0038 28D0     		beq	.L13	@,
 598              	.L18:
 131:src/main.c    ****     {
 132:src/main.c    ****         while (1)	/* Capture error */
 133:src/main.c    ****         {
 134:src/main.c    ****             if (LED)
 599              		.loc 2 134 0
 600 003a 9023     		movs	r3, #144	@ tmp204,
 601 003c DB05     		lsls	r3, r3, #23	@ D.6749, tmp204,
 602 003e 9B8A     		ldrh	r3, [r3, #20]	@ tmp160,
 603 0040 9BB2     		uxth	r3, r3	@ D.6750, tmp160
 604 0042 1A00     		movs	r2, r3	@ D.6751, D.6750
 605 0044 8023     		movs	r3, #128	@ tmp205,
 606 0046 DB00     		lsls	r3, r3, #3	@ tmp161, tmp205,
 607 0048 1340     		ands	r3, r2	@ D.6751, D.6751
 608 004a 05D0     		beq	.L14	@,
 135:src/main.c    ****                 LED_OFF;
ARM GAS  /tmp/ccKDiUbI.s 			page 31


 609              		.loc 2 135 0
 610 004c 9023     		movs	r3, #144	@ tmp202,
 611 004e DB05     		lsls	r3, r3, #23	@ D.6749, tmp202,
 612 0050 8022     		movs	r2, #128	@ tmp203,
 613 0052 D204     		lsls	r2, r2, #19	@ tmp162, tmp203,
 614 0054 9A61     		str	r2, [r3, #24]	@ tmp162, _20->BSRR
 615 0056 04E0     		b	.L15	@
 616              	.L14:
 136:src/main.c    ****             else
 137:src/main.c    ****                 LED_ON;
 617              		.loc 2 137 0
 618 0058 9023     		movs	r3, #144	@ tmp200,
 619 005a DB05     		lsls	r3, r3, #23	@ D.6749, tmp200,
 620 005c 8022     		movs	r2, #128	@ tmp201,
 621 005e D200     		lsls	r2, r2, #3	@ tmp163, tmp201,
 622 0060 9A61     		str	r2, [r3, #24]	@ tmp163, _22->BSRR
 623              	.L15:
 138:src/main.c    **** 
 139:src/main.c    ****             for (i = 0; i < 255; i++)
 624              		.loc 2 139 0
 625 0062 0F23     		movs	r3, #15	@ tmp164,
 626 0064 6B44     		add	r3, r3, sp	@ tmp164,
 627 0066 0022     		movs	r2, #0	@ tmp165,
 628 0068 1A70     		strb	r2, [r3]	@ tmp166, i
 629 006a 09E0     		b	.L16	@
 630              	.L17:
 140:src/main.c    ****             {
 141:src/main.c    ****                 asm (	"nop \n\t"
 631              		.loc 2 141 0 discriminator 3
 632              		.syntax divided
 633              	@ 141 "src/main.c" 1
 634 006c C046     		nop 
 635 006e C046     		nop 
 636 0070 C046     		nop 
 637              		
 638              	@ 0 "" 2
 139:src/main.c    ****             {
 639              		.loc 2 139 0 discriminator 3
 640              		.thumb
 641              		.syntax unified
 642 0072 0F23     		movs	r3, #15	@ tmp167,
 643 0074 6B44     		add	r3, r3, sp	@ tmp167,
 644 0076 1A78     		ldrb	r2, [r3]	@ D.6752, i
 645 0078 0F23     		movs	r3, #15	@ tmp168,
 646 007a 6B44     		add	r3, r3, sp	@ tmp168,
 647 007c 0132     		adds	r2, r2, #1	@ tmp169,
 648 007e 1A70     		strb	r2, [r3]	@ tmp170, i
 649              	.L16:
 139:src/main.c    ****             {
 650              		.loc 2 139 0 is_stmt 0 discriminator 1
 651 0080 0F23     		movs	r3, #15	@ tmp171,
 652 0082 6B44     		add	r3, r3, sp	@ tmp171,
 653 0084 1B78     		ldrb	r3, [r3]	@ tmp172, i
 654 0086 FF2B     		cmp	r3, #255	@ tmp172,
 655 0088 F0D1     		bne	.L17	@,
 142:src/main.c    ****                         "nop \n\t"
 143:src/main.c    ****                         "nop \n\t" );
ARM GAS  /tmp/ccKDiUbI.s 			page 32


 144:src/main.c    ****             }
 145:src/main.c    ****         }
 656              		.loc 2 145 0 is_stmt 1
 657 008a D6E7     		b	.L18	@
 658              	.L13:
 146:src/main.c    ****     }
 147:src/main.c    **** 
 148:src/main.c    **** //---------- Pruebas de Hardware --------//    
 149:src/main.c    ****     // EXTIOff ();
 150:src/main.c    ****     
 151:src/main.c    ****     TIM_3_Init();    //Used for mosfet channels control and ADC synchro
 659              		.loc 2 151 0
 660 008c FFF7FEFF 		bl	TIM_3_Init	@
 152:src/main.c    **** #ifdef USE_LED_AS_TIM1_CH3
 153:src/main.c    ****     TIM_1_Init();
 154:src/main.c    **** #endif
 155:src/main.c    ****     // TIM_16_Init();    //free running with tick: 1us
 156:src/main.c    ****     // TIM16Enable();
 157:src/main.c    ****     // TIM_17_Init();    //with int, tick: 1us
 158:src/main.c    ****     MA32Circular_Reset();
 661              		.loc 2 158 0
 662 0090 FFF7FEFF 		bl	MA32Circular_Reset	@
 159:src/main.c    ****     
 160:src/main.c    ****     CTRL_MOSFET(DUTY_NONE);
 663              		.loc 2 160 0
 664 0094 0020     		movs	r0, #0	@,
 665 0096 FFF7FEFF 		bl	Update_TIM3_CH1	@
 161:src/main.c    ****     
 162:src/main.c    ****     //ADC and DMA configuration
 163:src/main.c    ****     AdcConfig();
 666              		.loc 2 163 0
 667 009a FFF7FEFF 		bl	AdcConfig	@
 164:src/main.c    ****     DMAConfig();
 668              		.loc 2 164 0
 669 009e FFF7FEFF 		bl	DMAConfig	@
 165:src/main.c    ****     DMA1_Channel1->CCR |= DMA_CCR_EN;
 670              		.loc 2 165 0
 671 00a2 234B     		ldr	r3, .L24+4	@ D.6753,
 672 00a4 224A     		ldr	r2, .L24+4	@ D.6753,
 673 00a6 1268     		ldr	r2, [r2]	@ D.6748, _33->CCR
 674 00a8 0121     		movs	r1, #1	@ tmp173,
 675 00aa 0A43     		orrs	r2, r1	@ D.6748, tmp173
 676 00ac 1A60     		str	r2, [r3]	@ D.6748, _32->CCR
 166:src/main.c    ****     ADC1->CR |= ADC_CR_ADSTART;
 677              		.loc 2 166 0
 678 00ae 214B     		ldr	r3, .L24+8	@ D.6754,
 679 00b0 204A     		ldr	r2, .L24+8	@ D.6754,
 680 00b2 9268     		ldr	r2, [r2, #8]	@ D.6748, _38->CR
 681 00b4 0421     		movs	r1, #4	@ tmp174,
 682 00b6 0A43     		orrs	r2, r1	@ D.6748, tmp174
 683 00b8 9A60     		str	r2, [r3, #8]	@ D.6748, _37->CR
 167:src/main.c    ****     //end of ADC & DMA
 168:src/main.c    **** 
 169:src/main.c    **** #ifdef HARD_TEST_MODE_RECT_SINUSOIDAL
 170:src/main.c    ****     p_signal = mem_signal;
 684              		.loc 2 170 0
 685 00ba 1F4B     		ldr	r3, .L24+12	@ tmp175,
ARM GAS  /tmp/ccKDiUbI.s 			page 33


 686 00bc 1F4A     		ldr	r2, .L24+16	@ tmp176,
 687 00be 1A60     		str	r2, [r3]	@ tmp176, p_signal
 688              	.L23:
 171:src/main.c    **** 
 172:src/main.c    ****     while (1)
 173:src/main.c    ****     {
 174:src/main.c    ****         if (sequence_ready)
 689              		.loc 2 174 0
 690 00c0 1F4B     		ldr	r3, .L24+20	@ D.6755,
 691 00c2 1B68     		ldr	r3, [r3]	@ D.6748, _43->ISR
 692 00c4 0222     		movs	r2, #2	@ tmp177,
 693 00c6 1340     		ands	r3, r2	@ D.6748, tmp177
 694 00c8 FAD0     		beq	.L23	@,
 175:src/main.c    ****         {
 176:src/main.c    ****             sequence_ready_reset;
 695              		.loc 2 176 0
 696 00ca 1D4B     		ldr	r3, .L24+20	@ D.6755,
 697 00cc 0222     		movs	r2, #2	@ tmp178,
 698 00ce 5A60     		str	r2, [r3, #4]	@ tmp178, _46->IFCR
 177:src/main.c    ****             //aca la senial (el ultimo punto) termina en 0
 178:src/main.c    ****             if (p_signal < &mem_signal[(SIZEOF_SIGNAL - 1)])
 699              		.loc 2 178 0
 700 00d0 194B     		ldr	r3, .L24+12	@ tmp179,
 701 00d2 1A68     		ldr	r2, [r3]	@ D.6756, p_signal
 702 00d4 1B4B     		ldr	r3, .L24+24	@ tmp180,
 703 00d6 9A42     		cmp	r2, r3	@ D.6756, tmp180
 704 00d8 05D2     		bcs	.L20	@,
 179:src/main.c    ****             {
 180:src/main.c    ****                 p_signal++;
 705              		.loc 2 180 0
 706 00da 174B     		ldr	r3, .L24+12	@ tmp181,
 707 00dc 1B68     		ldr	r3, [r3]	@ D.6756, p_signal
 708 00de 9A1C     		adds	r2, r3, #2	@ D.6756, D.6756,
 709 00e0 154B     		ldr	r3, .L24+12	@ tmp182,
 710 00e2 1A60     		str	r2, [r3]	@ D.6756, p_signal
 711 00e4 16E0     		b	.L21	@
 712              	.L20:
 181:src/main.c    ****             }
 182:src/main.c    ****             else
 183:src/main.c    ****             {
 184:src/main.c    ****                 p_signal = mem_signal;
 713              		.loc 2 184 0
 714 00e6 144B     		ldr	r3, .L24+12	@ tmp183,
 715 00e8 144A     		ldr	r2, .L24+16	@ tmp184,
 716 00ea 1A60     		str	r2, [r3]	@ tmp184, p_signal
 185:src/main.c    **** #ifdef USE_LED_FOR_SIGNAL
 186:src/main.c    ****                 if (LED)
 717              		.loc 2 186 0
 718 00ec 9023     		movs	r3, #144	@ tmp198,
 719 00ee DB05     		lsls	r3, r3, #23	@ D.6749, tmp198,
 720 00f0 9B8A     		ldrh	r3, [r3, #20]	@ tmp186,
 721 00f2 9BB2     		uxth	r3, r3	@ D.6750, tmp186
 722 00f4 1A00     		movs	r2, r3	@ D.6751, D.6750
 723 00f6 8023     		movs	r3, #128	@ tmp199,
 724 00f8 DB00     		lsls	r3, r3, #3	@ tmp187, tmp199,
 725 00fa 1340     		ands	r3, r2	@ D.6751, D.6751
 726 00fc 05D0     		beq	.L22	@,
ARM GAS  /tmp/ccKDiUbI.s 			page 34


 187:src/main.c    ****                     LED_OFF;
 727              		.loc 2 187 0
 728 00fe 9023     		movs	r3, #144	@ tmp196,
 729 0100 DB05     		lsls	r3, r3, #23	@ D.6749, tmp196,
 730 0102 8022     		movs	r2, #128	@ tmp197,
 731 0104 D204     		lsls	r2, r2, #19	@ tmp188, tmp197,
 732 0106 9A61     		str	r2, [r3, #24]	@ tmp188, _57->BSRR
 733 0108 04E0     		b	.L21	@
 734              	.L22:
 188:src/main.c    ****                 else
 189:src/main.c    ****                     LED_ON;
 735              		.loc 2 189 0
 736 010a 9023     		movs	r3, #144	@ tmp194,
 737 010c DB05     		lsls	r3, r3, #23	@ D.6749, tmp194,
 738 010e 8022     		movs	r2, #128	@ tmp195,
 739 0110 D200     		lsls	r2, r2, #3	@ tmp189, tmp195,
 740 0112 9A61     		str	r2, [r3, #24]	@ tmp189, _59->BSRR
 741              	.L21:
 190:src/main.c    **** #endif
 191:src/main.c    ****             }
 192:src/main.c    ****             CTRL_MOSFET(DUTY_100_PERCENT - *p_signal);
 742              		.loc 2 192 0
 743 0114 084B     		ldr	r3, .L24+12	@ tmp190,
 744 0116 1B68     		ldr	r3, [r3]	@ D.6756, p_signal
 745 0118 1B88     		ldrh	r3, [r3]	@ D.6750, *_61
 746 011a FA22     		movs	r2, #250	@ tmp193,
 747 011c 9200     		lsls	r2, r2, #2	@ tmp192, tmp193,
 748 011e D31A     		subs	r3, r2, r3	@ tmp191, tmp192, D.6750
 749 0120 9BB2     		uxth	r3, r3	@ D.6750, tmp191
 750 0122 1800     		movs	r0, r3	@, D.6750
 751 0124 FFF7FEFF 		bl	Update_TIM3_CH1	@
 193:src/main.c    ****         }
 194:src/main.c    ****     }
 752              		.loc 2 194 0
 753 0128 CAE7     		b	.L23	@
 754              	.L25:
 755 012a C046     		.align	2
 756              	.L24:
 757 012c 80BB0000 		.word	48000
 758 0130 08000240 		.word	1073872904
 759 0134 00240140 		.word	1073816576
 760 0138 00000000 		.word	p_signal
 761 013c 00000000 		.word	mem_signal
 762 0140 00000240 		.word	1073872896
 763 0144 DE010000 		.word	mem_signal+478
 764              		.cfi_endproc
 765              	.LFE20:
 766              		.size	main, .-main
 767              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 768              		.align	2
 769              		.global	TimingDelay_Decrement
 770              		.code	16
 771              		.thumb_func
 772              		.type	TimingDelay_Decrement, %function
 773              	TimingDelay_Decrement:
 774              	.LFB21:
 195:src/main.c    **** #endif    // HARD_TEST_MODE_RECT_SINUSOIDAL
ARM GAS  /tmp/ccKDiUbI.s 			page 35


 196:src/main.c    **** 
 197:src/main.c    ****     
 198:src/main.c    **** #ifdef HARD_TEST_MODE_CONDUCTION_ANGLE
 199:src/main.c    ****     Hard_Reset_Voltage_Filter();
 200:src/main.c    ****     
 201:src/main.c    ****     while (1)
 202:src/main.c    ****     {
 203:src/main.c    ****         if (sequence_ready)
 204:src/main.c    ****         {
 205:src/main.c    ****             sequence_ready_reset;
 206:src/main.c    **** 
 207:src/main.c    ****             ii = Hard_Update_Voltage_Sense();
 208:src/main.c    **** 
 209:src/main.c    ****             if (ii)
 210:src/main.c    ****             {
 211:src/main.c    ****                 ii = 0;
 212:src/main.c    ****                 CTRL_LED(Hard_Get_Conduction_Angle());
 213:src/main.c    ****                 // CTRL_LED(Hard_Get_Hidden_Value());
 214:src/main.c    ****             }
 215:src/main.c    ****         }
 216:src/main.c    ****     }
 217:src/main.c    **** #endif    // HARD_TEST_MODE_CONDUCTION_ANGLE
 218:src/main.c    **** 
 219:src/main.c    **** #ifdef HARD_TEST_MODE_LINE_SYNC
 220:src/main.c    ****     Hard_Reset_Voltage_Filter();
 221:src/main.c    **** 
 222:src/main.c    ****     // CTRL_MOSFET(DUTY_10_PERCENT);
 223:src/main.c    ****     // CTRL_LED(DUTY_50_PERCENT);
 224:src/main.c    ****     while (1)
 225:src/main.c    ****     {
 226:src/main.c    ****         if (sequence_ready)
 227:src/main.c    ****         {
 228:src/main.c    ****             sequence_ready_reset;
 229:src/main.c    ****             Hard_Update_Voltage_Filter(Vline_Sense);
 230:src/main.c    ****         }
 231:src/main.c    **** 
 232:src/main.c    ****         Hard_Update_Voltage_Sense();
 233:src/main.c    ****     }
 234:src/main.c    **** #endif
 235:src/main.c    ****     
 236:src/main.c    **** #ifdef HARD_TEST_MODE
 237:src/main.c    ****     ChangeLed(LED_STANDBY);
 238:src/main.c    ****     while (1)
 239:src/main.c    ****     {
 240:src/main.c    ****         if (sequence_ready)
 241:src/main.c    ****         {
 242:src/main.c    ****             sequence_ready_reset;
 243:src/main.c    ****             // if (LED)
 244:src/main.c    ****             //     LED_OFF;
 245:src/main.c    ****             // else
 246:src/main.c    ****             //     LED_ON;
 247:src/main.c    ****             // CTRL_MOSFET(Vbias_Sense);
 248:src/main.c    ****             // CTRL_MOSFET(Vup);
 249:src/main.c    ****             // CTRL_MOSFET(I_Sense);
 250:src/main.c    ****             // CTRL_MOSFET(Iup);
 251:src/main.c    ****             CTRL_MOSFET(V220_Sense);
 252:src/main.c    ****         }
ARM GAS  /tmp/ccKDiUbI.s 			page 36


 253:src/main.c    ****         UpdateLed();
 254:src/main.c    ****     }
 255:src/main.c    **** #endif
 256:src/main.c    ****     
 257:src/main.c    ****     
 258:src/main.c    ****     //--- Production Program ----------
 259:src/main.c    **** #ifdef DRIVER_MODE
 260:src/main.c    ****     Hard_Reset_Voltage_Filter();
 261:src/main.c    ****     
 262:src/main.c    ****     while (1)
 263:src/main.c    ****     {
 264:src/main.c    ****         switch (driver_state)
 265:src/main.c    ****         {
 266:src/main.c    ****         case POWER_UP:
 267:src/main.c    ****             //TODO: revisar tambien 220V
 268:src/main.c    ****             // if ((Vbias_Sense > VBIAS_START) && (Vline_Sense > VLINE_START_THRESHOLD))
 269:src/main.c    ****             if (Vbias_Sense > VBIAS_START)
 270:src/main.c    ****                 driver_state = SOFT_START;
 271:src/main.c    ****             
 272:src/main.c    ****             break;
 273:src/main.c    **** 
 274:src/main.c    ****         case SOFT_START:
 275:src/main.c    ****             if (sequence_ready)
 276:src/main.c    ****             {
 277:src/main.c    ****                 sequence_ready_reset;
 278:src/main.c    ****                 soft_start_cnt++;
 279:src/main.c    **** 
 280:src/main.c    ****                 //reviso no pasarme de corriente de salida
 281:src/main.c    ****                 if (Iup < I_SETPOINT)
 282:src/main.c    ****                 {
 283:src/main.c    ****                     //reviso no pasarme de tension
 284:src/main.c    ****                     if (Vup < V_SETPOINT)
 285:src/main.c    ****                     {
 286:src/main.c    ****                         //hago un soft start respecto de la corriente y/o tension de salida
 287:src/main.c    ****                         if (soft_start_cnt > SOFT_START_CNT_ROOF)    //update cada 2ms aprox.
 288:src/main.c    ****                         {
 289:src/main.c    ****                             soft_start_cnt = 0;
 290:src/main.c    ****                     
 291:src/main.c    ****                             if (d < DUTY_FOR_DMAX)
 292:src/main.c    ****                             {
 293:src/main.c    ****                                 d++;
 294:src/main.c    ****                                 CTRL_MOSFET(d);
 295:src/main.c    ****                             }
 296:src/main.c    ****                             else
 297:src/main.c    ****                             {
 298:src/main.c    ****                                 ChangeLed(LED_VOLTAGE_MODE);
 299:src/main.c    ****                                 driver_state = VOLTAGE_MODE;
 300:src/main.c    ****                             }
 301:src/main.c    ****                         }
 302:src/main.c    ****                     }
 303:src/main.c    ****                     else
 304:src/main.c    ****                     {
 305:src/main.c    ****                         ChangeLed(LED_VOLTAGE_MODE);
 306:src/main.c    ****                         driver_state = VOLTAGE_MODE;
 307:src/main.c    ****                     }
 308:src/main.c    ****                 }                    
 309:src/main.c    ****                 else
ARM GAS  /tmp/ccKDiUbI.s 			page 37


 310:src/main.c    ****                 {
 311:src/main.c    ****                     ChangeLed(LED_CURRENT_MODE);
 312:src/main.c    ****                     driver_state = CURRENT_MODE;
 313:src/main.c    ****                 }
 314:src/main.c    ****             }
 315:src/main.c    ****             break;
 316:src/main.c    **** 
 317:src/main.c    ****         case AUTO_RESTART:
 318:src/main.c    ****             CTRL_MOSFET(DUTY_NONE);
 319:src/main.c    ****             d = 0;
 320:src/main.c    ****             ez1 = 0;
 321:src/main.c    ****             ez2 = 0;
 322:src/main.c    ****             ChangeLed(LED_STANDBY);
 323:src/main.c    ****             driver_state = POWER_UP;
 324:src/main.c    ****             break;
 325:src/main.c    ****         
 326:src/main.c    ****         case VOLTAGE_MODE:
 327:src/main.c    ****             if (sequence_ready)
 328:src/main.c    ****             {
 329:src/main.c    ****                 sequence_ready_reset;
 330:src/main.c    **** 
 331:src/main.c    ****                 //reviso cambio de modo
 332:src/main.c    ****                 if (Iup < I_SETPOINT)   
 333:src/main.c    ****                 {                
 334:src/main.c    ****                     d = PID_roof (V_SETPOINT, Vup, d, &ez1, &ez2);
 335:src/main.c    ****                     if (d > 0)    //d puede tomar valores negativos
 336:src/main.c    ****                     {
 337:src/main.c    ****                         if (d > DUTY_FOR_DMAX)
 338:src/main.c    ****                             d = DUTY_FOR_DMAX;
 339:src/main.c    ****                     }
 340:src/main.c    ****                     else
 341:src/main.c    ****                         d = DUTY_NONE;
 342:src/main.c    **** 
 343:src/main.c    ****                     CTRL_MOSFET(d);
 344:src/main.c    ****                 }
 345:src/main.c    ****                 else     //cambio a lazo I
 346:src/main.c    ****                 {
 347:src/main.c    ****                     ChangeLed(LED_CURRENT_MODE);
 348:src/main.c    ****                     driver_state = CURRENT_MODE;
 349:src/main.c    ****                 }
 350:src/main.c    **** 
 351:src/main.c    ****                 if (Hard_Update_Voltage_Sense())
 352:src/main.c    ****                     CTRL_LED(Hard_Get_Conduction_Angle());
 353:src/main.c    ****             }
 354:src/main.c    ****             break;
 355:src/main.c    **** 
 356:src/main.c    ****         case CURRENT_MODE:
 357:src/main.c    ****             if (sequence_ready)
 358:src/main.c    ****             {
 359:src/main.c    ****                 sequence_ready_reset;
 360:src/main.c    **** 
 361:src/main.c    ****                 //reviso cambio de modo
 362:src/main.c    ****                 if (Vup < V_SETPOINT)   
 363:src/main.c    ****                 {                
 364:src/main.c    ****                     d = PID_roof (I_SETPOINT, Iup, d, &ez1, &ez2);
 365:src/main.c    ****                     if (d > 0)    //d puede tomar valores negativos
 366:src/main.c    ****                     {
ARM GAS  /tmp/ccKDiUbI.s 			page 38


 367:src/main.c    ****                         if (d > DUTY_FOR_DMAX)
 368:src/main.c    ****                             d = DUTY_FOR_DMAX;
 369:src/main.c    ****                     }
 370:src/main.c    ****                     else
 371:src/main.c    ****                         d = DUTY_NONE;
 372:src/main.c    **** 
 373:src/main.c    ****                     CTRL_MOSFET(d);
 374:src/main.c    ****                 }
 375:src/main.c    ****                 else     //cambio a lazo V
 376:src/main.c    ****                 {
 377:src/main.c    ****                     ChangeLed(LED_VOLTAGE_MODE);
 378:src/main.c    ****                     driver_state = VOLTAGE_MODE;
 379:src/main.c    ****                 }
 380:src/main.c    **** 
 381:src/main.c    ****                 if (Hard_Update_Voltage_Sense())
 382:src/main.c    ****                     CTRL_LED(Hard_Get_Conduction_Angle());
 383:src/main.c    ****             }
 384:src/main.c    ****             break;
 385:src/main.c    ****             
 386:src/main.c    ****         case OUTPUT_OVERVOLTAGE:
 387:src/main.c    ****             if (!timer_standby)
 388:src/main.c    ****                 driver_state = AUTO_RESTART;
 389:src/main.c    ****             break;
 390:src/main.c    **** 
 391:src/main.c    ****         case INPUT_OVERVOLTAGE:
 392:src/main.c    ****             if (!timer_standby)
 393:src/main.c    ****                 driver_state = AUTO_RESTART;                
 394:src/main.c    ****             break;
 395:src/main.c    ****             
 396:src/main.c    ****         case OVERCURRENT:
 397:src/main.c    ****             if (!timer_standby)
 398:src/main.c    ****                 driver_state = AUTO_RESTART;                
 399:src/main.c    ****             break;
 400:src/main.c    **** 
 401:src/main.c    ****         case BIAS_OVERVOLTAGE:
 402:src/main.c    ****             if (!timer_standby)
 403:src/main.c    ****                 driver_state = AUTO_RESTART;                
 404:src/main.c    ****             break;            
 405:src/main.c    **** 
 406:src/main.c    ****         case POWER_DOWN:
 407:src/main.c    ****             if (!timer_standby)
 408:src/main.c    ****                 driver_state = AUTO_RESTART;                
 409:src/main.c    ****             break;
 410:src/main.c    **** 
 411:src/main.c    ****         }
 412:src/main.c    **** 
 413:src/main.c    ****         //Cosas que no tienen tanto que ver con las muestras o el estado del programa
 414:src/main.c    ****         // Hard_Update_Voltage_Sense();
 415:src/main.c    ****         
 416:src/main.c    **** #ifdef USE_LED_FOR_MAIN_STATES
 417:src/main.c    ****         UpdateLed();
 418:src/main.c    **** #endif
 419:src/main.c    ****         
 420:src/main.c    ****     }
 421:src/main.c    ****     
 422:src/main.c    **** #endif    // DRIVER_MODE
 423:src/main.c    ****     
ARM GAS  /tmp/ccKDiUbI.s 			page 39


 424:src/main.c    ****     return 0;
 425:src/main.c    **** }
 426:src/main.c    **** 
 427:src/main.c    **** //--- End of Main ---//
 428:src/main.c    **** 
 429:src/main.c    **** 
 430:src/main.c    **** void TimingDelay_Decrement(void)
 431:src/main.c    **** {
 775              		.loc 2 431 0
 776              		.cfi_startproc
 432:src/main.c    ****     if (wait_ms_var)
 777              		.loc 2 432 0
 778 0000 184B     		ldr	r3, .L32	@ tmp122,
 779 0002 1B88     		ldrh	r3, [r3]	@ tmp123, wait_ms_var
 780 0004 9BB2     		uxth	r3, r3	@ D.6757, tmp123
 781 0006 002B     		cmp	r3, #0	@ D.6757,
 782 0008 06D0     		beq	.L27	@,
 433:src/main.c    ****         wait_ms_var--;
 783              		.loc 2 433 0
 784 000a 164B     		ldr	r3, .L32	@ tmp124,
 785 000c 1B88     		ldrh	r3, [r3]	@ tmp125, wait_ms_var
 786 000e 9BB2     		uxth	r3, r3	@ D.6757, tmp125
 787 0010 013B     		subs	r3, r3, #1	@ tmp126,
 788 0012 9AB2     		uxth	r2, r3	@ D.6757, tmp126
 789 0014 134B     		ldr	r3, .L32	@ tmp127,
 790 0016 1A80     		strh	r2, [r3]	@ tmp128, wait_ms_var
 791              	.L27:
 434:src/main.c    **** 
 435:src/main.c    ****     if (timer_standby)
 792              		.loc 2 435 0
 793 0018 134B     		ldr	r3, .L32+4	@ tmp129,
 794 001a 1B88     		ldrh	r3, [r3]	@ tmp130, timer_standby
 795 001c 9BB2     		uxth	r3, r3	@ D.6757, tmp130
 796 001e 002B     		cmp	r3, #0	@ D.6757,
 797 0020 06D0     		beq	.L28	@,
 436:src/main.c    ****         timer_standby--;
 798              		.loc 2 436 0
 799 0022 114B     		ldr	r3, .L32+4	@ tmp131,
 800 0024 1B88     		ldrh	r3, [r3]	@ tmp132, timer_standby
 801 0026 9BB2     		uxth	r3, r3	@ D.6757, tmp132
 802 0028 013B     		subs	r3, r3, #1	@ tmp133,
 803 002a 9AB2     		uxth	r2, r3	@ D.6757, tmp133
 804 002c 0E4B     		ldr	r3, .L32+4	@ tmp134,
 805 002e 1A80     		strh	r2, [r3]	@ tmp135, timer_standby
 806              	.L28:
 437:src/main.c    **** 
 438:src/main.c    ****     // if (take_temp_sample)
 439:src/main.c    ****     //     take_temp_sample--;
 440:src/main.c    **** 
 441:src/main.c    ****     // if (timer_meas)
 442:src/main.c    ****     //     timer_meas--;
 443:src/main.c    **** 
 444:src/main.c    ****     if (timer_led)
 807              		.loc 2 444 0
 808 0030 0E4B     		ldr	r3, .L32+8	@ tmp136,
 809 0032 1B88     		ldrh	r3, [r3]	@ tmp137, timer_led
 810 0034 9BB2     		uxth	r3, r3	@ D.6757, tmp137
ARM GAS  /tmp/ccKDiUbI.s 			page 40


 811 0036 002B     		cmp	r3, #0	@ D.6757,
 812 0038 06D0     		beq	.L29	@,
 445:src/main.c    ****         timer_led--;
 813              		.loc 2 445 0
 814 003a 0C4B     		ldr	r3, .L32+8	@ tmp138,
 815 003c 1B88     		ldrh	r3, [r3]	@ tmp139, timer_led
 816 003e 9BB2     		uxth	r3, r3	@ D.6757, tmp139
 817 0040 013B     		subs	r3, r3, #1	@ tmp140,
 818 0042 9AB2     		uxth	r2, r3	@ D.6757, tmp140
 819 0044 094B     		ldr	r3, .L32+8	@ tmp141,
 820 0046 1A80     		strh	r2, [r3]	@ tmp142, timer_led
 821              	.L29:
 446:src/main.c    **** 
 447:src/main.c    ****     if (timer_filters)
 822              		.loc 2 447 0
 823 0048 094B     		ldr	r3, .L32+12	@ tmp143,
 824 004a 1B78     		ldrb	r3, [r3]	@ tmp144, timer_filters
 825 004c DBB2     		uxtb	r3, r3	@ D.6758, tmp144
 826 004e 002B     		cmp	r3, #0	@ D.6758,
 827 0050 06D0     		beq	.L31	@,
 448:src/main.c    ****         timer_filters--;
 828              		.loc 2 448 0
 829 0052 074B     		ldr	r3, .L32+12	@ tmp145,
 830 0054 1B78     		ldrb	r3, [r3]	@ tmp146, timer_filters
 831 0056 DBB2     		uxtb	r3, r3	@ D.6758, tmp146
 832 0058 013B     		subs	r3, r3, #1	@ tmp147,
 833 005a DAB2     		uxtb	r2, r3	@ D.6758, tmp147
 834 005c 044B     		ldr	r3, .L32+12	@ tmp148,
 835 005e 1A70     		strb	r2, [r3]	@ tmp149, timer_filters
 836              	.L31:
 449:src/main.c    **** 
 450:src/main.c    **** #ifdef INVERTER_ONLY_SYNC_AND_POLARITY
 451:src/main.c    ****     if (timer_no_sync)
 452:src/main.c    ****         timer_no_sync--;
 453:src/main.c    **** #endif
 454:src/main.c    ****     
 455:src/main.c    ****     // //cuenta de a 1 minuto
 456:src/main.c    ****     // if (secs > 59999)	//pasaron 1 min
 457:src/main.c    ****     // {
 458:src/main.c    ****     // 	minutes++;
 459:src/main.c    ****     // 	secs = 0;
 460:src/main.c    ****     // }
 461:src/main.c    ****     // else
 462:src/main.c    ****     // 	secs++;
 463:src/main.c    ****     //
 464:src/main.c    ****     // if (minutes > 60)
 465:src/main.c    ****     // {
 466:src/main.c    ****     // 	hours++;
 467:src/main.c    ****     // 	minutes = 0;
 468:src/main.c    ****     // }
 469:src/main.c    **** 
 470:src/main.c    **** 
 471:src/main.c    **** }
 837              		.loc 2 471 0
 838 0060 C046     		nop
 839              		@ sp needed	@
 840 0062 7047     		bx	lr
ARM GAS  /tmp/ccKDiUbI.s 			page 41


 841              	.L33:
 842              		.align	2
 843              	.L32:
 844 0064 00000000 		.word	wait_ms_var
 845 0068 00000000 		.word	timer_standby
 846 006c 00000000 		.word	timer_led
 847 0070 00000000 		.word	timer_filters
 848              		.cfi_endproc
 849              	.LFE21:
 850              		.size	TimingDelay_Decrement, .-TimingDelay_Decrement
 851              		.section	.text.EXTI4_15_IRQHandler,"ax",%progbits
 852              		.align	2
 853              		.global	EXTI4_15_IRQHandler
 854              		.code	16
 855              		.thumb_func
 856              		.type	EXTI4_15_IRQHandler, %function
 857              	EXTI4_15_IRQHandler:
 858              	.LFB22:
 472:src/main.c    **** 
 473:src/main.c    **** #define AC_SYNC_Int        (EXTI->PR & 0x00000100)
 474:src/main.c    **** #define AC_SYNC_Set        (EXTI->IMR |= 0x00000100)
 475:src/main.c    **** #define AC_SYNC_Reset      (EXTI->IMR &= ~0x00000100)
 476:src/main.c    **** #define AC_SYNC_Ack        (EXTI->PR |= 0x00000100)
 477:src/main.c    **** 
 478:src/main.c    **** #define AC_SYNC_Int_Rising          (EXTI->RTSR & 0x00000100)
 479:src/main.c    **** #define AC_SYNC_Int_Rising_Set      (EXTI->RTSR |= 0x00000100)
 480:src/main.c    **** #define AC_SYNC_Int_Rising_Reset    (EXTI->RTSR &= ~0x00000100)
 481:src/main.c    **** 
 482:src/main.c    **** #define AC_SYNC_Int_Falling          (EXTI->FTSR & 0x00000100)
 483:src/main.c    **** #define AC_SYNC_Int_Falling_Set      (EXTI->FTSR |= 0x00000100)
 484:src/main.c    **** #define AC_SYNC_Int_Falling_Reset    (EXTI->FTSR &= ~0x00000100)
 485:src/main.c    **** 
 486:src/main.c    **** #define OVERCURRENT_POS_Int        (EXTI->PR & 0x00000010)
 487:src/main.c    **** #define OVERCURRENT_POS_Ack        (EXTI->PR |= 0x00000010)
 488:src/main.c    **** #define OVERCURRENT_NEG_Int        (EXTI->PR & 0x00000020)
 489:src/main.c    **** #define OVERCURRENT_NEG_Ack        (EXTI->PR |= 0x00000020)
 490:src/main.c    **** 
 491:src/main.c    **** void EXTI4_15_IRQHandler(void)
 492:src/main.c    **** {
 859              		.loc 2 492 0
 860              		.cfi_startproc
 493:src/main.c    **** #ifdef WITH_AC_SYNC_INT
 494:src/main.c    ****     if (AC_SYNC_Int)
 495:src/main.c    ****     {
 496:src/main.c    ****         if (AC_SYNC_Int_Rising)
 497:src/main.c    ****         {
 498:src/main.c    ****             //reseteo tim
 499:src/main.c    ****             delta_t2 = TIM16->CNT;
 500:src/main.c    ****             TIM16->CNT = 0;
 501:src/main.c    ****             AC_SYNC_Int_Rising_Reset;
 502:src/main.c    ****             AC_SYNC_Int_Falling_Set;
 503:src/main.c    **** 
 504:src/main.c    ****             SYNC_Rising_Edge_Handler();
 505:src/main.c    ****         }
 506:src/main.c    ****         else if (AC_SYNC_Int_Falling)
 507:src/main.c    ****         {
 508:src/main.c    ****             delta_t1 = TIM16->CNT;
ARM GAS  /tmp/ccKDiUbI.s 			page 42


 509:src/main.c    ****             AC_SYNC_Int_Falling_Reset;
 510:src/main.c    ****             AC_SYNC_Int_Rising_Set;
 511:src/main.c    ****             // ac_sync_int_flag = 1;
 512:src/main.c    ****             
 513:src/main.c    ****             SYNC_Falling_Edge_Handler();
 514:src/main.c    ****         }
 515:src/main.c    ****         AC_SYNC_Ack;
 516:src/main.c    ****     }
 517:src/main.c    **** #endif
 518:src/main.c    ****     
 519:src/main.c    **** #ifdef WITH_OVERCURRENT_SHUTDOWN
 520:src/main.c    ****     if (OVERCURRENT_POS_Int)
 521:src/main.c    ****     {
 522:src/main.c    ****         HIGH_LEFT(DUTY_NONE);
 523:src/main.c    ****         //TODO: trabar el TIM3 aca!!!
 524:src/main.c    ****         overcurrent_shutdown = 1;
 525:src/main.c    ****         OVERCURRENT_POS_Ack;
 526:src/main.c    ****     }
 527:src/main.c    **** 
 528:src/main.c    ****     if (OVERCURRENT_NEG_Int)
 529:src/main.c    ****     {
 530:src/main.c    ****         HIGH_RIGHT(DUTY_NONE);
 531:src/main.c    ****         //TODO: trabar el TIM3 aca!!!
 532:src/main.c    ****         overcurrent_shutdown = 2;
 533:src/main.c    ****         OVERCURRENT_NEG_Ack;
 534:src/main.c    ****     }
 535:src/main.c    **** #endif
 536:src/main.c    **** }
 861              		.loc 2 536 0
 862 0000 C046     		nop
 863              		@ sp needed	@
 864 0002 7047     		bx	lr
 865              		.cfi_endproc
 866              	.LFE22:
 867              		.size	EXTI4_15_IRQHandler, .-EXTI4_15_IRQHandler
 868              		.text
 869              	.Letext0:
 870              		.file 3 "./cmsis_boot/stm32f0xx.h"
 871              		.file 4 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 872              		.file 5 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 873              		.file 6 "src/hard.h"
 874              		.section	.debug_info,"",%progbits
 875              	.Ldebug_info0:
 876 0000 2A080000 		.4byte	0x82a
 877 0004 0200     		.2byte	0x2
 878 0006 00000000 		.4byte	.Ldebug_abbrev0
 879 000a 04       		.byte	0x4
 880 000b 01       		.uleb128 0x1
 881 000c CF040000 		.4byte	.LASF112
 882 0010 0C       		.byte	0xc
 883 0011 B1040000 		.4byte	.LASF113
 884 0015 2D030000 		.4byte	.LASF114
 885 0019 00000000 		.4byte	.Ldebug_ranges0+0
 886 001d 00000000 		.4byte	0
 887 0021 00000000 		.4byte	0
 888 0025 00000000 		.4byte	.Ldebug_line0
 889 0029 02       		.uleb128 0x2
ARM GAS  /tmp/ccKDiUbI.s 			page 43


 890 002a AD020000 		.4byte	.LASF96
 891 002e 01       		.byte	0x1
 892 002f E8000000 		.4byte	0xe8
 893 0033 03       		.byte	0x3
 894 0034 C7       		.byte	0xc7
 895 0035 E8000000 		.4byte	0xe8
 896 0039 03       		.uleb128 0x3
 897 003a 19030000 		.4byte	.LASF0
 898 003e 72       		.sleb128 -14
 899 003f 03       		.uleb128 0x3
 900 0040 84050000 		.4byte	.LASF1
 901 0044 73       		.sleb128 -13
 902 0045 03       		.uleb128 0x3
 903 0046 2D000000 		.4byte	.LASF2
 904 004a 7B       		.sleb128 -5
 905 004b 03       		.uleb128 0x3
 906 004c F0000000 		.4byte	.LASF3
 907 0050 7E       		.sleb128 -2
 908 0051 03       		.uleb128 0x3
 909 0052 EA030000 		.4byte	.LASF4
 910 0056 7F       		.sleb128 -1
 911 0057 04       		.uleb128 0x4
 912 0058 0F020000 		.4byte	.LASF5
 913 005c 00       		.byte	0
 914 005d 04       		.uleb128 0x4
 915 005e B2020000 		.4byte	.LASF6
 916 0062 02       		.byte	0x2
 917 0063 04       		.uleb128 0x4
 918 0064 81000000 		.4byte	.LASF7
 919 0068 03       		.byte	0x3
 920 0069 04       		.uleb128 0x4
 921 006a 02010000 		.4byte	.LASF8
 922 006e 04       		.byte	0x4
 923 006f 04       		.uleb128 0x4
 924 0070 A5000000 		.4byte	.LASF9
 925 0074 05       		.byte	0x5
 926 0075 04       		.uleb128 0x4
 927 0076 13000000 		.4byte	.LASF10
 928 007a 06       		.byte	0x6
 929 007b 04       		.uleb128 0x4
 930 007c 00000000 		.4byte	.LASF11
 931 0080 07       		.byte	0x7
 932 0081 04       		.uleb128 0x4
 933 0082 D7010000 		.4byte	.LASF12
 934 0086 09       		.byte	0x9
 935 0087 04       		.uleb128 0x4
 936 0088 33040000 		.4byte	.LASF13
 937 008c 0A       		.byte	0xa
 938 008d 04       		.uleb128 0x4
 939 008e A2030000 		.4byte	.LASF14
 940 0092 0B       		.byte	0xb
 941 0093 04       		.uleb128 0x4
 942 0094 B2010000 		.4byte	.LASF15
 943 0098 0C       		.byte	0xc
 944 0099 04       		.uleb128 0x4
 945 009a 3A020000 		.4byte	.LASF16
 946 009e 0D       		.byte	0xd
ARM GAS  /tmp/ccKDiUbI.s 			page 44


 947 009f 04       		.uleb128 0x4
 948 00a0 65030000 		.4byte	.LASF17
 949 00a4 0E       		.byte	0xe
 950 00a5 04       		.uleb128 0x4
 951 00a6 CD010000 		.4byte	.LASF18
 952 00aa 10       		.byte	0x10
 953 00ab 04       		.uleb128 0x4
 954 00ac 28040000 		.4byte	.LASF19
 955 00b0 13       		.byte	0x13
 956 00b1 04       		.uleb128 0x4
 957 00b2 EA010000 		.4byte	.LASF20
 958 00b6 14       		.byte	0x14
 959 00b7 04       		.uleb128 0x4
 960 00b8 76000000 		.4byte	.LASF21
 961 00bc 15       		.byte	0x15
 962 00bd 04       		.uleb128 0x4
 963 00be 8E030000 		.4byte	.LASF22
 964 00c2 16       		.byte	0x16
 965 00c3 04       		.uleb128 0x4
 966 00c4 DB000000 		.4byte	.LASF23
 967 00c8 17       		.byte	0x17
 968 00c9 04       		.uleb128 0x4
 969 00ca 05040000 		.4byte	.LASF24
 970 00ce 18       		.byte	0x18
 971 00cf 04       		.uleb128 0x4
 972 00d0 2D010000 		.4byte	.LASF25
 973 00d4 19       		.byte	0x19
 974 00d5 04       		.uleb128 0x4
 975 00d6 87040000 		.4byte	.LASF26
 976 00da 1A       		.byte	0x1a
 977 00db 04       		.uleb128 0x4
 978 00dc 0D030000 		.4byte	.LASF27
 979 00e0 1B       		.byte	0x1b
 980 00e1 04       		.uleb128 0x4
 981 00e2 86010000 		.4byte	.LASF28
 982 00e6 1C       		.byte	0x1c
 983 00e7 00       		.byte	0
 984 00e8 05       		.uleb128 0x5
 985 00e9 01       		.byte	0x1
 986 00ea 06       		.byte	0x6
 987 00eb A5040000 		.4byte	.LASF29
 988 00ef 06       		.uleb128 0x6
 989 00f0 7C010000 		.4byte	.LASF32
 990 00f4 03       		.byte	0x3
 991 00f5 5F01     		.2byte	0x15f
 992 00f7 29000000 		.4byte	0x29
 993 00fb 05       		.uleb128 0x5
 994 00fc 01       		.byte	0x1
 995 00fd 08       		.byte	0x8
 996 00fe 48040000 		.4byte	.LASF30
 997 0102 05       		.uleb128 0x5
 998 0103 02       		.byte	0x2
 999 0104 05       		.byte	0x5
 1000 0105 ED020000 		.4byte	.LASF31
 1001 0109 07       		.uleb128 0x7
 1002 010a 5F010000 		.4byte	.LASF33
 1003 010e 04       		.byte	0x4
ARM GAS  /tmp/ccKDiUbI.s 			page 45


 1004 010f 2B       		.byte	0x2b
 1005 0110 14010000 		.4byte	0x114
 1006 0114 05       		.uleb128 0x5
 1007 0115 02       		.byte	0x2
 1008 0116 07       		.byte	0x7
 1009 0117 BC040000 		.4byte	.LASF34
 1010 011b 05       		.uleb128 0x5
 1011 011c 04       		.byte	0x4
 1012 011d 05       		.byte	0x5
 1013 011e 04030000 		.4byte	.LASF35
 1014 0122 07       		.uleb128 0x7
 1015 0123 56040000 		.4byte	.LASF36
 1016 0127 04       		.byte	0x4
 1017 0128 41       		.byte	0x41
 1018 0129 2D010000 		.4byte	0x12d
 1019 012d 05       		.uleb128 0x5
 1020 012e 04       		.byte	0x4
 1021 012f 07       		.byte	0x7
 1022 0130 0F040000 		.4byte	.LASF37
 1023 0134 05       		.uleb128 0x5
 1024 0135 08       		.byte	0x8
 1025 0136 05       		.byte	0x5
 1026 0137 01020000 		.4byte	.LASF38
 1027 013b 05       		.uleb128 0x5
 1028 013c 08       		.byte	0x8
 1029 013d 07       		.byte	0x7
 1030 013e 37010000 		.4byte	.LASF39
 1031 0142 08       		.uleb128 0x8
 1032 0143 04       		.byte	0x4
 1033 0144 05       		.byte	0x5
 1034 0145 696E7400 		.ascii	"int\000"
 1035 0149 05       		.uleb128 0x5
 1036 014a 04       		.byte	0x4
 1037 014b 07       		.byte	0x7
 1038 014c 64000000 		.4byte	.LASF40
 1039 0150 07       		.uleb128 0x7
 1040 0151 A4020000 		.4byte	.LASF41
 1041 0155 05       		.byte	0x5
 1042 0156 1A       		.byte	0x1a
 1043 0157 09010000 		.4byte	0x109
 1044 015b 07       		.uleb128 0x7
 1045 015c 0B010000 		.4byte	.LASF42
 1046 0160 05       		.byte	0x5
 1047 0161 20       		.byte	0x20
 1048 0162 22010000 		.4byte	0x122
 1049 0166 09       		.uleb128 0x9
 1050 0167 2003     		.2byte	0x320
 1051 0169 01       		.byte	0x1
 1052 016a 71       		.byte	0x71
 1053 016b 03020000 		.4byte	0x203
 1054 016f 0A       		.uleb128 0xa
 1055 0170 14010000 		.4byte	.LASF43
 1056 0174 01       		.byte	0x1
 1057 0175 73       		.byte	0x73
 1058 0176 1A020000 		.4byte	0x21a
 1059 017a 02       		.byte	0x2
 1060 017b 23       		.byte	0x23
ARM GAS  /tmp/ccKDiUbI.s 			page 46


 1061 017c 00       		.uleb128 0
 1062 017d 0A       		.uleb128 0xa
 1063 017e BB020000 		.4byte	.LASF44
 1064 0182 01       		.byte	0x1
 1065 0183 74       		.byte	0x74
 1066 0184 1F020000 		.4byte	0x21f
 1067 0188 02       		.byte	0x2
 1068 0189 23       		.byte	0x23
 1069 018a 04       		.uleb128 0x4
 1070 018b 0A       		.uleb128 0xa
 1071 018c 82040000 		.4byte	.LASF45
 1072 0190 01       		.byte	0x1
 1073 0191 75       		.byte	0x75
 1074 0192 2F020000 		.4byte	0x22f
 1075 0196 03       		.byte	0x3
 1076 0197 23       		.byte	0x23
 1077 0198 8001     		.uleb128 0x80
 1078 019a 0A       		.uleb128 0xa
 1079 019b 19010000 		.4byte	.LASF46
 1080 019f 01       		.byte	0x1
 1081 01a0 76       		.byte	0x76
 1082 01a1 1F020000 		.4byte	0x21f
 1083 01a5 03       		.byte	0x3
 1084 01a6 23       		.byte	0x23
 1085 01a7 8401     		.uleb128 0x84
 1086 01a9 0A       		.uleb128 0xa
 1087 01aa 93050000 		.4byte	.LASF47
 1088 01ae 01       		.byte	0x1
 1089 01af 77       		.byte	0x77
 1090 01b0 34020000 		.4byte	0x234
 1091 01b4 03       		.byte	0x3
 1092 01b5 23       		.byte	0x23
 1093 01b6 8002     		.uleb128 0x100
 1094 01b8 0A       		.uleb128 0xa
 1095 01b9 CF020000 		.4byte	.LASF48
 1096 01bd 01       		.byte	0x1
 1097 01be 78       		.byte	0x78
 1098 01bf 1F020000 		.4byte	0x21f
 1099 01c3 03       		.byte	0x3
 1100 01c4 23       		.byte	0x23
 1101 01c5 8402     		.uleb128 0x104
 1102 01c7 0A       		.uleb128 0xa
 1103 01c8 5F020000 		.4byte	.LASF49
 1104 01cc 01       		.byte	0x1
 1105 01cd 79       		.byte	0x79
 1106 01ce 39020000 		.4byte	0x239
 1107 01d2 03       		.byte	0x3
 1108 01d3 23       		.byte	0x23
 1109 01d4 8003     		.uleb128 0x180
 1110 01d6 0A       		.uleb128 0xa
 1111 01d7 D9020000 		.4byte	.LASF50
 1112 01db 01       		.byte	0x1
 1113 01dc 7A       		.byte	0x7a
 1114 01dd 1F020000 		.4byte	0x21f
 1115 01e1 03       		.byte	0x3
 1116 01e2 23       		.byte	0x23
 1117 01e3 8403     		.uleb128 0x184
ARM GAS  /tmp/ccKDiUbI.s 			page 47


 1118 01e5 0A       		.uleb128 0xa
 1119 01e6 E3020000 		.4byte	.LASF51
 1120 01ea 01       		.byte	0x1
 1121 01eb 7B       		.byte	0x7b
 1122 01ec 3E020000 		.4byte	0x23e
 1123 01f0 03       		.byte	0x3
 1124 01f1 23       		.byte	0x23
 1125 01f2 8004     		.uleb128 0x200
 1126 01f4 0B       		.uleb128 0xb
 1127 01f5 495000   		.ascii	"IP\000"
 1128 01f8 01       		.byte	0x1
 1129 01f9 7C       		.byte	0x7c
 1130 01fa 5E020000 		.4byte	0x25e
 1131 01fe 03       		.byte	0x3
 1132 01ff 23       		.byte	0x23
 1133 0200 8006     		.uleb128 0x300
 1134 0202 00       		.byte	0
 1135 0203 0C       		.uleb128 0xc
 1136 0204 5B010000 		.4byte	0x15b
 1137 0208 13020000 		.4byte	0x213
 1138 020c 0D       		.uleb128 0xd
 1139 020d 13020000 		.4byte	0x213
 1140 0211 00       		.byte	0
 1141 0212 00       		.byte	0
 1142 0213 05       		.uleb128 0x5
 1143 0214 04       		.byte	0x4
 1144 0215 07       		.byte	0x7
 1145 0216 F7030000 		.4byte	.LASF52
 1146 021a 0E       		.uleb128 0xe
 1147 021b 03020000 		.4byte	0x203
 1148 021f 0C       		.uleb128 0xc
 1149 0220 5B010000 		.4byte	0x15b
 1150 0224 2F020000 		.4byte	0x22f
 1151 0228 0D       		.uleb128 0xd
 1152 0229 13020000 		.4byte	0x213
 1153 022d 1E       		.byte	0x1e
 1154 022e 00       		.byte	0
 1155 022f 0E       		.uleb128 0xe
 1156 0230 03020000 		.4byte	0x203
 1157 0234 0E       		.uleb128 0xe
 1158 0235 03020000 		.4byte	0x203
 1159 0239 0E       		.uleb128 0xe
 1160 023a 03020000 		.4byte	0x203
 1161 023e 0C       		.uleb128 0xc
 1162 023f 5B010000 		.4byte	0x15b
 1163 0243 4E020000 		.4byte	0x24e
 1164 0247 0D       		.uleb128 0xd
 1165 0248 13020000 		.4byte	0x213
 1166 024c 3F       		.byte	0x3f
 1167 024d 00       		.byte	0
 1168 024e 0C       		.uleb128 0xc
 1169 024f 5B010000 		.4byte	0x15b
 1170 0253 5E020000 		.4byte	0x25e
 1171 0257 0D       		.uleb128 0xd
 1172 0258 13020000 		.4byte	0x213
 1173 025c 07       		.byte	0x7
 1174 025d 00       		.byte	0
ARM GAS  /tmp/ccKDiUbI.s 			page 48


 1175 025e 0E       		.uleb128 0xe
 1176 025f 4E020000 		.4byte	0x24e
 1177 0263 07       		.uleb128 0x7
 1178 0264 B7030000 		.4byte	.LASF53
 1179 0268 01       		.byte	0x1
 1180 0269 7D       		.byte	0x7d
 1181 026a 66010000 		.4byte	0x166
 1182 026e 0F       		.uleb128 0xf
 1183 026f 34       		.byte	0x34
 1184 0270 01       		.byte	0x1
 1185 0271 86       		.byte	0x86
 1186 0272 11030000 		.4byte	0x311
 1187 0276 0A       		.uleb128 0xa
 1188 0277 92010000 		.4byte	.LASF54
 1189 027b 01       		.byte	0x1
 1190 027c 88       		.byte	0x88
 1191 027d 16030000 		.4byte	0x316
 1192 0281 02       		.byte	0x2
 1193 0282 23       		.byte	0x23
 1194 0283 00       		.uleb128 0
 1195 0284 0A       		.uleb128 0xa
 1196 0285 00040000 		.4byte	.LASF55
 1197 0289 01       		.byte	0x1
 1198 028a 89       		.byte	0x89
 1199 028b 11030000 		.4byte	0x311
 1200 028f 02       		.byte	0x2
 1201 0290 23       		.byte	0x23
 1202 0291 04       		.uleb128 0x4
 1203 0292 0A       		.uleb128 0xa
 1204 0293 BB020000 		.4byte	.LASF44
 1205 0297 01       		.byte	0x1
 1206 0298 8A       		.byte	0x8a
 1207 0299 5B010000 		.4byte	0x15b
 1208 029d 02       		.byte	0x2
 1209 029e 23       		.byte	0x23
 1210 029f 08       		.uleb128 0x8
 1211 02a0 0A       		.uleb128 0xa
 1212 02a1 C7010000 		.4byte	.LASF56
 1213 02a5 01       		.byte	0x1
 1214 02a6 8B       		.byte	0x8b
 1215 02a7 11030000 		.4byte	0x311
 1216 02ab 02       		.byte	0x2
 1217 02ac 23       		.byte	0x23
 1218 02ad 0C       		.uleb128 0xc
 1219 02ae 0B       		.uleb128 0xb
 1220 02af 53435200 		.ascii	"SCR\000"
 1221 02b3 01       		.byte	0x1
 1222 02b4 8C       		.byte	0x8c
 1223 02b5 11030000 		.4byte	0x311
 1224 02b9 02       		.byte	0x2
 1225 02ba 23       		.byte	0x23
 1226 02bb 10       		.uleb128 0x10
 1227 02bc 0B       		.uleb128 0xb
 1228 02bd 43435200 		.ascii	"CCR\000"
 1229 02c1 01       		.byte	0x1
 1230 02c2 8D       		.byte	0x8d
 1231 02c3 11030000 		.4byte	0x311
ARM GAS  /tmp/ccKDiUbI.s 			page 49


 1232 02c7 02       		.byte	0x2
 1233 02c8 23       		.byte	0x23
 1234 02c9 14       		.uleb128 0x14
 1235 02ca 0A       		.uleb128 0xa
 1236 02cb C5020000 		.4byte	.LASF57
 1237 02cf 01       		.byte	0x1
 1238 02d0 8E       		.byte	0x8e
 1239 02d1 5B010000 		.4byte	0x15b
 1240 02d5 02       		.byte	0x2
 1241 02d6 23       		.byte	0x23
 1242 02d7 18       		.uleb128 0x18
 1243 02d8 0B       		.uleb128 0xb
 1244 02d9 53485000 		.ascii	"SHP\000"
 1245 02dd 01       		.byte	0x1
 1246 02de 8F       		.byte	0x8f
 1247 02df 2B030000 		.4byte	0x32b
 1248 02e3 02       		.byte	0x2
 1249 02e4 23       		.byte	0x23
 1250 02e5 1C       		.uleb128 0x1c
 1251 02e6 0A       		.uleb128 0xa
 1252 02e7 19020000 		.4byte	.LASF58
 1253 02eb 01       		.byte	0x1
 1254 02ec 90       		.byte	0x90
 1255 02ed 11030000 		.4byte	0x311
 1256 02f1 02       		.byte	0x2
 1257 02f2 23       		.byte	0x23
 1258 02f3 24       		.uleb128 0x24
 1259 02f4 0A       		.uleb128 0xa
 1260 02f5 CF020000 		.4byte	.LASF48
 1261 02f9 01       		.byte	0x1
 1262 02fa 91       		.byte	0x91
 1263 02fb 1B030000 		.4byte	0x31b
 1264 02ff 02       		.byte	0x2
 1265 0300 23       		.byte	0x23
 1266 0301 28       		.uleb128 0x28
 1267 0302 0A       		.uleb128 0xa
 1268 0303 4E010000 		.4byte	.LASF59
 1269 0307 01       		.byte	0x1
 1270 0308 92       		.byte	0x92
 1271 0309 11030000 		.4byte	0x311
 1272 030d 02       		.byte	0x2
 1273 030e 23       		.byte	0x23
 1274 030f 30       		.uleb128 0x30
 1275 0310 00       		.byte	0
 1276 0311 0E       		.uleb128 0xe
 1277 0312 5B010000 		.4byte	0x15b
 1278 0316 10       		.uleb128 0x10
 1279 0317 11030000 		.4byte	0x311
 1280 031b 0C       		.uleb128 0xc
 1281 031c 5B010000 		.4byte	0x15b
 1282 0320 2B030000 		.4byte	0x32b
 1283 0324 0D       		.uleb128 0xd
 1284 0325 13020000 		.4byte	0x213
 1285 0329 01       		.byte	0x1
 1286 032a 00       		.byte	0
 1287 032b 0E       		.uleb128 0xe
 1288 032c 1B030000 		.4byte	0x31b
ARM GAS  /tmp/ccKDiUbI.s 			page 50


 1289 0330 07       		.uleb128 0x7
 1290 0331 C1030000 		.4byte	.LASF60
 1291 0335 01       		.byte	0x1
 1292 0336 93       		.byte	0x93
 1293 0337 6E020000 		.4byte	0x26e
 1294 033b 0F       		.uleb128 0xf
 1295 033c 10       		.byte	0x10
 1296 033d 01       		.byte	0x1
 1297 033e FC       		.byte	0xfc
 1298 033f 7E030000 		.4byte	0x37e
 1299 0343 0A       		.uleb128 0xa
 1300 0344 D0050000 		.4byte	.LASF61
 1301 0348 01       		.byte	0x1
 1302 0349 FE       		.byte	0xfe
 1303 034a 11030000 		.4byte	0x311
 1304 034e 02       		.byte	0x2
 1305 034f 23       		.byte	0x23
 1306 0350 00       		.uleb128 0
 1307 0351 0A       		.uleb128 0xa
 1308 0352 71000000 		.4byte	.LASF62
 1309 0356 01       		.byte	0x1
 1310 0357 FF       		.byte	0xff
 1311 0358 11030000 		.4byte	0x311
 1312 035c 02       		.byte	0x2
 1313 035d 23       		.byte	0x23
 1314 035e 04       		.uleb128 0x4
 1315 035f 11       		.uleb128 0x11
 1316 0360 56414C00 		.ascii	"VAL\000"
 1317 0364 01       		.byte	0x1
 1318 0365 0001     		.2byte	0x100
 1319 0367 11030000 		.4byte	0x311
 1320 036b 02       		.byte	0x2
 1321 036c 23       		.byte	0x23
 1322 036d 08       		.uleb128 0x8
 1323 036e 12       		.uleb128 0x12
 1324 036f 8C000000 		.4byte	.LASF63
 1325 0373 01       		.byte	0x1
 1326 0374 0101     		.2byte	0x101
 1327 0376 16030000 		.4byte	0x316
 1328 037a 02       		.byte	0x2
 1329 037b 23       		.byte	0x23
 1330 037c 0C       		.uleb128 0xc
 1331 037d 00       		.byte	0
 1332 037e 06       		.uleb128 0x6
 1333 037f 8B020000 		.4byte	.LASF64
 1334 0383 01       		.byte	0x1
 1335 0384 0201     		.2byte	0x102
 1336 0386 3B030000 		.4byte	0x33b
 1337 038a 13       		.uleb128 0x13
 1338 038b 44       		.byte	0x44
 1339 038c 03       		.byte	0x3
 1340 038d 7C01     		.2byte	0x17c
 1341 038f 54040000 		.4byte	0x454
 1342 0393 11       		.uleb128 0x11
 1343 0394 49535200 		.ascii	"ISR\000"
 1344 0398 03       		.byte	0x3
 1345 0399 7E01     		.2byte	0x17e
ARM GAS  /tmp/ccKDiUbI.s 			page 51


 1346 039b 11030000 		.4byte	0x311
 1347 039f 02       		.byte	0x2
 1348 03a0 23       		.byte	0x23
 1349 03a1 00       		.uleb128 0
 1350 03a2 11       		.uleb128 0x11
 1351 03a3 49455200 		.ascii	"IER\000"
 1352 03a7 03       		.byte	0x3
 1353 03a8 7F01     		.2byte	0x17f
 1354 03aa 11030000 		.4byte	0x311
 1355 03ae 02       		.byte	0x2
 1356 03af 23       		.byte	0x23
 1357 03b0 04       		.uleb128 0x4
 1358 03b1 11       		.uleb128 0x11
 1359 03b2 435200   		.ascii	"CR\000"
 1360 03b5 03       		.byte	0x3
 1361 03b6 8001     		.2byte	0x180
 1362 03b8 11030000 		.4byte	0x311
 1363 03bc 02       		.byte	0x2
 1364 03bd 23       		.byte	0x23
 1365 03be 08       		.uleb128 0x8
 1366 03bf 12       		.uleb128 0x12
 1367 03c0 53020000 		.4byte	.LASF65
 1368 03c4 03       		.byte	0x3
 1369 03c5 8101     		.2byte	0x181
 1370 03c7 11030000 		.4byte	0x311
 1371 03cb 02       		.byte	0x2
 1372 03cc 23       		.byte	0x23
 1373 03cd 0C       		.uleb128 0xc
 1374 03ce 12       		.uleb128 0x12
 1375 03cf 59020000 		.4byte	.LASF66
 1376 03d3 03       		.byte	0x3
 1377 03d4 8201     		.2byte	0x182
 1378 03d6 11030000 		.4byte	0x311
 1379 03da 02       		.byte	0x2
 1380 03db 23       		.byte	0x23
 1381 03dc 10       		.uleb128 0x10
 1382 03dd 12       		.uleb128 0x12
 1383 03de A7010000 		.4byte	.LASF67
 1384 03e2 03       		.byte	0x3
 1385 03e3 8301     		.2byte	0x183
 1386 03e5 11030000 		.4byte	0x311
 1387 03e9 02       		.byte	0x2
 1388 03ea 23       		.byte	0x23
 1389 03eb 14       		.uleb128 0x14
 1390 03ec 12       		.uleb128 0x12
 1391 03ed C5020000 		.4byte	.LASF57
 1392 03f1 03       		.byte	0x3
 1393 03f2 8401     		.2byte	0x184
 1394 03f4 5B010000 		.4byte	0x15b
 1395 03f8 02       		.byte	0x2
 1396 03f9 23       		.byte	0x23
 1397 03fa 18       		.uleb128 0x18
 1398 03fb 12       		.uleb128 0x12
 1399 03fc CF020000 		.4byte	.LASF48
 1400 0400 03       		.byte	0x3
 1401 0401 8501     		.2byte	0x185
 1402 0403 5B010000 		.4byte	0x15b
ARM GAS  /tmp/ccKDiUbI.s 			page 52


 1403 0407 02       		.byte	0x2
 1404 0408 23       		.byte	0x23
 1405 0409 1C       		.uleb128 0x1c
 1406 040a 11       		.uleb128 0x11
 1407 040b 545200   		.ascii	"TR\000"
 1408 040e 03       		.byte	0x3
 1409 040f 8601     		.2byte	0x186
 1410 0411 11030000 		.4byte	0x311
 1411 0415 02       		.byte	0x2
 1412 0416 23       		.byte	0x23
 1413 0417 20       		.uleb128 0x20
 1414 0418 12       		.uleb128 0x12
 1415 0419 D9020000 		.4byte	.LASF50
 1416 041d 03       		.byte	0x3
 1417 041e 8701     		.2byte	0x187
 1418 0420 5B010000 		.4byte	0x15b
 1419 0424 02       		.byte	0x2
 1420 0425 23       		.byte	0x23
 1421 0426 24       		.uleb128 0x24
 1422 0427 12       		.uleb128 0x12
 1423 0428 70010000 		.4byte	.LASF68
 1424 042c 03       		.byte	0x3
 1425 042d 8801     		.2byte	0x188
 1426 042f 11030000 		.4byte	0x311
 1427 0433 02       		.byte	0x2
 1428 0434 23       		.byte	0x23
 1429 0435 28       		.uleb128 0x28
 1430 0436 12       		.uleb128 0x12
 1431 0437 E3020000 		.4byte	.LASF51
 1432 043b 03       		.byte	0x3
 1433 043c 8901     		.2byte	0x189
 1434 043e 54040000 		.4byte	0x454
 1435 0442 02       		.byte	0x2
 1436 0443 23       		.byte	0x23
 1437 0444 2C       		.uleb128 0x2c
 1438 0445 11       		.uleb128 0x11
 1439 0446 445200   		.ascii	"DR\000"
 1440 0449 03       		.byte	0x3
 1441 044a 8A01     		.2byte	0x18a
 1442 044c 11030000 		.4byte	0x311
 1443 0450 02       		.byte	0x2
 1444 0451 23       		.byte	0x23
 1445 0452 40       		.uleb128 0x40
 1446 0453 00       		.byte	0
 1447 0454 0C       		.uleb128 0xc
 1448 0455 5B010000 		.4byte	0x15b
 1449 0459 64040000 		.4byte	0x464
 1450 045d 0D       		.uleb128 0xd
 1451 045e 13020000 		.4byte	0x213
 1452 0462 04       		.byte	0x4
 1453 0463 00       		.byte	0
 1454 0464 06       		.uleb128 0x6
 1455 0465 F5010000 		.4byte	.LASF69
 1456 0469 03       		.byte	0x3
 1457 046a 8B01     		.2byte	0x18b
 1458 046c 8A030000 		.4byte	0x38a
 1459 0470 13       		.uleb128 0x13
ARM GAS  /tmp/ccKDiUbI.s 			page 53


 1460 0471 10       		.byte	0x10
 1461 0472 03       		.byte	0x3
 1462 0473 2802     		.2byte	0x228
 1463 0475 B6040000 		.4byte	0x4b6
 1464 0479 11       		.uleb128 0x11
 1465 047a 43435200 		.ascii	"CCR\000"
 1466 047e 03       		.byte	0x3
 1467 047f 2A02     		.2byte	0x22a
 1468 0481 11030000 		.4byte	0x311
 1469 0485 02       		.byte	0x2
 1470 0486 23       		.byte	0x23
 1471 0487 00       		.uleb128 0
 1472 0488 12       		.uleb128 0x12
 1473 0489 FC000000 		.4byte	.LASF70
 1474 048d 03       		.byte	0x3
 1475 048e 2B02     		.2byte	0x22b
 1476 0490 11030000 		.4byte	0x311
 1477 0494 02       		.byte	0x2
 1478 0495 23       		.byte	0x23
 1479 0496 04       		.uleb128 0x4
 1480 0497 12       		.uleb128 0x12
 1481 0498 77010000 		.4byte	.LASF71
 1482 049c 03       		.byte	0x3
 1483 049d 2C02     		.2byte	0x22c
 1484 049f 11030000 		.4byte	0x311
 1485 04a3 02       		.byte	0x2
 1486 04a4 23       		.byte	0x23
 1487 04a5 08       		.uleb128 0x8
 1488 04a6 12       		.uleb128 0x12
 1489 04a7 92000000 		.4byte	.LASF72
 1490 04ab 03       		.byte	0x3
 1491 04ac 2D02     		.2byte	0x22d
 1492 04ae 11030000 		.4byte	0x311
 1493 04b2 02       		.byte	0x2
 1494 04b3 23       		.byte	0x23
 1495 04b4 0C       		.uleb128 0xc
 1496 04b5 00       		.byte	0
 1497 04b6 06       		.uleb128 0x6
 1498 04b7 B2000000 		.4byte	.LASF73
 1499 04bb 03       		.byte	0x3
 1500 04bc 2E02     		.2byte	0x22e
 1501 04be 70040000 		.4byte	0x470
 1502 04c2 13       		.uleb128 0x13
 1503 04c3 08       		.byte	0x8
 1504 04c4 03       		.byte	0x3
 1505 04c5 3002     		.2byte	0x230
 1506 04c7 EA040000 		.4byte	0x4ea
 1507 04cb 11       		.uleb128 0x11
 1508 04cc 49535200 		.ascii	"ISR\000"
 1509 04d0 03       		.byte	0x3
 1510 04d1 3202     		.2byte	0x232
 1511 04d3 11030000 		.4byte	0x311
 1512 04d7 02       		.byte	0x2
 1513 04d8 23       		.byte	0x23
 1514 04d9 00       		.uleb128 0
 1515 04da 12       		.uleb128 0x12
 1516 04db 7F050000 		.4byte	.LASF74
ARM GAS  /tmp/ccKDiUbI.s 			page 54


 1517 04df 03       		.byte	0x3
 1518 04e0 3302     		.2byte	0x233
 1519 04e2 11030000 		.4byte	0x311
 1520 04e6 02       		.byte	0x2
 1521 04e7 23       		.byte	0x23
 1522 04e8 04       		.uleb128 0x4
 1523 04e9 00       		.byte	0
 1524 04ea 06       		.uleb128 0x6
 1525 04eb 1F020000 		.4byte	.LASF75
 1526 04ef 03       		.byte	0x3
 1527 04f0 3402     		.2byte	0x234
 1528 04f2 C2040000 		.4byte	0x4c2
 1529 04f6 0E       		.uleb128 0xe
 1530 04f7 50010000 		.4byte	0x150
 1531 04fb 13       		.uleb128 0x13
 1532 04fc 2C       		.byte	0x2c
 1533 04fd 03       		.byte	0x3
 1534 04fe 6902     		.2byte	0x269
 1535 0500 D7050000 		.4byte	0x5d7
 1536 0504 12       		.uleb128 0x12
 1537 0505 6A010000 		.4byte	.LASF76
 1538 0509 03       		.byte	0x3
 1539 050a 6B02     		.2byte	0x26b
 1540 050c 11030000 		.4byte	0x311
 1541 0510 02       		.byte	0x2
 1542 0511 23       		.byte	0x23
 1543 0512 00       		.uleb128 0
 1544 0513 12       		.uleb128 0x12
 1545 0514 7B030000 		.4byte	.LASF77
 1546 0518 03       		.byte	0x3
 1547 0519 6C02     		.2byte	0x26c
 1548 051b F6040000 		.4byte	0x4f6
 1549 051f 02       		.byte	0x2
 1550 0520 23       		.byte	0x23
 1551 0521 04       		.uleb128 0x4
 1552 0522 12       		.uleb128 0x12
 1553 0523 BB020000 		.4byte	.LASF44
 1554 0527 03       		.byte	0x3
 1555 0528 6D02     		.2byte	0x26d
 1556 052a 50010000 		.4byte	0x150
 1557 052e 02       		.byte	0x2
 1558 052f 23       		.byte	0x23
 1559 0530 06       		.uleb128 0x6
 1560 0531 12       		.uleb128 0x12
 1561 0532 83020000 		.4byte	.LASF78
 1562 0536 03       		.byte	0x3
 1563 0537 6E02     		.2byte	0x26e
 1564 0539 11030000 		.4byte	0x311
 1565 053d 02       		.byte	0x2
 1566 053e 23       		.byte	0x23
 1567 053f 08       		.uleb128 0x8
 1568 0540 12       		.uleb128 0x12
 1569 0541 AC010000 		.4byte	.LASF79
 1570 0545 03       		.byte	0x3
 1571 0546 6F02     		.2byte	0x26f
 1572 0548 11030000 		.4byte	0x311
 1573 054c 02       		.byte	0x2
ARM GAS  /tmp/ccKDiUbI.s 			page 55


 1574 054d 23       		.byte	0x23
 1575 054e 0C       		.uleb128 0xc
 1576 054f 11       		.uleb128 0x11
 1577 0550 49445200 		.ascii	"IDR\000"
 1578 0554 03       		.byte	0x3
 1579 0555 7002     		.2byte	0x270
 1580 0557 F6040000 		.4byte	0x4f6
 1581 055b 02       		.byte	0x2
 1582 055c 23       		.byte	0x23
 1583 055d 10       		.uleb128 0x10
 1584 055e 12       		.uleb128 0x12
 1585 055f C5020000 		.4byte	.LASF57
 1586 0563 03       		.byte	0x3
 1587 0564 7102     		.2byte	0x271
 1588 0566 50010000 		.4byte	0x150
 1589 056a 02       		.byte	0x2
 1590 056b 23       		.byte	0x23
 1591 056c 12       		.uleb128 0x12
 1592 056d 11       		.uleb128 0x11
 1593 056e 4F445200 		.ascii	"ODR\000"
 1594 0572 03       		.byte	0x3
 1595 0573 7202     		.2byte	0x272
 1596 0575 F6040000 		.4byte	0x4f6
 1597 0579 02       		.byte	0x2
 1598 057a 23       		.byte	0x23
 1599 057b 14       		.uleb128 0x14
 1600 057c 12       		.uleb128 0x12
 1601 057d CF020000 		.4byte	.LASF48
 1602 0581 03       		.byte	0x3
 1603 0582 7302     		.2byte	0x273
 1604 0584 50010000 		.4byte	0x150
 1605 0588 02       		.byte	0x2
 1606 0589 23       		.byte	0x23
 1607 058a 16       		.uleb128 0x16
 1608 058b 12       		.uleb128 0x12
 1609 058c 0E000000 		.4byte	.LASF80
 1610 0590 03       		.byte	0x3
 1611 0591 7402     		.2byte	0x274
 1612 0593 11030000 		.4byte	0x311
 1613 0597 02       		.byte	0x2
 1614 0598 23       		.byte	0x23
 1615 0599 18       		.uleb128 0x18
 1616 059a 12       		.uleb128 0x12
 1617 059b CB050000 		.4byte	.LASF81
 1618 059f 03       		.byte	0x3
 1619 05a0 7502     		.2byte	0x275
 1620 05a2 11030000 		.4byte	0x311
 1621 05a6 02       		.byte	0x2
 1622 05a7 23       		.byte	0x23
 1623 05a8 1C       		.uleb128 0x1c
 1624 05a9 11       		.uleb128 0x11
 1625 05aa 41465200 		.ascii	"AFR\000"
 1626 05ae 03       		.byte	0x3
 1627 05af 7602     		.2byte	0x276
 1628 05b1 D7050000 		.4byte	0x5d7
 1629 05b5 02       		.byte	0x2
 1630 05b6 23       		.byte	0x23
ARM GAS  /tmp/ccKDiUbI.s 			page 56


 1631 05b7 20       		.uleb128 0x20
 1632 05b8 11       		.uleb128 0x11
 1633 05b9 42525200 		.ascii	"BRR\000"
 1634 05bd 03       		.byte	0x3
 1635 05be 7702     		.2byte	0x277
 1636 05c0 F6040000 		.4byte	0x4f6
 1637 05c4 02       		.byte	0x2
 1638 05c5 23       		.byte	0x23
 1639 05c6 28       		.uleb128 0x28
 1640 05c7 12       		.uleb128 0x12
 1641 05c8 D9020000 		.4byte	.LASF50
 1642 05cc 03       		.byte	0x3
 1643 05cd 7802     		.2byte	0x278
 1644 05cf 50010000 		.4byte	0x150
 1645 05d3 02       		.byte	0x2
 1646 05d4 23       		.byte	0x23
 1647 05d5 2A       		.uleb128 0x2a
 1648 05d6 00       		.byte	0
 1649 05d7 0E       		.uleb128 0xe
 1650 05d8 1B030000 		.4byte	0x31b
 1651 05dc 06       		.uleb128 0x6
 1652 05dd CA030000 		.4byte	.LASF82
 1653 05e1 03       		.byte	0x3
 1654 05e2 7902     		.2byte	0x279
 1655 05e4 FB040000 		.4byte	0x4fb
 1656 05e8 05       		.uleb128 0x5
 1657 05e9 08       		.byte	0x8
 1658 05ea 04       		.byte	0x4
 1659 05eb 98020000 		.4byte	.LASF83
 1660 05ef 05       		.uleb128 0x5
 1661 05f0 01       		.byte	0x1
 1662 05f1 08       		.byte	0x8
 1663 05f2 C2010000 		.4byte	.LASF84
 1664 05f6 14       		.uleb128 0x14
 1665 05f7 01       		.byte	0x1
 1666 05f8 FB000000 		.4byte	0xfb
 1667 05fc 06       		.byte	0x6
 1668 05fd B4       		.byte	0xb4
 1669 05fe 3F060000 		.4byte	0x63f
 1670 0602 04       		.uleb128 0x4
 1671 0603 99030000 		.4byte	.LASF85
 1672 0607 00       		.byte	0
 1673 0608 04       		.uleb128 0x4
 1674 0609 22010000 		.4byte	.LASF86
 1675 060d 01       		.byte	0x1
 1676 060e 04       		.uleb128 0x4
 1677 060f 20000000 		.4byte	.LASF87
 1678 0613 02       		.byte	0x2
 1679 0614 04       		.uleb128 0x4
 1680 0615 76020000 		.4byte	.LASF88
 1681 0619 03       		.byte	0x3
 1682 061a 04       		.uleb128 0x4
 1683 061b D7030000 		.4byte	.LASF89
 1684 061f 04       		.byte	0x4
 1685 0620 04       		.uleb128 0x4
 1686 0621 64020000 		.4byte	.LASF90
 1687 0625 05       		.byte	0x5
ARM GAS  /tmp/ccKDiUbI.s 			page 57


 1688 0626 04       		.uleb128 0x4
 1689 0627 53010000 		.4byte	.LASF91
 1690 062b 06       		.byte	0x6
 1691 062c 04       		.uleb128 0x4
 1692 062d 98050000 		.4byte	.LASF92
 1693 0631 07       		.byte	0x7
 1694 0632 04       		.uleb128 0x4
 1695 0633 F7020000 		.4byte	.LASF93
 1696 0637 08       		.byte	0x8
 1697 0638 04       		.uleb128 0x4
 1698 0639 61040000 		.4byte	.LASF94
 1699 063d 09       		.byte	0x9
 1700 063e 00       		.byte	0
 1701 063f 07       		.uleb128 0x7
 1702 0640 43000000 		.4byte	.LASF95
 1703 0644 06       		.byte	0x6
 1704 0645 C0       		.byte	0xc0
 1705 0646 F6050000 		.4byte	0x5f6
 1706 064a 15       		.uleb128 0x15
 1707 064b 53000000 		.4byte	.LASF115
 1708 064f 01       		.byte	0x1
 1709 0650 7C03     		.2byte	0x37c
 1710 0652 01       		.byte	0x1
 1711 0653 00000000 		.4byte	.LFB16
 1712 0657 EC000000 		.4byte	.LFE16
 1713 065b 00000000 		.4byte	.LLST0
 1714 065f 01       		.byte	0x1
 1715 0660 83060000 		.4byte	0x683
 1716 0664 16       		.uleb128 0x16
 1717 0665 AD020000 		.4byte	.LASF96
 1718 0669 01       		.byte	0x1
 1719 066a 7C03     		.2byte	0x37c
 1720 066c EF000000 		.4byte	0xef
 1721 0670 02       		.byte	0x2
 1722 0671 91       		.byte	0x91
 1723 0672 6F       		.sleb128 -17
 1724 0673 16       		.uleb128 0x16
 1725 0674 5C030000 		.4byte	.LASF97
 1726 0678 01       		.byte	0x1
 1727 0679 7C03     		.2byte	0x37c
 1728 067b 5B010000 		.4byte	0x15b
 1729 067f 02       		.byte	0x2
 1730 0680 91       		.byte	0x91
 1731 0681 68       		.sleb128 -24
 1732 0682 00       		.byte	0
 1733 0683 17       		.uleb128 0x17
 1734 0684 98010000 		.4byte	.LASF116
 1735 0688 01       		.byte	0x1
 1736 0689 B803     		.2byte	0x3b8
 1737 068b 01       		.byte	0x1
 1738 068c 5B010000 		.4byte	0x15b
 1739 0690 00000000 		.4byte	.LFB18
 1740 0694 48000000 		.4byte	.LFE18
 1741 0698 2C000000 		.4byte	.LLST1
 1742 069c 01       		.byte	0x1
 1743 069d B1060000 		.4byte	0x6b1
 1744 06a1 16       		.uleb128 0x16
ARM GAS  /tmp/ccKDiUbI.s 			page 58


 1745 06a2 BC010000 		.4byte	.LASF98
 1746 06a6 01       		.byte	0x1
 1747 06a7 B803     		.2byte	0x3b8
 1748 06a9 5B010000 		.4byte	0x15b
 1749 06ad 02       		.byte	0x2
 1750 06ae 91       		.byte	0x91
 1751 06af 74       		.sleb128 -12
 1752 06b0 00       		.byte	0
 1753 06b1 18       		.uleb128 0x18
 1754 06b2 01       		.byte	0x1
 1755 06b3 7A050000 		.4byte	.LASF117
 1756 06b7 02       		.byte	0x2
 1757 06b8 72       		.byte	0x72
 1758 06b9 01       		.byte	0x1
 1759 06ba 42010000 		.4byte	0x142
 1760 06be 00000000 		.4byte	.LFB20
 1761 06c2 48010000 		.4byte	.LFE20
 1762 06c6 58000000 		.4byte	.LLST2
 1763 06ca 01       		.byte	0x1
 1764 06cb 2A070000 		.4byte	0x72a
 1765 06cf 19       		.uleb128 0x19
 1766 06d0 6900     		.ascii	"i\000"
 1767 06d2 02       		.byte	0x2
 1768 06d3 74       		.byte	0x74
 1769 06d4 FB000000 		.4byte	0xfb
 1770 06d8 02       		.byte	0x2
 1771 06d9 91       		.byte	0x91
 1772 06da 77       		.sleb128 -9
 1773 06db 1A       		.uleb128 0x1a
 1774 06dc 696900   		.ascii	"ii\000"
 1775 06df 02       		.byte	0x2
 1776 06e0 75       		.byte	0x75
 1777 06e1 14010000 		.4byte	0x114
 1778 06e5 1B       		.uleb128 0x1b
 1779 06e6 36000000 		.4byte	.LASF99
 1780 06ea 02       		.byte	0x2
 1781 06eb 77       		.byte	0x77
 1782 06ec 3F060000 		.4byte	0x63f
 1783 06f0 02       		.byte	0x2
 1784 06f1 91       		.byte	0x91
 1785 06f2 76       		.sleb128 -10
 1786 06f3 1B       		.uleb128 0x1b
 1787 06f4 2B020000 		.4byte	.LASF100
 1788 06f8 02       		.byte	0x2
 1789 06f9 78       		.byte	0x78
 1790 06fa FB000000 		.4byte	0xfb
 1791 06fe 02       		.byte	0x2
 1792 06ff 91       		.byte	0x91
 1793 0700 75       		.sleb128 -11
 1794 0701 19       		.uleb128 0x19
 1795 0702 6400     		.ascii	"d\000"
 1796 0704 02       		.byte	0x2
 1797 0705 79       		.byte	0x79
 1798 0706 02010000 		.4byte	0x102
 1799 070a 02       		.byte	0x2
 1800 070b 91       		.byte	0x91
 1801 070c 72       		.sleb128 -14
ARM GAS  /tmp/ccKDiUbI.s 			page 59


 1802 070d 19       		.uleb128 0x19
 1803 070e 657A3100 		.ascii	"ez1\000"
 1804 0712 02       		.byte	0x2
 1805 0713 7A       		.byte	0x7a
 1806 0714 02010000 		.4byte	0x102
 1807 0718 02       		.byte	0x2
 1808 0719 91       		.byte	0x91
 1809 071a 70       		.sleb128 -16
 1810 071b 19       		.uleb128 0x19
 1811 071c 657A3200 		.ascii	"ez2\000"
 1812 0720 02       		.byte	0x2
 1813 0721 7B       		.byte	0x7b
 1814 0722 02010000 		.4byte	0x102
 1815 0726 02       		.byte	0x2
 1816 0727 91       		.byte	0x91
 1817 0728 6E       		.sleb128 -18
 1818 0729 00       		.byte	0
 1819 072a 1C       		.uleb128 0x1c
 1820 072b 01       		.byte	0x1
 1821 072c 6C040000 		.4byte	.LASF101
 1822 0730 02       		.byte	0x2
 1823 0731 AE01     		.2byte	0x1ae
 1824 0733 01       		.byte	0x1
 1825 0734 00000000 		.4byte	.LFB21
 1826 0738 74000000 		.4byte	.LFE21
 1827 073c 02       		.byte	0x2
 1828 073d 7D       		.byte	0x7d
 1829 073e 00       		.sleb128 0
 1830 073f 01       		.byte	0x1
 1831 0740 1C       		.uleb128 0x1c
 1832 0741 01       		.byte	0x1
 1833 0742 91040000 		.4byte	.LASF102
 1834 0746 02       		.byte	0x2
 1835 0747 EB01     		.2byte	0x1eb
 1836 0749 01       		.byte	0x1
 1837 074a 00000000 		.4byte	.LFB22
 1838 074e 04000000 		.4byte	.LFE22
 1839 0752 02       		.byte	0x2
 1840 0753 7D       		.byte	0x7d
 1841 0754 00       		.sleb128 0
 1842 0755 01       		.byte	0x1
 1843 0756 0C       		.uleb128 0xc
 1844 0757 14010000 		.4byte	0x114
 1845 075b 66070000 		.4byte	0x766
 1846 075f 0D       		.uleb128 0xd
 1847 0760 13020000 		.4byte	0x213
 1848 0764 04       		.byte	0x4
 1849 0765 00       		.byte	0
 1850 0766 1D       		.uleb128 0x1d
 1851 0767 21040000 		.4byte	.LASF103
 1852 076b 02       		.byte	0x2
 1853 076c 29       		.byte	0x29
 1854 076d 78070000 		.4byte	0x778
 1855 0771 01       		.byte	0x1
 1856 0772 05       		.byte	0x5
 1857 0773 03       		.byte	0x3
 1858 0774 00000000 		.4byte	adc_ch
ARM GAS  /tmp/ccKDiUbI.s 			page 60


 1859 0778 0E       		.uleb128 0xe
 1860 0779 56070000 		.4byte	0x756
 1861 077d 1D       		.uleb128 0x1d
 1862 077e B3050000 		.4byte	.LASF104
 1863 0782 02       		.byte	0x2
 1864 0783 2A       		.byte	0x2a
 1865 0784 8F070000 		.4byte	0x78f
 1866 0788 01       		.byte	0x1
 1867 0789 05       		.byte	0x5
 1868 078a 03       		.byte	0x3
 1869 078b 00000000 		.4byte	seq_ready
 1870 078f 0E       		.uleb128 0xe
 1871 0790 FB000000 		.4byte	0xfb
 1872 0794 1D       		.uleb128 0x1d
 1873 0795 A9050000 		.4byte	.LASF105
 1874 0799 02       		.byte	0x2
 1875 079a 2D       		.byte	0x2d
 1876 079b A6070000 		.4byte	0x7a6
 1877 079f 01       		.byte	0x1
 1878 07a0 05       		.byte	0x5
 1879 07a1 03       		.byte	0x3
 1880 07a2 00000000 		.4byte	timer_led
 1881 07a6 0E       		.uleb128 0xe
 1882 07a7 14010000 		.4byte	0x114
 1883 07ab 1D       		.uleb128 0x1d
 1884 07ac C6000000 		.4byte	.LASF106
 1885 07b0 02       		.byte	0x2
 1886 07b1 36       		.byte	0x36
 1887 07b2 8F070000 		.4byte	0x78f
 1888 07b6 01       		.byte	0x1
 1889 07b7 05       		.byte	0x5
 1890 07b8 03       		.byte	0x3
 1891 07b9 00000000 		.4byte	overcurrent_shutdown
 1892 07bd 1D       		.uleb128 0x1d
 1893 07be 82030000 		.4byte	.LASF107
 1894 07c2 02       		.byte	0x2
 1895 07c3 40       		.byte	0x40
 1896 07c4 A6070000 		.4byte	0x7a6
 1897 07c8 01       		.byte	0x1
 1898 07c9 05       		.byte	0x5
 1899 07ca 03       		.byte	0x3
 1900 07cb 00000000 		.4byte	wait_ms_var
 1901 07cf 1D       		.uleb128 0x1d
 1902 07d0 BD050000 		.4byte	.LASF108
 1903 07d4 02       		.byte	0x2
 1904 07d5 41       		.byte	0x41
 1905 07d6 A6070000 		.4byte	0x7a6
 1906 07da 01       		.byte	0x1
 1907 07db 05       		.byte	0x5
 1908 07dc 03       		.byte	0x3
 1909 07dd 00000000 		.4byte	timer_standby
 1910 07e1 1D       		.uleb128 0x1d
 1911 07e2 97000000 		.4byte	.LASF109
 1912 07e6 02       		.byte	0x2
 1913 07e7 44       		.byte	0x44
 1914 07e8 8F070000 		.4byte	0x78f
 1915 07ec 01       		.byte	0x1
ARM GAS  /tmp/ccKDiUbI.s 			page 61


 1916 07ed 05       		.byte	0x5
 1917 07ee 03       		.byte	0x3
 1918 07ef 00000000 		.4byte	timer_filters
 1919 07f3 0C       		.uleb128 0xc
 1920 07f4 14010000 		.4byte	0x114
 1921 07f8 03080000 		.4byte	0x803
 1922 07fc 0D       		.uleb128 0xd
 1923 07fd 13020000 		.4byte	0x213
 1924 0801 EF       		.byte	0xef
 1925 0802 00       		.byte	0
 1926 0803 1D       		.uleb128 0x1d
 1927 0804 E5000000 		.4byte	.LASF110
 1928 0808 02       		.byte	0x2
 1929 0809 4B       		.byte	0x4b
 1930 080a F3070000 		.4byte	0x7f3
 1931 080e 01       		.byte	0x1
 1932 080f 05       		.byte	0x5
 1933 0810 03       		.byte	0x3
 1934 0811 00000000 		.4byte	mem_signal
 1935 0815 1D       		.uleb128 0x1d
 1936 0816 72030000 		.4byte	.LASF111
 1937 081a 02       		.byte	0x2
 1938 081b 65       		.byte	0x65
 1939 081c 27080000 		.4byte	0x827
 1940 0820 01       		.byte	0x1
 1941 0821 05       		.byte	0x5
 1942 0822 03       		.byte	0x3
 1943 0823 00000000 		.4byte	p_signal
 1944 0827 1E       		.uleb128 0x1e
 1945 0828 04       		.byte	0x4
 1946 0829 14010000 		.4byte	0x114
 1947 082d 00       		.byte	0
 1948              		.section	.debug_abbrev,"",%progbits
 1949              	.Ldebug_abbrev0:
 1950 0000 01       		.uleb128 0x1
 1951 0001 11       		.uleb128 0x11
 1952 0002 01       		.byte	0x1
 1953 0003 25       		.uleb128 0x25
 1954 0004 0E       		.uleb128 0xe
 1955 0005 13       		.uleb128 0x13
 1956 0006 0B       		.uleb128 0xb
 1957 0007 03       		.uleb128 0x3
 1958 0008 0E       		.uleb128 0xe
 1959 0009 1B       		.uleb128 0x1b
 1960 000a 0E       		.uleb128 0xe
 1961 000b 55       		.uleb128 0x55
 1962 000c 06       		.uleb128 0x6
 1963 000d 11       		.uleb128 0x11
 1964 000e 01       		.uleb128 0x1
 1965 000f 52       		.uleb128 0x52
 1966 0010 01       		.uleb128 0x1
 1967 0011 10       		.uleb128 0x10
 1968 0012 06       		.uleb128 0x6
 1969 0013 00       		.byte	0
 1970 0014 00       		.byte	0
 1971 0015 02       		.uleb128 0x2
 1972 0016 04       		.uleb128 0x4
ARM GAS  /tmp/ccKDiUbI.s 			page 62


 1973 0017 01       		.byte	0x1
 1974 0018 03       		.uleb128 0x3
 1975 0019 0E       		.uleb128 0xe
 1976 001a 0B       		.uleb128 0xb
 1977 001b 0B       		.uleb128 0xb
 1978 001c 49       		.uleb128 0x49
 1979 001d 13       		.uleb128 0x13
 1980 001e 3A       		.uleb128 0x3a
 1981 001f 0B       		.uleb128 0xb
 1982 0020 3B       		.uleb128 0x3b
 1983 0021 0B       		.uleb128 0xb
 1984 0022 01       		.uleb128 0x1
 1985 0023 13       		.uleb128 0x13
 1986 0024 00       		.byte	0
 1987 0025 00       		.byte	0
 1988 0026 03       		.uleb128 0x3
 1989 0027 28       		.uleb128 0x28
 1990 0028 00       		.byte	0
 1991 0029 03       		.uleb128 0x3
 1992 002a 0E       		.uleb128 0xe
 1993 002b 1C       		.uleb128 0x1c
 1994 002c 0D       		.uleb128 0xd
 1995 002d 00       		.byte	0
 1996 002e 00       		.byte	0
 1997 002f 04       		.uleb128 0x4
 1998 0030 28       		.uleb128 0x28
 1999 0031 00       		.byte	0
 2000 0032 03       		.uleb128 0x3
 2001 0033 0E       		.uleb128 0xe
 2002 0034 1C       		.uleb128 0x1c
 2003 0035 0B       		.uleb128 0xb
 2004 0036 00       		.byte	0
 2005 0037 00       		.byte	0
 2006 0038 05       		.uleb128 0x5
 2007 0039 24       		.uleb128 0x24
 2008 003a 00       		.byte	0
 2009 003b 0B       		.uleb128 0xb
 2010 003c 0B       		.uleb128 0xb
 2011 003d 3E       		.uleb128 0x3e
 2012 003e 0B       		.uleb128 0xb
 2013 003f 03       		.uleb128 0x3
 2014 0040 0E       		.uleb128 0xe
 2015 0041 00       		.byte	0
 2016 0042 00       		.byte	0
 2017 0043 06       		.uleb128 0x6
 2018 0044 16       		.uleb128 0x16
 2019 0045 00       		.byte	0
 2020 0046 03       		.uleb128 0x3
 2021 0047 0E       		.uleb128 0xe
 2022 0048 3A       		.uleb128 0x3a
 2023 0049 0B       		.uleb128 0xb
 2024 004a 3B       		.uleb128 0x3b
 2025 004b 05       		.uleb128 0x5
 2026 004c 49       		.uleb128 0x49
 2027 004d 13       		.uleb128 0x13
 2028 004e 00       		.byte	0
 2029 004f 00       		.byte	0
ARM GAS  /tmp/ccKDiUbI.s 			page 63


 2030 0050 07       		.uleb128 0x7
 2031 0051 16       		.uleb128 0x16
 2032 0052 00       		.byte	0
 2033 0053 03       		.uleb128 0x3
 2034 0054 0E       		.uleb128 0xe
 2035 0055 3A       		.uleb128 0x3a
 2036 0056 0B       		.uleb128 0xb
 2037 0057 3B       		.uleb128 0x3b
 2038 0058 0B       		.uleb128 0xb
 2039 0059 49       		.uleb128 0x49
 2040 005a 13       		.uleb128 0x13
 2041 005b 00       		.byte	0
 2042 005c 00       		.byte	0
 2043 005d 08       		.uleb128 0x8
 2044 005e 24       		.uleb128 0x24
 2045 005f 00       		.byte	0
 2046 0060 0B       		.uleb128 0xb
 2047 0061 0B       		.uleb128 0xb
 2048 0062 3E       		.uleb128 0x3e
 2049 0063 0B       		.uleb128 0xb
 2050 0064 03       		.uleb128 0x3
 2051 0065 08       		.uleb128 0x8
 2052 0066 00       		.byte	0
 2053 0067 00       		.byte	0
 2054 0068 09       		.uleb128 0x9
 2055 0069 13       		.uleb128 0x13
 2056 006a 01       		.byte	0x1
 2057 006b 0B       		.uleb128 0xb
 2058 006c 05       		.uleb128 0x5
 2059 006d 3A       		.uleb128 0x3a
 2060 006e 0B       		.uleb128 0xb
 2061 006f 3B       		.uleb128 0x3b
 2062 0070 0B       		.uleb128 0xb
 2063 0071 01       		.uleb128 0x1
 2064 0072 13       		.uleb128 0x13
 2065 0073 00       		.byte	0
 2066 0074 00       		.byte	0
 2067 0075 0A       		.uleb128 0xa
 2068 0076 0D       		.uleb128 0xd
 2069 0077 00       		.byte	0
 2070 0078 03       		.uleb128 0x3
 2071 0079 0E       		.uleb128 0xe
 2072 007a 3A       		.uleb128 0x3a
 2073 007b 0B       		.uleb128 0xb
 2074 007c 3B       		.uleb128 0x3b
 2075 007d 0B       		.uleb128 0xb
 2076 007e 49       		.uleb128 0x49
 2077 007f 13       		.uleb128 0x13
 2078 0080 38       		.uleb128 0x38
 2079 0081 0A       		.uleb128 0xa
 2080 0082 00       		.byte	0
 2081 0083 00       		.byte	0
 2082 0084 0B       		.uleb128 0xb
 2083 0085 0D       		.uleb128 0xd
 2084 0086 00       		.byte	0
 2085 0087 03       		.uleb128 0x3
 2086 0088 08       		.uleb128 0x8
ARM GAS  /tmp/ccKDiUbI.s 			page 64


 2087 0089 3A       		.uleb128 0x3a
 2088 008a 0B       		.uleb128 0xb
 2089 008b 3B       		.uleb128 0x3b
 2090 008c 0B       		.uleb128 0xb
 2091 008d 49       		.uleb128 0x49
 2092 008e 13       		.uleb128 0x13
 2093 008f 38       		.uleb128 0x38
 2094 0090 0A       		.uleb128 0xa
 2095 0091 00       		.byte	0
 2096 0092 00       		.byte	0
 2097 0093 0C       		.uleb128 0xc
 2098 0094 01       		.uleb128 0x1
 2099 0095 01       		.byte	0x1
 2100 0096 49       		.uleb128 0x49
 2101 0097 13       		.uleb128 0x13
 2102 0098 01       		.uleb128 0x1
 2103 0099 13       		.uleb128 0x13
 2104 009a 00       		.byte	0
 2105 009b 00       		.byte	0
 2106 009c 0D       		.uleb128 0xd
 2107 009d 21       		.uleb128 0x21
 2108 009e 00       		.byte	0
 2109 009f 49       		.uleb128 0x49
 2110 00a0 13       		.uleb128 0x13
 2111 00a1 2F       		.uleb128 0x2f
 2112 00a2 0B       		.uleb128 0xb
 2113 00a3 00       		.byte	0
 2114 00a4 00       		.byte	0
 2115 00a5 0E       		.uleb128 0xe
 2116 00a6 35       		.uleb128 0x35
 2117 00a7 00       		.byte	0
 2118 00a8 49       		.uleb128 0x49
 2119 00a9 13       		.uleb128 0x13
 2120 00aa 00       		.byte	0
 2121 00ab 00       		.byte	0
 2122 00ac 0F       		.uleb128 0xf
 2123 00ad 13       		.uleb128 0x13
 2124 00ae 01       		.byte	0x1
 2125 00af 0B       		.uleb128 0xb
 2126 00b0 0B       		.uleb128 0xb
 2127 00b1 3A       		.uleb128 0x3a
 2128 00b2 0B       		.uleb128 0xb
 2129 00b3 3B       		.uleb128 0x3b
 2130 00b4 0B       		.uleb128 0xb
 2131 00b5 01       		.uleb128 0x1
 2132 00b6 13       		.uleb128 0x13
 2133 00b7 00       		.byte	0
 2134 00b8 00       		.byte	0
 2135 00b9 10       		.uleb128 0x10
 2136 00ba 26       		.uleb128 0x26
 2137 00bb 00       		.byte	0
 2138 00bc 49       		.uleb128 0x49
 2139 00bd 13       		.uleb128 0x13
 2140 00be 00       		.byte	0
 2141 00bf 00       		.byte	0
 2142 00c0 11       		.uleb128 0x11
 2143 00c1 0D       		.uleb128 0xd
ARM GAS  /tmp/ccKDiUbI.s 			page 65


 2144 00c2 00       		.byte	0
 2145 00c3 03       		.uleb128 0x3
 2146 00c4 08       		.uleb128 0x8
 2147 00c5 3A       		.uleb128 0x3a
 2148 00c6 0B       		.uleb128 0xb
 2149 00c7 3B       		.uleb128 0x3b
 2150 00c8 05       		.uleb128 0x5
 2151 00c9 49       		.uleb128 0x49
 2152 00ca 13       		.uleb128 0x13
 2153 00cb 38       		.uleb128 0x38
 2154 00cc 0A       		.uleb128 0xa
 2155 00cd 00       		.byte	0
 2156 00ce 00       		.byte	0
 2157 00cf 12       		.uleb128 0x12
 2158 00d0 0D       		.uleb128 0xd
 2159 00d1 00       		.byte	0
 2160 00d2 03       		.uleb128 0x3
 2161 00d3 0E       		.uleb128 0xe
 2162 00d4 3A       		.uleb128 0x3a
 2163 00d5 0B       		.uleb128 0xb
 2164 00d6 3B       		.uleb128 0x3b
 2165 00d7 05       		.uleb128 0x5
 2166 00d8 49       		.uleb128 0x49
 2167 00d9 13       		.uleb128 0x13
 2168 00da 38       		.uleb128 0x38
 2169 00db 0A       		.uleb128 0xa
 2170 00dc 00       		.byte	0
 2171 00dd 00       		.byte	0
 2172 00de 13       		.uleb128 0x13
 2173 00df 13       		.uleb128 0x13
 2174 00e0 01       		.byte	0x1
 2175 00e1 0B       		.uleb128 0xb
 2176 00e2 0B       		.uleb128 0xb
 2177 00e3 3A       		.uleb128 0x3a
 2178 00e4 0B       		.uleb128 0xb
 2179 00e5 3B       		.uleb128 0x3b
 2180 00e6 05       		.uleb128 0x5
 2181 00e7 01       		.uleb128 0x1
 2182 00e8 13       		.uleb128 0x13
 2183 00e9 00       		.byte	0
 2184 00ea 00       		.byte	0
 2185 00eb 14       		.uleb128 0x14
 2186 00ec 04       		.uleb128 0x4
 2187 00ed 01       		.byte	0x1
 2188 00ee 0B       		.uleb128 0xb
 2189 00ef 0B       		.uleb128 0xb
 2190 00f0 49       		.uleb128 0x49
 2191 00f1 13       		.uleb128 0x13
 2192 00f2 3A       		.uleb128 0x3a
 2193 00f3 0B       		.uleb128 0xb
 2194 00f4 3B       		.uleb128 0x3b
 2195 00f5 0B       		.uleb128 0xb
 2196 00f6 01       		.uleb128 0x1
 2197 00f7 13       		.uleb128 0x13
 2198 00f8 00       		.byte	0
 2199 00f9 00       		.byte	0
 2200 00fa 15       		.uleb128 0x15
ARM GAS  /tmp/ccKDiUbI.s 			page 66


 2201 00fb 2E       		.uleb128 0x2e
 2202 00fc 01       		.byte	0x1
 2203 00fd 03       		.uleb128 0x3
 2204 00fe 0E       		.uleb128 0xe
 2205 00ff 3A       		.uleb128 0x3a
 2206 0100 0B       		.uleb128 0xb
 2207 0101 3B       		.uleb128 0x3b
 2208 0102 05       		.uleb128 0x5
 2209 0103 27       		.uleb128 0x27
 2210 0104 0C       		.uleb128 0xc
 2211 0105 11       		.uleb128 0x11
 2212 0106 01       		.uleb128 0x1
 2213 0107 12       		.uleb128 0x12
 2214 0108 01       		.uleb128 0x1
 2215 0109 40       		.uleb128 0x40
 2216 010a 06       		.uleb128 0x6
 2217 010b 9742     		.uleb128 0x2117
 2218 010d 0C       		.uleb128 0xc
 2219 010e 01       		.uleb128 0x1
 2220 010f 13       		.uleb128 0x13
 2221 0110 00       		.byte	0
 2222 0111 00       		.byte	0
 2223 0112 16       		.uleb128 0x16
 2224 0113 05       		.uleb128 0x5
 2225 0114 00       		.byte	0
 2226 0115 03       		.uleb128 0x3
 2227 0116 0E       		.uleb128 0xe
 2228 0117 3A       		.uleb128 0x3a
 2229 0118 0B       		.uleb128 0xb
 2230 0119 3B       		.uleb128 0x3b
 2231 011a 05       		.uleb128 0x5
 2232 011b 49       		.uleb128 0x49
 2233 011c 13       		.uleb128 0x13
 2234 011d 02       		.uleb128 0x2
 2235 011e 0A       		.uleb128 0xa
 2236 011f 00       		.byte	0
 2237 0120 00       		.byte	0
 2238 0121 17       		.uleb128 0x17
 2239 0122 2E       		.uleb128 0x2e
 2240 0123 01       		.byte	0x1
 2241 0124 03       		.uleb128 0x3
 2242 0125 0E       		.uleb128 0xe
 2243 0126 3A       		.uleb128 0x3a
 2244 0127 0B       		.uleb128 0xb
 2245 0128 3B       		.uleb128 0x3b
 2246 0129 05       		.uleb128 0x5
 2247 012a 27       		.uleb128 0x27
 2248 012b 0C       		.uleb128 0xc
 2249 012c 49       		.uleb128 0x49
 2250 012d 13       		.uleb128 0x13
 2251 012e 11       		.uleb128 0x11
 2252 012f 01       		.uleb128 0x1
 2253 0130 12       		.uleb128 0x12
 2254 0131 01       		.uleb128 0x1
 2255 0132 40       		.uleb128 0x40
 2256 0133 06       		.uleb128 0x6
 2257 0134 9642     		.uleb128 0x2116
ARM GAS  /tmp/ccKDiUbI.s 			page 67


 2258 0136 0C       		.uleb128 0xc
 2259 0137 01       		.uleb128 0x1
 2260 0138 13       		.uleb128 0x13
 2261 0139 00       		.byte	0
 2262 013a 00       		.byte	0
 2263 013b 18       		.uleb128 0x18
 2264 013c 2E       		.uleb128 0x2e
 2265 013d 01       		.byte	0x1
 2266 013e 3F       		.uleb128 0x3f
 2267 013f 0C       		.uleb128 0xc
 2268 0140 03       		.uleb128 0x3
 2269 0141 0E       		.uleb128 0xe
 2270 0142 3A       		.uleb128 0x3a
 2271 0143 0B       		.uleb128 0xb
 2272 0144 3B       		.uleb128 0x3b
 2273 0145 0B       		.uleb128 0xb
 2274 0146 27       		.uleb128 0x27
 2275 0147 0C       		.uleb128 0xc
 2276 0148 49       		.uleb128 0x49
 2277 0149 13       		.uleb128 0x13
 2278 014a 11       		.uleb128 0x11
 2279 014b 01       		.uleb128 0x1
 2280 014c 12       		.uleb128 0x12
 2281 014d 01       		.uleb128 0x1
 2282 014e 40       		.uleb128 0x40
 2283 014f 06       		.uleb128 0x6
 2284 0150 9642     		.uleb128 0x2116
 2285 0152 0C       		.uleb128 0xc
 2286 0153 01       		.uleb128 0x1
 2287 0154 13       		.uleb128 0x13
 2288 0155 00       		.byte	0
 2289 0156 00       		.byte	0
 2290 0157 19       		.uleb128 0x19
 2291 0158 34       		.uleb128 0x34
 2292 0159 00       		.byte	0
 2293 015a 03       		.uleb128 0x3
 2294 015b 08       		.uleb128 0x8
 2295 015c 3A       		.uleb128 0x3a
 2296 015d 0B       		.uleb128 0xb
 2297 015e 3B       		.uleb128 0x3b
 2298 015f 0B       		.uleb128 0xb
 2299 0160 49       		.uleb128 0x49
 2300 0161 13       		.uleb128 0x13
 2301 0162 02       		.uleb128 0x2
 2302 0163 0A       		.uleb128 0xa
 2303 0164 00       		.byte	0
 2304 0165 00       		.byte	0
 2305 0166 1A       		.uleb128 0x1a
 2306 0167 34       		.uleb128 0x34
 2307 0168 00       		.byte	0
 2308 0169 03       		.uleb128 0x3
 2309 016a 08       		.uleb128 0x8
 2310 016b 3A       		.uleb128 0x3a
 2311 016c 0B       		.uleb128 0xb
 2312 016d 3B       		.uleb128 0x3b
 2313 016e 0B       		.uleb128 0xb
 2314 016f 49       		.uleb128 0x49
ARM GAS  /tmp/ccKDiUbI.s 			page 68


 2315 0170 13       		.uleb128 0x13
 2316 0171 00       		.byte	0
 2317 0172 00       		.byte	0
 2318 0173 1B       		.uleb128 0x1b
 2319 0174 34       		.uleb128 0x34
 2320 0175 00       		.byte	0
 2321 0176 03       		.uleb128 0x3
 2322 0177 0E       		.uleb128 0xe
 2323 0178 3A       		.uleb128 0x3a
 2324 0179 0B       		.uleb128 0xb
 2325 017a 3B       		.uleb128 0x3b
 2326 017b 0B       		.uleb128 0xb
 2327 017c 49       		.uleb128 0x49
 2328 017d 13       		.uleb128 0x13
 2329 017e 02       		.uleb128 0x2
 2330 017f 0A       		.uleb128 0xa
 2331 0180 00       		.byte	0
 2332 0181 00       		.byte	0
 2333 0182 1C       		.uleb128 0x1c
 2334 0183 2E       		.uleb128 0x2e
 2335 0184 00       		.byte	0
 2336 0185 3F       		.uleb128 0x3f
 2337 0186 0C       		.uleb128 0xc
 2338 0187 03       		.uleb128 0x3
 2339 0188 0E       		.uleb128 0xe
 2340 0189 3A       		.uleb128 0x3a
 2341 018a 0B       		.uleb128 0xb
 2342 018b 3B       		.uleb128 0x3b
 2343 018c 05       		.uleb128 0x5
 2344 018d 27       		.uleb128 0x27
 2345 018e 0C       		.uleb128 0xc
 2346 018f 11       		.uleb128 0x11
 2347 0190 01       		.uleb128 0x1
 2348 0191 12       		.uleb128 0x12
 2349 0192 01       		.uleb128 0x1
 2350 0193 40       		.uleb128 0x40
 2351 0194 0A       		.uleb128 0xa
 2352 0195 9742     		.uleb128 0x2117
 2353 0197 0C       		.uleb128 0xc
 2354 0198 00       		.byte	0
 2355 0199 00       		.byte	0
 2356 019a 1D       		.uleb128 0x1d
 2357 019b 34       		.uleb128 0x34
 2358 019c 00       		.byte	0
 2359 019d 03       		.uleb128 0x3
 2360 019e 0E       		.uleb128 0xe
 2361 019f 3A       		.uleb128 0x3a
 2362 01a0 0B       		.uleb128 0xb
 2363 01a1 3B       		.uleb128 0x3b
 2364 01a2 0B       		.uleb128 0xb
 2365 01a3 49       		.uleb128 0x49
 2366 01a4 13       		.uleb128 0x13
 2367 01a5 3F       		.uleb128 0x3f
 2368 01a6 0C       		.uleb128 0xc
 2369 01a7 02       		.uleb128 0x2
 2370 01a8 0A       		.uleb128 0xa
 2371 01a9 00       		.byte	0
ARM GAS  /tmp/ccKDiUbI.s 			page 69


 2372 01aa 00       		.byte	0
 2373 01ab 1E       		.uleb128 0x1e
 2374 01ac 0F       		.uleb128 0xf
 2375 01ad 00       		.byte	0
 2376 01ae 0B       		.uleb128 0xb
 2377 01af 0B       		.uleb128 0xb
 2378 01b0 49       		.uleb128 0x49
 2379 01b1 13       		.uleb128 0x13
 2380 01b2 00       		.byte	0
 2381 01b3 00       		.byte	0
 2382 01b4 00       		.byte	0
 2383              		.section	.debug_loc,"",%progbits
 2384              	.Ldebug_loc0:
 2385              	.LLST0:
 2386 0000 00000000 		.4byte	.LFB16
 2387 0004 02000000 		.4byte	.LCFI0
 2388 0008 0200     		.2byte	0x2
 2389 000a 7D       		.byte	0x7d
 2390 000b 00       		.sleb128 0
 2391 000c 02000000 		.4byte	.LCFI0
 2392 0010 04000000 		.4byte	.LCFI1
 2393 0014 0200     		.2byte	0x2
 2394 0016 7D       		.byte	0x7d
 2395 0017 0C       		.sleb128 12
 2396 0018 04000000 		.4byte	.LCFI1
 2397 001c EC000000 		.4byte	.LFE16
 2398 0020 0200     		.2byte	0x2
 2399 0022 7D       		.byte	0x7d
 2400 0023 18       		.sleb128 24
 2401 0024 00000000 		.4byte	0
 2402 0028 00000000 		.4byte	0
 2403              	.LLST1:
 2404 002c 00000000 		.4byte	.LFB18
 2405 0030 02000000 		.4byte	.LCFI2
 2406 0034 0200     		.2byte	0x2
 2407 0036 7D       		.byte	0x7d
 2408 0037 00       		.sleb128 0
 2409 0038 02000000 		.4byte	.LCFI2
 2410 003c 04000000 		.4byte	.LCFI3
 2411 0040 0200     		.2byte	0x2
 2412 0042 7D       		.byte	0x7d
 2413 0043 04       		.sleb128 4
 2414 0044 04000000 		.4byte	.LCFI3
 2415 0048 48000000 		.4byte	.LFE18
 2416 004c 0200     		.2byte	0x2
 2417 004e 7D       		.byte	0x7d
 2418 004f 10       		.sleb128 16
 2419 0050 00000000 		.4byte	0
 2420 0054 00000000 		.4byte	0
 2421              	.LLST2:
 2422 0058 00000000 		.4byte	.LFB20
 2423 005c 02000000 		.4byte	.LCFI4
 2424 0060 0200     		.2byte	0x2
 2425 0062 7D       		.byte	0x7d
 2426 0063 00       		.sleb128 0
 2427 0064 02000000 		.4byte	.LCFI4
 2428 0068 04000000 		.4byte	.LCFI5
ARM GAS  /tmp/ccKDiUbI.s 			page 70


 2429 006c 0200     		.2byte	0x2
 2430 006e 7D       		.byte	0x7d
 2431 006f 04       		.sleb128 4
 2432 0070 04000000 		.4byte	.LCFI5
 2433 0074 48010000 		.4byte	.LFE20
 2434 0078 0200     		.2byte	0x2
 2435 007a 7D       		.byte	0x7d
 2436 007b 18       		.sleb128 24
 2437 007c 00000000 		.4byte	0
 2438 0080 00000000 		.4byte	0
 2439              		.section	.debug_aranges,"",%progbits
 2440 0000 3C000000 		.4byte	0x3c
 2441 0004 0200     		.2byte	0x2
 2442 0006 00000000 		.4byte	.Ldebug_info0
 2443 000a 04       		.byte	0x4
 2444 000b 00       		.byte	0
 2445 000c 0000     		.2byte	0
 2446 000e 0000     		.2byte	0
 2447 0010 00000000 		.4byte	.LFB16
 2448 0014 EC000000 		.4byte	.LFE16-.LFB16
 2449 0018 00000000 		.4byte	.LFB18
 2450 001c 48000000 		.4byte	.LFE18-.LFB18
 2451 0020 00000000 		.4byte	.LFB20
 2452 0024 48010000 		.4byte	.LFE20-.LFB20
 2453 0028 00000000 		.4byte	.LFB21
 2454 002c 74000000 		.4byte	.LFE21-.LFB21
 2455 0030 00000000 		.4byte	.LFB22
 2456 0034 04000000 		.4byte	.LFE22-.LFB22
 2457 0038 00000000 		.4byte	0
 2458 003c 00000000 		.4byte	0
 2459              		.section	.debug_ranges,"",%progbits
 2460              	.Ldebug_ranges0:
 2461 0000 00000000 		.4byte	.LFB16
 2462 0004 EC000000 		.4byte	.LFE16
 2463 0008 00000000 		.4byte	.LFB18
 2464 000c 48000000 		.4byte	.LFE18
 2465 0010 00000000 		.4byte	.LFB20
 2466 0014 48010000 		.4byte	.LFE20
 2467 0018 00000000 		.4byte	.LFB21
 2468 001c 74000000 		.4byte	.LFE21
 2469 0020 00000000 		.4byte	.LFB22
 2470 0024 04000000 		.4byte	.LFE22
 2471 0028 00000000 		.4byte	0
 2472 002c 00000000 		.4byte	0
 2473              		.section	.debug_line,"",%progbits
 2474              	.Ldebug_line0:
 2475 0000 C8010000 		.section	.debug_str,"MS",%progbits,1
 2475      02001501 
 2475      00000201 
 2475      FB0E0D00 
 2475      01010101 
 2476              	.LASF11:
 2477 0000 45585449 		.ascii	"EXTI4_15_IRQn\000"
 2477      345F3135 
 2477      5F495251 
 2477      6E00
 2478              	.LASF80:
ARM GAS  /tmp/ccKDiUbI.s 			page 71


 2479 000e 42535252 		.ascii	"BSRR\000"
 2479      00
 2480              	.LASF10:
 2481 0013 45585449 		.ascii	"EXTI2_3_IRQn\000"
 2481      325F335F 
 2481      4952516E 
 2481      00
 2482              	.LASF87:
 2483 0020 564F4C54 		.ascii	"VOLTAGE_MODE\000"
 2483      4147455F 
 2483      4D4F4445 
 2483      00
 2484              	.LASF2:
 2485 002d 5356435F 		.ascii	"SVC_IRQn\000"
 2485      4952516E 
 2485      00
 2486              	.LASF99:
 2487 0036 64726976 		.ascii	"driver_state\000"
 2487      65725F73 
 2487      74617465 
 2487      00
 2488              	.LASF95:
 2489 0043 64726976 		.ascii	"driver_states_t\000"
 2489      65725F73 
 2489      74617465 
 2489      735F7400 
 2490              	.LASF115:
 2491 0053 4E564943 		.ascii	"NVIC_SetPriority\000"
 2491      5F536574 
 2491      5072696F 
 2491      72697479 
 2491      00
 2492              	.LASF40:
 2493 0064 756E7369 		.ascii	"unsigned int\000"
 2493      676E6564 
 2493      20696E74 
 2493      00
 2494              	.LASF62:
 2495 0071 4C4F4144 		.ascii	"LOAD\000"
 2495      00
 2496              	.LASF21:
 2497 0076 54494D31 		.ascii	"TIM16_IRQn\000"
 2497      365F4952 
 2497      516E00
 2498              	.LASF7:
 2499 0081 464C4153 		.ascii	"FLASH_IRQn\000"
 2499      485F4952 
 2499      516E00
 2500              	.LASF63:
 2501 008c 43414C49 		.ascii	"CALIB\000"
 2501      4200
 2502              	.LASF72:
 2503 0092 434D4152 		.ascii	"CMAR\000"
 2503      00
 2504              	.LASF109:
 2505 0097 74696D65 		.ascii	"timer_filters\000"
 2505      725F6669 
ARM GAS  /tmp/ccKDiUbI.s 			page 72


 2505      6C746572 
 2505      7300
 2506              	.LASF9:
 2507 00a5 45585449 		.ascii	"EXTI0_1_IRQn\000"
 2507      305F315F 
 2507      4952516E 
 2507      00
 2508              	.LASF73:
 2509 00b2 444D415F 		.ascii	"DMA_Channel_TypeDef\000"
 2509      4368616E 
 2509      6E656C5F 
 2509      54797065 
 2509      44656600 
 2510              	.LASF106:
 2511 00c6 6F766572 		.ascii	"overcurrent_shutdown\000"
 2511      63757272 
 2511      656E745F 
 2511      73687574 
 2511      646F776E 
 2512              	.LASF23:
 2513 00db 49324331 		.ascii	"I2C1_IRQn\000"
 2513      5F495251 
 2513      6E00
 2514              	.LASF110:
 2515 00e5 6D656D5F 		.ascii	"mem_signal\000"
 2515      7369676E 
 2515      616C00
 2516              	.LASF3:
 2517 00f0 50656E64 		.ascii	"PendSV_IRQn\000"
 2517      53565F49 
 2517      52516E00 
 2518              	.LASF70:
 2519 00fc 434E4454 		.ascii	"CNDTR\000"
 2519      5200
 2520              	.LASF8:
 2521 0102 5243435F 		.ascii	"RCC_IRQn\000"
 2521      4952516E 
 2521      00
 2522              	.LASF42:
 2523 010b 75696E74 		.ascii	"uint32_t\000"
 2523      33325F74 
 2523      00
 2524              	.LASF43:
 2525 0114 49534552 		.ascii	"ISER\000"
 2525      00
 2526              	.LASF46:
 2527 0119 52534552 		.ascii	"RSERVED1\000"
 2527      56454431 
 2527      00
 2528              	.LASF86:
 2529 0122 534F4654 		.ascii	"SOFT_START\000"
 2529      5F535441 
 2529      525400
 2530              	.LASF25:
 2531 012d 53504931 		.ascii	"SPI1_IRQn\000"
 2531      5F495251 
 2531      6E00
ARM GAS  /tmp/ccKDiUbI.s 			page 73


 2532              	.LASF39:
 2533 0137 6C6F6E67 		.ascii	"long long unsigned int\000"
 2533      206C6F6E 
 2533      6720756E 
 2533      7369676E 
 2533      65642069 
 2534              	.LASF59:
 2535 014e 44465352 		.ascii	"DFSR\000"
 2535      00
 2536              	.LASF91:
 2537 0153 4F564552 		.ascii	"OVERCURRENT\000"
 2537      43555252 
 2537      454E5400 
 2538              	.LASF33:
 2539 015f 5F5F7569 		.ascii	"__uint16_t\000"
 2539      6E743136 
 2539      5F7400
 2540              	.LASF76:
 2541 016a 4D4F4445 		.ascii	"MODER\000"
 2541      5200
 2542              	.LASF68:
 2543 0170 43485345 		.ascii	"CHSELR\000"
 2543      4C5200
 2544              	.LASF71:
 2545 0177 43504152 		.ascii	"CPAR\000"
 2545      00
 2546              	.LASF32:
 2547 017c 4952516E 		.ascii	"IRQn_Type\000"
 2547      5F547970 
 2547      6500
 2548              	.LASF28:
 2549 0186 55534152 		.ascii	"USART2_IRQn\000"
 2549      54325F49 
 2549      52516E00 
 2550              	.LASF54:
 2551 0192 43505549 		.ascii	"CPUID\000"
 2551      4400
 2552              	.LASF116:
 2553 0198 53797354 		.ascii	"SysTick_Config\000"
 2553      69636B5F 
 2553      436F6E66 
 2553      696700
 2554              	.LASF67:
 2555 01a7 534D5052 		.ascii	"SMPR\000"
 2555      00
 2556              	.LASF79:
 2557 01ac 50555044 		.ascii	"PUPDR\000"
 2557      5200
 2558              	.LASF15:
 2559 01b2 41444331 		.ascii	"ADC1_IRQn\000"
 2559      5F495251 
 2559      6E00
 2560              	.LASF98:
 2561 01bc 7469636B 		.ascii	"ticks\000"
 2561      7300
 2562              	.LASF84:
 2563 01c2 63686172 		.ascii	"char\000"
ARM GAS  /tmp/ccKDiUbI.s 			page 74


 2563      00
 2564              	.LASF56:
 2565 01c7 41495243 		.ascii	"AIRCR\000"
 2565      5200
 2566              	.LASF18:
 2567 01cd 54494D33 		.ascii	"TIM3_IRQn\000"
 2567      5F495251 
 2567      6E00
 2568              	.LASF12:
 2569 01d7 444D4131 		.ascii	"DMA1_Channel1_IRQn\000"
 2569      5F436861 
 2569      6E6E656C 
 2569      315F4952 
 2569      516E00
 2570              	.LASF20:
 2571 01ea 54494D31 		.ascii	"TIM15_IRQn\000"
 2571      355F4952 
 2571      516E00
 2572              	.LASF69:
 2573 01f5 4144435F 		.ascii	"ADC_TypeDef\000"
 2573      54797065 
 2573      44656600 
 2574              	.LASF38:
 2575 0201 6C6F6E67 		.ascii	"long long int\000"
 2575      206C6F6E 
 2575      6720696E 
 2575      7400
 2576              	.LASF5:
 2577 020f 57574447 		.ascii	"WWDG_IRQn\000"
 2577      5F495251 
 2577      6E00
 2578              	.LASF58:
 2579 0219 53484353 		.ascii	"SHCSR\000"
 2579      5200
 2580              	.LASF75:
 2581 021f 444D415F 		.ascii	"DMA_TypeDef\000"
 2581      54797065 
 2581      44656600 
 2582              	.LASF100:
 2583 022b 736F6674 		.ascii	"soft_start_cnt\000"
 2583      5F737461 
 2583      72745F63 
 2583      6E7400
 2584              	.LASF16:
 2585 023a 54494D31 		.ascii	"TIM1_BRK_UP_TRG_COM_IRQn\000"
 2585      5F42524B 
 2585      5F55505F 
 2585      5452475F 
 2585      434F4D5F 
 2586              	.LASF65:
 2587 0253 43464752 		.ascii	"CFGR1\000"
 2587      3100
 2588              	.LASF66:
 2589 0259 43464752 		.ascii	"CFGR2\000"
 2589      3200
 2590              	.LASF49:
 2591 025f 49435052 		.ascii	"ICPR\000"
ARM GAS  /tmp/ccKDiUbI.s 			page 75


 2591      00
 2592              	.LASF90:
 2593 0264 494E5055 		.ascii	"INPUT_OVERVOLTAGE\000"
 2593      545F4F56 
 2593      4552564F 
 2593      4C544147 
 2593      4500
 2594              	.LASF88:
 2595 0276 43555252 		.ascii	"CURRENT_MODE\000"
 2595      454E545F 
 2595      4D4F4445 
 2595      00
 2596              	.LASF78:
 2597 0283 4F535045 		.ascii	"OSPEEDR\000"
 2597      45445200 
 2598              	.LASF64:
 2599 028b 53797354 		.ascii	"SysTick_Type\000"
 2599      69636B5F 
 2599      54797065 
 2599      00
 2600              	.LASF83:
 2601 0298 6C6F6E67 		.ascii	"long double\000"
 2601      20646F75 
 2601      626C6500 
 2602              	.LASF41:
 2603 02a4 75696E74 		.ascii	"uint16_t\000"
 2603      31365F74 
 2603      00
 2604              	.LASF96:
 2605 02ad 4952516E 		.ascii	"IRQn\000"
 2605      00
 2606              	.LASF6:
 2607 02b2 5254435F 		.ascii	"RTC_IRQn\000"
 2607      4952516E 
 2607      00
 2608              	.LASF44:
 2609 02bb 52455345 		.ascii	"RESERVED0\000"
 2609      52564544 
 2609      3000
 2610              	.LASF57:
 2611 02c5 52455345 		.ascii	"RESERVED1\000"
 2611      52564544 
 2611      3100
 2612              	.LASF48:
 2613 02cf 52455345 		.ascii	"RESERVED2\000"
 2613      52564544 
 2613      3200
 2614              	.LASF50:
 2615 02d9 52455345 		.ascii	"RESERVED3\000"
 2615      52564544 
 2615      3300
 2616              	.LASF51:
 2617 02e3 52455345 		.ascii	"RESERVED4\000"
 2617      52564544 
 2617      3400
 2618              	.LASF31:
 2619 02ed 73686F72 		.ascii	"short int\000"
ARM GAS  /tmp/ccKDiUbI.s 			page 76


 2619      7420696E 
 2619      7400
 2620              	.LASF93:
 2621 02f7 4155544F 		.ascii	"AUTO_RESTART\000"
 2621      5F524553 
 2621      54415254 
 2621      00
 2622              	.LASF35:
 2623 0304 6C6F6E67 		.ascii	"long int\000"
 2623      20696E74 
 2623      00
 2624              	.LASF27:
 2625 030d 55534152 		.ascii	"USART1_IRQn\000"
 2625      54315F49 
 2625      52516E00 
 2626              	.LASF0:
 2627 0319 4E6F6E4D 		.ascii	"NonMaskableInt_IRQn\000"
 2627      61736B61 
 2627      626C6549 
 2627      6E745F49 
 2627      52516E00 
 2628              	.LASF114:
 2629 032d 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/emacs_dexel_pfc\000"
 2629      652F6D65 
 2629      642F446F 
 2629      63756D65 
 2629      6E74732F 
 2630              	.LASF97:
 2631 035c 7072696F 		.ascii	"priority\000"
 2631      72697479 
 2631      00
 2632              	.LASF17:
 2633 0365 54494D31 		.ascii	"TIM1_CC_IRQn\000"
 2633      5F43435F 
 2633      4952516E 
 2633      00
 2634              	.LASF111:
 2635 0372 705F7369 		.ascii	"p_signal\000"
 2635      676E616C 
 2635      00
 2636              	.LASF77:
 2637 037b 4F545950 		.ascii	"OTYPER\000"
 2637      455200
 2638              	.LASF107:
 2639 0382 77616974 		.ascii	"wait_ms_var\000"
 2639      5F6D735F 
 2639      76617200 
 2640              	.LASF22:
 2641 038e 54494D31 		.ascii	"TIM17_IRQn\000"
 2641      375F4952 
 2641      516E00
 2642              	.LASF85:
 2643 0399 504F5745 		.ascii	"POWER_UP\000"
 2643      525F5550 
 2643      00
 2644              	.LASF14:
 2645 03a2 444D4131 		.ascii	"DMA1_Channel4_5_IRQn\000"
ARM GAS  /tmp/ccKDiUbI.s 			page 77


 2645      5F436861 
 2645      6E6E656C 
 2645      345F355F 
 2645      4952516E 
 2646              	.LASF53:
 2647 03b7 4E564943 		.ascii	"NVIC_Type\000"
 2647      5F547970 
 2647      6500
 2648              	.LASF60:
 2649 03c1 5343425F 		.ascii	"SCB_Type\000"
 2649      54797065 
 2649      00
 2650              	.LASF82:
 2651 03ca 4750494F 		.ascii	"GPIO_TypeDef\000"
 2651      5F547970 
 2651      65446566 
 2651      00
 2652              	.LASF89:
 2653 03d7 4F555450 		.ascii	"OUTPUT_OVERVOLTAGE\000"
 2653      55545F4F 
 2653      56455256 
 2653      4F4C5441 
 2653      474500
 2654              	.LASF4:
 2655 03ea 53797354 		.ascii	"SysTick_IRQn\000"
 2655      69636B5F 
 2655      4952516E 
 2655      00
 2656              	.LASF52:
 2657 03f7 73697A65 		.ascii	"sizetype\000"
 2657      74797065 
 2657      00
 2658              	.LASF55:
 2659 0400 49435352 		.ascii	"ICSR\000"
 2659      00
 2660              	.LASF24:
 2661 0405 49324332 		.ascii	"I2C2_IRQn\000"
 2661      5F495251 
 2661      6E00
 2662              	.LASF37:
 2663 040f 6C6F6E67 		.ascii	"long unsigned int\000"
 2663      20756E73 
 2663      69676E65 
 2663      6420696E 
 2663      7400
 2664              	.LASF103:
 2665 0421 6164635F 		.ascii	"adc_ch\000"
 2665      636800
 2666              	.LASF19:
 2667 0428 54494D31 		.ascii	"TIM14_IRQn\000"
 2667      345F4952 
 2667      516E00
 2668              	.LASF13:
 2669 0433 444D4131 		.ascii	"DMA1_Channel2_3_IRQn\000"
 2669      5F436861 
 2669      6E6E656C 
 2669      325F335F 
ARM GAS  /tmp/ccKDiUbI.s 			page 78


 2669      4952516E 
 2670              	.LASF30:
 2671 0448 756E7369 		.ascii	"unsigned char\000"
 2671      676E6564 
 2671      20636861 
 2671      7200
 2672              	.LASF36:
 2673 0456 5F5F7569 		.ascii	"__uint32_t\000"
 2673      6E743332 
 2673      5F7400
 2674              	.LASF94:
 2675 0461 504F5745 		.ascii	"POWER_DOWN\000"
 2675      525F444F 
 2675      574E00
 2676              	.LASF101:
 2677 046c 54696D69 		.ascii	"TimingDelay_Decrement\000"
 2677      6E674465 
 2677      6C61795F 
 2677      44656372 
 2677      656D656E 
 2678              	.LASF45:
 2679 0482 49434552 		.ascii	"ICER\000"
 2679      00
 2680              	.LASF26:
 2681 0487 53504932 		.ascii	"SPI2_IRQn\000"
 2681      5F495251 
 2681      6E00
 2682              	.LASF102:
 2683 0491 45585449 		.ascii	"EXTI4_15_IRQHandler\000"
 2683      345F3135 
 2683      5F495251 
 2683      48616E64 
 2683      6C657200 
 2684              	.LASF29:
 2685 04a5 7369676E 		.ascii	"signed char\000"
 2685      65642063 
 2685      68617200 
 2686              	.LASF113:
 2687 04b1 7372632F 		.ascii	"src/main.c\000"
 2687      6D61696E 
 2687      2E6300
 2688              	.LASF34:
 2689 04bc 73686F72 		.ascii	"short unsigned int\000"
 2689      7420756E 
 2689      7369676E 
 2689      65642069 
 2689      6E7400
 2690              	.LASF112:
 2691 04cf 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 2691      43313120 
 2691      352E322E 
 2691      31203230 
 2691      31353132 
 2692 0502 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 2692      20726576 
 2692      6973696F 
 2692      6E203233 
ARM GAS  /tmp/ccKDiUbI.s 			page 79


 2692      31383438 
 2693 0535 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 2693      662D3220 
 2693      2D4F3020 
 2693      2D666F6D 
 2693      69742D66 
 2694 0568 66756E63 		.ascii	"function-sections\000"
 2694      74696F6E 
 2694      2D736563 
 2694      74696F6E 
 2694      7300
 2695              	.LASF117:
 2696 057a 6D61696E 		.ascii	"main\000"
 2696      00
 2697              	.LASF74:
 2698 057f 49464352 		.ascii	"IFCR\000"
 2698      00
 2699              	.LASF1:
 2700 0584 48617264 		.ascii	"HardFault_IRQn\000"
 2700      4661756C 
 2700      745F4952 
 2700      516E00
 2701              	.LASF47:
 2702 0593 49535052 		.ascii	"ISPR\000"
 2702      00
 2703              	.LASF92:
 2704 0598 42494153 		.ascii	"BIAS_OVERVOLTAGE\000"
 2704      5F4F5645 
 2704      52564F4C 
 2704      54414745 
 2704      00
 2705              	.LASF105:
 2706 05a9 74696D65 		.ascii	"timer_led\000"
 2706      725F6C65 
 2706      6400
 2707              	.LASF104:
 2708 05b3 7365715F 		.ascii	"seq_ready\000"
 2708      72656164 
 2708      7900
 2709              	.LASF108:
 2710 05bd 74696D65 		.ascii	"timer_standby\000"
 2710      725F7374 
 2710      616E6462 
 2710      7900
 2711              	.LASF81:
 2712 05cb 4C434B52 		.ascii	"LCKR\000"
 2712      00
 2713              	.LASF61:
 2714 05d0 4354524C 		.ascii	"CTRL\000"
 2714      00
 2715              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccKDiUbI.s 			page 80


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccKDiUbI.s:54     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccKDiUbI.s:58     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccKDiUbI.s:199    .text.NVIC_SetPriority:000000e4 $d
     /tmp/ccKDiUbI.s:205    .text.SysTick_Config:00000000 $t
     /tmp/ccKDiUbI.s:209    .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccKDiUbI.s:262    .text.SysTick_Config:00000040 $d
                            *COM*:0000000a adc_ch
     /tmp/ccKDiUbI.s:272    .bss.seq_ready:00000000 seq_ready
     /tmp/ccKDiUbI.s:273    .bss.seq_ready:00000000 $d
     /tmp/ccKDiUbI.s:279    .bss.timer_led:00000000 timer_led
     /tmp/ccKDiUbI.s:276    .bss.timer_led:00000000 $d
     /tmp/ccKDiUbI.s:285    .bss.overcurrent_shutdown:00000000 overcurrent_shutdown
     /tmp/ccKDiUbI.s:286    .bss.overcurrent_shutdown:00000000 $d
     /tmp/ccKDiUbI.s:292    .bss.wait_ms_var:00000000 wait_ms_var
     /tmp/ccKDiUbI.s:289    .bss.wait_ms_var:00000000 $d
                            *COM*:00000002 timer_standby
     /tmp/ccKDiUbI.s:299    .bss.timer_filters:00000000 timer_filters
     /tmp/ccKDiUbI.s:300    .bss.timer_filters:00000000 $d
     /tmp/ccKDiUbI.s:306    .data.mem_signal:00000000 mem_signal
     /tmp/ccKDiUbI.s:303    .data.mem_signal:00000000 $d
                            *COM*:00000004 p_signal
     /tmp/ccKDiUbI.s:549    .text.main:00000000 $t
     /tmp/ccKDiUbI.s:554    .text.main:00000000 main
     /tmp/ccKDiUbI.s:757    .text.main:0000012c $d
     /tmp/ccKDiUbI.s:768    .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccKDiUbI.s:773    .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccKDiUbI.s:844    .text.TimingDelay_Decrement:00000064 $d
     /tmp/ccKDiUbI.s:852    .text.EXTI4_15_IRQHandler:00000000 $t
     /tmp/ccKDiUbI.s:857    .text.EXTI4_15_IRQHandler:00000000 EXTI4_15_IRQHandler
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GPIO_Config
TIM_3_Init
MA32Circular_Reset
Update_TIM3_CH1
AdcConfig
DMAConfig
