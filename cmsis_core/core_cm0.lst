ARM GAS  /tmp/ccBRnU2t.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"core_cm0.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.2.1 20151202 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./src -I ./cmsis_boot -I ./cmsis_core
  18              	@ -imultilib armv6-m
  19              	@ -iprefix /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../lib/gcc/arm-none-eabi/5.2.1/
  20              	@ -isysroot /usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/bin/../arm-none-eabi
  21              	@ -D__USES_INITFINI__ -D STM32F030 cmsis_core/core_cm0.c -mcpu=cortex-m0
  22              	@ -mthumb -auxbase-strip cmsis_core/core_cm0.o -g -gdwarf-2 -O0 -Wall
  23              	@ -fomit-frame-pointer -fdata-sections -ffunction-sections -fverbose-asm
  24              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  25              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  26              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  27              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  28              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  29              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  30              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  31              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  32              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  33              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  34              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  35              	@ -fmerge-debug-strings -fomit-frame-pointer -fpeephole
  36              	@ -fprefetch-loop-arrays -freg-struct-return
  37              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  38              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  39              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  40              	@ -fsched-stalled-insns-dep -fsemantic-interposition -fshow-column
  41              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fstdarg-opt
  42              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  43              	@ -ftree-coalesce-vars -ftree-cselim -ftree-forwprop -ftree-loop-if-convert
  44              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  45              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-reassoc -ftree-scev-cprop
  46              	@ -funit-at-a-time -fverbose-asm -fzero-initialized-in-bss -mlittle-endian
  47              	@ -mpic-data-is-text-relative -msched-prolog -mthumb
  48              	@ -mvectorize-with-neon-quad
  49              	
  50              		.text
  51              	.Ltext0:
  52              		.cfi_sections	.debug_frame
  53              		.section	.text.__get_PSP,"ax",%progbits
  54              		.align	2
  55              		.global	__get_PSP
  56              		.code	16
  57              		.thumb_func
ARM GAS  /tmp/ccBRnU2t.s 			page 2


  58              		.type	__get_PSP, %function
  59              	__get_PSP:
  60              	.LFB0:
  61              		.file 1 "cmsis_core/core_cm0.c"
   1:cmsis_core/core_cm0.c **** /**************************************************************************//**
   2:cmsis_core/core_cm0.c ****  * @file     core_cm0.c
   3:cmsis_core/core_cm0.c ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Source File
   4:cmsis_core/core_cm0.c ****  * @version  V1.30
   5:cmsis_core/core_cm0.c ****  * @date     30. October 2009
   6:cmsis_core/core_cm0.c ****  *
   7:cmsis_core/core_cm0.c ****  * @note
   8:cmsis_core/core_cm0.c ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:cmsis_core/core_cm0.c ****  *
  10:cmsis_core/core_cm0.c ****  * @par
  11:cmsis_core/core_cm0.c ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:cmsis_core/core_cm0.c ****  * processor based microcontrollers.  This file can be freely distributed 
  13:cmsis_core/core_cm0.c ****  * within development tools that are supporting such ARM based processors. 
  14:cmsis_core/core_cm0.c ****  *
  15:cmsis_core/core_cm0.c ****  * @par
  16:cmsis_core/core_cm0.c ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:cmsis_core/core_cm0.c ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:cmsis_core/core_cm0.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:cmsis_core/core_cm0.c ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:cmsis_core/core_cm0.c ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:cmsis_core/core_cm0.c ****  *
  22:cmsis_core/core_cm0.c ****  ******************************************************************************/
  23:cmsis_core/core_cm0.c **** 
  24:cmsis_core/core_cm0.c **** #include <stdint.h>
  25:cmsis_core/core_cm0.c **** 
  26:cmsis_core/core_cm0.c **** /* define compiler specific symbols */
  27:cmsis_core/core_cm0.c **** #if defined ( __CC_ARM   )
  28:cmsis_core/core_cm0.c ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  29:cmsis_core/core_cm0.c ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  30:cmsis_core/core_cm0.c **** 
  31:cmsis_core/core_cm0.c **** #elif defined ( __ICCARM__ )
  32:cmsis_core/core_cm0.c ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  33:cmsis_core/core_cm0.c ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  34:cmsis_core/core_cm0.c **** 
  35:cmsis_core/core_cm0.c **** #elif defined   (  __GNUC__  )
  36:cmsis_core/core_cm0.c ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  37:cmsis_core/core_cm0.c ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  38:cmsis_core/core_cm0.c **** 
  39:cmsis_core/core_cm0.c **** #elif defined   (  __TASKING__  )
  40:cmsis_core/core_cm0.c ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  41:cmsis_core/core_cm0.c ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  42:cmsis_core/core_cm0.c **** 
  43:cmsis_core/core_cm0.c **** #endif
  44:cmsis_core/core_cm0.c **** 
  45:cmsis_core/core_cm0.c **** 
  46:cmsis_core/core_cm0.c **** /* ###################  Compiler specific Intrinsics  ########################### */
  47:cmsis_core/core_cm0.c **** 
  48:cmsis_core/core_cm0.c **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
  49:cmsis_core/core_cm0.c **** /* ARM armcc specific functions */
  50:cmsis_core/core_cm0.c **** 
  51:cmsis_core/core_cm0.c **** /**
  52:cmsis_core/core_cm0.c ****  * @brief  Return the Process Stack Pointer
  53:cmsis_core/core_cm0.c ****  *
ARM GAS  /tmp/ccBRnU2t.s 			page 3


  54:cmsis_core/core_cm0.c ****  * @return ProcessStackPointer
  55:cmsis_core/core_cm0.c ****  *
  56:cmsis_core/core_cm0.c ****  * Return the actual process stack pointer
  57:cmsis_core/core_cm0.c ****  */
  58:cmsis_core/core_cm0.c **** __ASM uint32_t __get_PSP(void)
  59:cmsis_core/core_cm0.c **** {
  60:cmsis_core/core_cm0.c ****   mrs r0, psp
  61:cmsis_core/core_cm0.c ****   bx lr
  62:cmsis_core/core_cm0.c **** }
  63:cmsis_core/core_cm0.c **** 
  64:cmsis_core/core_cm0.c **** /**
  65:cmsis_core/core_cm0.c ****  * @brief  Set the Process Stack Pointer
  66:cmsis_core/core_cm0.c ****  *
  67:cmsis_core/core_cm0.c ****  * @param  topOfProcStack  Process Stack Pointer
  68:cmsis_core/core_cm0.c ****  *
  69:cmsis_core/core_cm0.c ****  * Assign the value ProcessStackPointer to the MSP 
  70:cmsis_core/core_cm0.c ****  * (process stack pointer) Cortex processor register
  71:cmsis_core/core_cm0.c ****  */
  72:cmsis_core/core_cm0.c **** __ASM void __set_PSP(uint32_t topOfProcStack)
  73:cmsis_core/core_cm0.c **** {
  74:cmsis_core/core_cm0.c ****   msr psp, r0
  75:cmsis_core/core_cm0.c ****   bx lr
  76:cmsis_core/core_cm0.c **** }
  77:cmsis_core/core_cm0.c **** 
  78:cmsis_core/core_cm0.c **** /**
  79:cmsis_core/core_cm0.c ****  * @brief  Return the Main Stack Pointer
  80:cmsis_core/core_cm0.c ****  *
  81:cmsis_core/core_cm0.c ****  * @return Main Stack Pointer
  82:cmsis_core/core_cm0.c ****  *
  83:cmsis_core/core_cm0.c ****  * Return the current value of the MSP (main stack pointer)
  84:cmsis_core/core_cm0.c ****  * Cortex processor register
  85:cmsis_core/core_cm0.c ****  */
  86:cmsis_core/core_cm0.c **** __ASM uint32_t __get_MSP(void)
  87:cmsis_core/core_cm0.c **** {
  88:cmsis_core/core_cm0.c ****   mrs r0, msp
  89:cmsis_core/core_cm0.c ****   bx lr
  90:cmsis_core/core_cm0.c **** }
  91:cmsis_core/core_cm0.c **** 
  92:cmsis_core/core_cm0.c **** /**
  93:cmsis_core/core_cm0.c ****  * @brief  Set the Main Stack Pointer
  94:cmsis_core/core_cm0.c ****  *
  95:cmsis_core/core_cm0.c ****  * @param  topOfMainStack  Main Stack Pointer
  96:cmsis_core/core_cm0.c ****  *
  97:cmsis_core/core_cm0.c ****  * Assign the value mainStackPointer to the MSP 
  98:cmsis_core/core_cm0.c ****  * (main stack pointer) Cortex processor register
  99:cmsis_core/core_cm0.c ****  */
 100:cmsis_core/core_cm0.c **** __ASM void __set_MSP(uint32_t mainStackPointer)
 101:cmsis_core/core_cm0.c **** {
 102:cmsis_core/core_cm0.c ****   msr msp, r0
 103:cmsis_core/core_cm0.c ****   bx lr
 104:cmsis_core/core_cm0.c **** }
 105:cmsis_core/core_cm0.c **** 
 106:cmsis_core/core_cm0.c **** /**
 107:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in unsigned short value
 108:cmsis_core/core_cm0.c ****  *
 109:cmsis_core/core_cm0.c ****  * @param   value  value to reverse
 110:cmsis_core/core_cm0.c ****  * @return         reversed value
ARM GAS  /tmp/ccBRnU2t.s 			page 4


 111:cmsis_core/core_cm0.c ****  *
 112:cmsis_core/core_cm0.c ****  * Reverse byte order in unsigned short value
 113:cmsis_core/core_cm0.c ****  */
 114:cmsis_core/core_cm0.c **** __ASM uint32_t __REV16(uint16_t value)
 115:cmsis_core/core_cm0.c **** {
 116:cmsis_core/core_cm0.c ****   rev16 r0, r0
 117:cmsis_core/core_cm0.c ****   bx lr
 118:cmsis_core/core_cm0.c **** }
 119:cmsis_core/core_cm0.c **** 
 120:cmsis_core/core_cm0.c **** /**
 121:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 122:cmsis_core/core_cm0.c ****  *
 123:cmsis_core/core_cm0.c ****  * @param   value  value to reverse
 124:cmsis_core/core_cm0.c ****  * @return         reversed value
 125:cmsis_core/core_cm0.c ****  *
 126:cmsis_core/core_cm0.c ****  * Reverse byte order in signed short value with sign extension to integer
 127:cmsis_core/core_cm0.c ****  */
 128:cmsis_core/core_cm0.c **** __ASM int32_t __REVSH(int16_t value)
 129:cmsis_core/core_cm0.c **** {
 130:cmsis_core/core_cm0.c ****   revsh r0, r0
 131:cmsis_core/core_cm0.c ****   bx lr
 132:cmsis_core/core_cm0.c **** }
 133:cmsis_core/core_cm0.c **** 
 134:cmsis_core/core_cm0.c **** 
 135:cmsis_core/core_cm0.c **** #if (__ARMCC_VERSION < 400000)
 136:cmsis_core/core_cm0.c **** 
 137:cmsis_core/core_cm0.c **** 
 138:cmsis_core/core_cm0.c **** /**
 139:cmsis_core/core_cm0.c ****  * @brief  Return the Priority Mask value
 140:cmsis_core/core_cm0.c ****  *
 141:cmsis_core/core_cm0.c ****  * @return PriMask
 142:cmsis_core/core_cm0.c ****  *
 143:cmsis_core/core_cm0.c ****  * Return state of the priority mask bit from the priority mask register
 144:cmsis_core/core_cm0.c ****  */
 145:cmsis_core/core_cm0.c **** __ASM uint32_t __get_PRIMASK(void)
 146:cmsis_core/core_cm0.c **** {
 147:cmsis_core/core_cm0.c ****   mrs r0, primask
 148:cmsis_core/core_cm0.c ****   bx lr
 149:cmsis_core/core_cm0.c **** }
 150:cmsis_core/core_cm0.c **** 
 151:cmsis_core/core_cm0.c **** /**
 152:cmsis_core/core_cm0.c ****  * @brief  Set the Priority Mask value
 153:cmsis_core/core_cm0.c ****  *
 154:cmsis_core/core_cm0.c ****  * @param  priMask  PriMask
 155:cmsis_core/core_cm0.c ****  *
 156:cmsis_core/core_cm0.c ****  * Set the priority mask bit in the priority mask register
 157:cmsis_core/core_cm0.c ****  */
 158:cmsis_core/core_cm0.c **** __ASM void __set_PRIMASK(uint32_t priMask)
 159:cmsis_core/core_cm0.c **** {
 160:cmsis_core/core_cm0.c ****   msr primask, r0
 161:cmsis_core/core_cm0.c ****   bx lr
 162:cmsis_core/core_cm0.c **** }
 163:cmsis_core/core_cm0.c **** 
 164:cmsis_core/core_cm0.c **** /**
 165:cmsis_core/core_cm0.c ****  * @brief  Return the Control Register value
 166:cmsis_core/core_cm0.c ****  * 
 167:cmsis_core/core_cm0.c ****  * @return Control value
ARM GAS  /tmp/ccBRnU2t.s 			page 5


 168:cmsis_core/core_cm0.c ****  *
 169:cmsis_core/core_cm0.c ****  * Return the content of the control register
 170:cmsis_core/core_cm0.c ****  */
 171:cmsis_core/core_cm0.c **** __ASM uint32_t __get_CONTROL(void)
 172:cmsis_core/core_cm0.c **** {
 173:cmsis_core/core_cm0.c ****   mrs r0, control
 174:cmsis_core/core_cm0.c ****   bx lr
 175:cmsis_core/core_cm0.c **** }
 176:cmsis_core/core_cm0.c **** 
 177:cmsis_core/core_cm0.c **** /**
 178:cmsis_core/core_cm0.c ****  * @brief  Set the Control Register value
 179:cmsis_core/core_cm0.c ****  *
 180:cmsis_core/core_cm0.c ****  * @param  control  Control value
 181:cmsis_core/core_cm0.c ****  *
 182:cmsis_core/core_cm0.c ****  * Set the control register
 183:cmsis_core/core_cm0.c ****  */
 184:cmsis_core/core_cm0.c **** __ASM void __set_CONTROL(uint32_t control)
 185:cmsis_core/core_cm0.c **** {
 186:cmsis_core/core_cm0.c ****   msr control, r0
 187:cmsis_core/core_cm0.c ****   bx lr
 188:cmsis_core/core_cm0.c **** }
 189:cmsis_core/core_cm0.c **** 
 190:cmsis_core/core_cm0.c **** #endif /* __ARMCC_VERSION  */ 
 191:cmsis_core/core_cm0.c **** 
 192:cmsis_core/core_cm0.c **** 
 193:cmsis_core/core_cm0.c **** 
 194:cmsis_core/core_cm0.c **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 195:cmsis_core/core_cm0.c **** /* IAR iccarm specific functions */
 196:cmsis_core/core_cm0.c **** #pragma diag_suppress=Pe940
 197:cmsis_core/core_cm0.c **** 
 198:cmsis_core/core_cm0.c **** /**
 199:cmsis_core/core_cm0.c ****  * @brief  Return the Process Stack Pointer
 200:cmsis_core/core_cm0.c ****  *
 201:cmsis_core/core_cm0.c ****  * @return ProcessStackPointer
 202:cmsis_core/core_cm0.c ****  *
 203:cmsis_core/core_cm0.c ****  * Return the actual process stack pointer
 204:cmsis_core/core_cm0.c ****  */
 205:cmsis_core/core_cm0.c **** uint32_t __get_PSP(void)
 206:cmsis_core/core_cm0.c **** {
 207:cmsis_core/core_cm0.c ****   __ASM("mrs r0, psp");
 208:cmsis_core/core_cm0.c ****   __ASM("bx lr");
 209:cmsis_core/core_cm0.c **** }
 210:cmsis_core/core_cm0.c **** 
 211:cmsis_core/core_cm0.c **** /**
 212:cmsis_core/core_cm0.c ****  * @brief  Set the Process Stack Pointer
 213:cmsis_core/core_cm0.c ****  *
 214:cmsis_core/core_cm0.c ****  * @param  topOfProcStack  Process Stack Pointer
 215:cmsis_core/core_cm0.c ****  *
 216:cmsis_core/core_cm0.c ****  * Assign the value ProcessStackPointer to the MSP 
 217:cmsis_core/core_cm0.c ****  * (process stack pointer) Cortex processor register
 218:cmsis_core/core_cm0.c ****  */
 219:cmsis_core/core_cm0.c **** void __set_PSP(uint32_t topOfProcStack)
 220:cmsis_core/core_cm0.c **** {
 221:cmsis_core/core_cm0.c ****   __ASM("msr psp, r0");
 222:cmsis_core/core_cm0.c ****   __ASM("bx lr");
 223:cmsis_core/core_cm0.c **** }
 224:cmsis_core/core_cm0.c **** 
ARM GAS  /tmp/ccBRnU2t.s 			page 6


 225:cmsis_core/core_cm0.c **** /**
 226:cmsis_core/core_cm0.c ****  * @brief  Return the Main Stack Pointer
 227:cmsis_core/core_cm0.c ****  *
 228:cmsis_core/core_cm0.c ****  * @return Main Stack Pointer
 229:cmsis_core/core_cm0.c ****  *
 230:cmsis_core/core_cm0.c ****  * Return the current value of the MSP (main stack pointer)
 231:cmsis_core/core_cm0.c ****  * Cortex processor register
 232:cmsis_core/core_cm0.c ****  */
 233:cmsis_core/core_cm0.c **** uint32_t __get_MSP(void)
 234:cmsis_core/core_cm0.c **** {
 235:cmsis_core/core_cm0.c ****   __ASM("mrs r0, msp");
 236:cmsis_core/core_cm0.c ****   __ASM("bx lr");
 237:cmsis_core/core_cm0.c **** }
 238:cmsis_core/core_cm0.c **** 
 239:cmsis_core/core_cm0.c **** /**
 240:cmsis_core/core_cm0.c ****  * @brief  Set the Main Stack Pointer
 241:cmsis_core/core_cm0.c ****  *
 242:cmsis_core/core_cm0.c ****  * @param  topOfMainStack  Main Stack Pointer
 243:cmsis_core/core_cm0.c ****  *
 244:cmsis_core/core_cm0.c ****  * Assign the value mainStackPointer to the MSP 
 245:cmsis_core/core_cm0.c ****  * (main stack pointer) Cortex processor register
 246:cmsis_core/core_cm0.c ****  */
 247:cmsis_core/core_cm0.c **** void __set_MSP(uint32_t topOfMainStack)
 248:cmsis_core/core_cm0.c **** {
 249:cmsis_core/core_cm0.c ****   __ASM("msr msp, r0");
 250:cmsis_core/core_cm0.c ****   __ASM("bx lr");
 251:cmsis_core/core_cm0.c **** }
 252:cmsis_core/core_cm0.c **** 
 253:cmsis_core/core_cm0.c **** /**
 254:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in unsigned short value
 255:cmsis_core/core_cm0.c ****  *
 256:cmsis_core/core_cm0.c ****  * @param  value  value to reverse
 257:cmsis_core/core_cm0.c ****  * @return        reversed value
 258:cmsis_core/core_cm0.c ****  *
 259:cmsis_core/core_cm0.c ****  * Reverse byte order in unsigned short value
 260:cmsis_core/core_cm0.c ****  */
 261:cmsis_core/core_cm0.c **** uint32_t __REV16(uint16_t value)
 262:cmsis_core/core_cm0.c **** {
 263:cmsis_core/core_cm0.c ****   __ASM("rev16 r0, r0");
 264:cmsis_core/core_cm0.c ****   __ASM("bx lr");
 265:cmsis_core/core_cm0.c **** }
 266:cmsis_core/core_cm0.c **** 
 267:cmsis_core/core_cm0.c **** 
 268:cmsis_core/core_cm0.c **** #pragma diag_default=Pe940
 269:cmsis_core/core_cm0.c **** 
 270:cmsis_core/core_cm0.c **** 
 271:cmsis_core/core_cm0.c **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 272:cmsis_core/core_cm0.c **** /* GNU gcc specific functions */
 273:cmsis_core/core_cm0.c **** 
 274:cmsis_core/core_cm0.c **** /**
 275:cmsis_core/core_cm0.c ****  * @brief  Return the Process Stack Pointer
 276:cmsis_core/core_cm0.c ****  *
 277:cmsis_core/core_cm0.c ****  * @return ProcessStackPointer
 278:cmsis_core/core_cm0.c ****  *
 279:cmsis_core/core_cm0.c ****  * Return the actual process stack pointer
 280:cmsis_core/core_cm0.c ****  */
 281:cmsis_core/core_cm0.c **** uint32_t __get_PSP(void) __attribute__( ( naked ) );
ARM GAS  /tmp/ccBRnU2t.s 			page 7


 282:cmsis_core/core_cm0.c **** uint32_t __get_PSP(void)
 283:cmsis_core/core_cm0.c **** {
  62              		.loc 1 283 0
  63              		.cfi_startproc
 284:cmsis_core/core_cm0.c ****   uint32_t result=0;
 285:cmsis_core/core_cm0.c **** 
 286:cmsis_core/core_cm0.c ****   __ASM volatile ("MRS %0, psp\n\t" 
  64              		.loc 1 286 0
  65              		.syntax divided
  66              	@ 286 "cmsis_core/core_cm0.c" 1
  67 0000 EFF30983 		MRS r3, psp	@ result
  68 0004 181C     		MOV r0, r3 	@ result
  69 0006 7047     		BX  lr     
  70              		
  71              	@ 0 "" 2
  72              		.thumb
  73              		.syntax unified
  74 0008 1C00     		movs	r4, r3	@ result, result
 287:cmsis_core/core_cm0.c ****                   "MOV r0, %0 \n\t"
 288:cmsis_core/core_cm0.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 289:cmsis_core/core_cm0.c ****   return(result);
  75              		.loc 1 289 0
  76 000a 2300     		movs	r3, r4	@ D.4285, result
 290:cmsis_core/core_cm0.c **** }
  77              		.loc 1 290 0
  78 000c 1800     		movs	r0, r3	@, <retval>
  79              		.cfi_endproc
  80              	.LFE0:
  81              		.size	__get_PSP, .-__get_PSP
  82 000e C046     		.section	.text.__set_PSP,"ax",%progbits
  83              		.align	2
  84              		.global	__set_PSP
  85              		.code	16
  86              		.thumb_func
  87              		.type	__set_PSP, %function
  88              	__set_PSP:
  89              	.LFB1:
 291:cmsis_core/core_cm0.c **** 
 292:cmsis_core/core_cm0.c **** /**
 293:cmsis_core/core_cm0.c ****  * @brief  Set the Process Stack Pointer
 294:cmsis_core/core_cm0.c ****  *
 295:cmsis_core/core_cm0.c ****  * @param  topOfProcStack  Process Stack Pointer
 296:cmsis_core/core_cm0.c ****  *
 297:cmsis_core/core_cm0.c ****  * Assign the value ProcessStackPointer to the MSP 
 298:cmsis_core/core_cm0.c ****  * (process stack pointer) Cortex processor register
 299:cmsis_core/core_cm0.c ****  */
 300:cmsis_core/core_cm0.c **** void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
 301:cmsis_core/core_cm0.c **** void __set_PSP(uint32_t topOfProcStack)
 302:cmsis_core/core_cm0.c **** {
  90              		.loc 1 302 0
  91              		.cfi_startproc
  92 0000 0300     		movs	r3, r0	@ topOfProcStack, topOfProcStack
 303:cmsis_core/core_cm0.c ****   __ASM volatile ("MSR psp, %0\n\t"
  93              		.loc 1 303 0
  94              		.syntax divided
  95              	@ 303 "cmsis_core/core_cm0.c" 1
  96 0002 83F30988 		MSR psp, r3	@ topOfProcStack
ARM GAS  /tmp/ccBRnU2t.s 			page 8


  97 0006 7047     		BX  lr     
  98              		
  99              	@ 0 "" 2
 304:cmsis_core/core_cm0.c ****                   "BX  lr     \n\t" : : "r" (topOfProcStack) );
 305:cmsis_core/core_cm0.c **** }
 100              		.loc 1 305 0
 101              		.thumb
 102              		.syntax unified
 103 0008 C046     		nop
 104              		.cfi_endproc
 105              	.LFE1:
 106              		.size	__set_PSP, .-__set_PSP
 107              		.section	.text.__get_MSP,"ax",%progbits
 108              		.align	2
 109              		.global	__get_MSP
 110              		.code	16
 111              		.thumb_func
 112              		.type	__get_MSP, %function
 113              	__get_MSP:
 114              	.LFB2:
 306:cmsis_core/core_cm0.c **** 
 307:cmsis_core/core_cm0.c **** /**
 308:cmsis_core/core_cm0.c ****  * @brief  Return the Main Stack Pointer
 309:cmsis_core/core_cm0.c ****  *
 310:cmsis_core/core_cm0.c ****  * @return Main Stack Pointer
 311:cmsis_core/core_cm0.c ****  *
 312:cmsis_core/core_cm0.c ****  * Return the current value of the MSP (main stack pointer)
 313:cmsis_core/core_cm0.c ****  * Cortex processor register
 314:cmsis_core/core_cm0.c ****  */
 315:cmsis_core/core_cm0.c **** uint32_t __get_MSP(void) __attribute__( ( naked ) );
 316:cmsis_core/core_cm0.c **** uint32_t __get_MSP(void)
 317:cmsis_core/core_cm0.c **** {
 115              		.loc 1 317 0
 116              		.cfi_startproc
 318:cmsis_core/core_cm0.c ****   uint32_t result=0;
 319:cmsis_core/core_cm0.c **** 
 320:cmsis_core/core_cm0.c ****   __ASM volatile ("MRS %0, msp\n\t" 
 117              		.loc 1 320 0
 118              		.syntax divided
 119              	@ 320 "cmsis_core/core_cm0.c" 1
 120 0000 EFF30883 		MRS r3, msp	@ result
 121 0004 181C     		MOV r0, r3 	@ result
 122 0006 7047     		BX  lr     
 123              		
 124              	@ 0 "" 2
 125              		.thumb
 126              		.syntax unified
 127 0008 1C00     		movs	r4, r3	@ result, result
 321:cmsis_core/core_cm0.c ****                   "MOV r0, %0 \n\t"
 322:cmsis_core/core_cm0.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 323:cmsis_core/core_cm0.c ****   return(result);
 128              		.loc 1 323 0
 129 000a 2300     		movs	r3, r4	@ D.4287, result
 324:cmsis_core/core_cm0.c **** }
 130              		.loc 1 324 0
 131 000c 1800     		movs	r0, r3	@, <retval>
 132              		.cfi_endproc
ARM GAS  /tmp/ccBRnU2t.s 			page 9


 133              	.LFE2:
 134              		.size	__get_MSP, .-__get_MSP
 135 000e C046     		.section	.text.__set_MSP,"ax",%progbits
 136              		.align	2
 137              		.global	__set_MSP
 138              		.code	16
 139              		.thumb_func
 140              		.type	__set_MSP, %function
 141              	__set_MSP:
 142              	.LFB3:
 325:cmsis_core/core_cm0.c **** 
 326:cmsis_core/core_cm0.c **** /**
 327:cmsis_core/core_cm0.c ****  * @brief  Set the Main Stack Pointer
 328:cmsis_core/core_cm0.c ****  *
 329:cmsis_core/core_cm0.c ****  * @param  topOfMainStack  Main Stack Pointer
 330:cmsis_core/core_cm0.c ****  *
 331:cmsis_core/core_cm0.c ****  * Assign the value mainStackPointer to the MSP 
 332:cmsis_core/core_cm0.c ****  * (main stack pointer) Cortex processor register
 333:cmsis_core/core_cm0.c ****  */
 334:cmsis_core/core_cm0.c **** void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
 335:cmsis_core/core_cm0.c **** void __set_MSP(uint32_t topOfMainStack)
 336:cmsis_core/core_cm0.c **** {
 143              		.loc 1 336 0
 144              		.cfi_startproc
 145 0000 0300     		movs	r3, r0	@ topOfMainStack, topOfMainStack
 337:cmsis_core/core_cm0.c ****   __ASM volatile ("MSR msp, %0\n\t"
 146              		.loc 1 337 0
 147              		.syntax divided
 148              	@ 337 "cmsis_core/core_cm0.c" 1
 149 0002 83F30888 		MSR msp, r3	@ topOfMainStack
 150 0006 7047     		BX  lr     
 151              		
 152              	@ 0 "" 2
 338:cmsis_core/core_cm0.c ****                   "BX  lr     \n\t" : : "r" (topOfMainStack) );
 339:cmsis_core/core_cm0.c **** }
 153              		.loc 1 339 0
 154              		.thumb
 155              		.syntax unified
 156 0008 C046     		nop
 157              		.cfi_endproc
 158              	.LFE3:
 159              		.size	__set_MSP, .-__set_MSP
 160              		.section	.text.__get_PRIMASK,"ax",%progbits
 161              		.align	2
 162              		.global	__get_PRIMASK
 163              		.code	16
 164              		.thumb_func
 165              		.type	__get_PRIMASK, %function
 166              	__get_PRIMASK:
 167              	.LFB4:
 340:cmsis_core/core_cm0.c **** 
 341:cmsis_core/core_cm0.c **** 
 342:cmsis_core/core_cm0.c **** /**
 343:cmsis_core/core_cm0.c ****  * @brief  Return the Priority Mask value
 344:cmsis_core/core_cm0.c ****  *
 345:cmsis_core/core_cm0.c ****  * @return PriMask
 346:cmsis_core/core_cm0.c ****  *
ARM GAS  /tmp/ccBRnU2t.s 			page 10


 347:cmsis_core/core_cm0.c ****  * Return state of the priority mask bit from the priority mask register
 348:cmsis_core/core_cm0.c ****  */
 349:cmsis_core/core_cm0.c **** uint32_t __get_PRIMASK(void)
 350:cmsis_core/core_cm0.c **** {
 168              		.loc 1 350 0
 169              		.cfi_startproc
 170 0000 82B0     		sub	sp, sp, #8	@,,
 171              	.LCFI0:
 172              		.cfi_def_cfa_offset 8
 351:cmsis_core/core_cm0.c ****   uint32_t result=0;
 173              		.loc 1 351 0
 174 0002 0023     		movs	r3, #0	@ tmp112,
 175 0004 0193     		str	r3, [sp, #4]	@ tmp112, result
 352:cmsis_core/core_cm0.c **** 
 353:cmsis_core/core_cm0.c ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 176              		.loc 1 353 0
 177              		.syntax divided
 178              	@ 353 "cmsis_core/core_cm0.c" 1
 179 0006 EFF31083 		MRS r3, primask	@ result
 180              	@ 0 "" 2
 181              		.thumb
 182              		.syntax unified
 183 000a 0193     		str	r3, [sp, #4]	@ result, result
 354:cmsis_core/core_cm0.c ****   return(result);
 184              		.loc 1 354 0
 185 000c 019B     		ldr	r3, [sp, #4]	@ D.4289, result
 355:cmsis_core/core_cm0.c **** }
 186              		.loc 1 355 0
 187 000e 1800     		movs	r0, r3	@, <retval>
 188 0010 02B0     		add	sp, sp, #8	@,,
 189              		@ sp needed	@
 190 0012 7047     		bx	lr
 191              		.cfi_endproc
 192              	.LFE4:
 193              		.size	__get_PRIMASK, .-__get_PRIMASK
 194              		.section	.text.__set_PRIMASK,"ax",%progbits
 195              		.align	2
 196              		.global	__set_PRIMASK
 197              		.code	16
 198              		.thumb_func
 199              		.type	__set_PRIMASK, %function
 200              	__set_PRIMASK:
 201              	.LFB5:
 356:cmsis_core/core_cm0.c **** 
 357:cmsis_core/core_cm0.c **** /**
 358:cmsis_core/core_cm0.c ****  * @brief  Set the Priority Mask value
 359:cmsis_core/core_cm0.c ****  *
 360:cmsis_core/core_cm0.c ****  * @param  priMask  PriMask
 361:cmsis_core/core_cm0.c ****  *
 362:cmsis_core/core_cm0.c ****  * Set the priority mask bit in the priority mask register
 363:cmsis_core/core_cm0.c ****  */
 364:cmsis_core/core_cm0.c **** void __set_PRIMASK(uint32_t priMask)
 365:cmsis_core/core_cm0.c **** {
 202              		.loc 1 365 0
 203              		.cfi_startproc
 204 0000 82B0     		sub	sp, sp, #8	@,,
 205              	.LCFI1:
ARM GAS  /tmp/ccBRnU2t.s 			page 11


 206              		.cfi_def_cfa_offset 8
 207 0002 0190     		str	r0, [sp, #4]	@ priMask, priMask
 366:cmsis_core/core_cm0.c ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 208              		.loc 1 366 0
 209 0004 019B     		ldr	r3, [sp, #4]	@ tmp110, priMask
 210              		.syntax divided
 211              	@ 366 "cmsis_core/core_cm0.c" 1
 212 0006 83F31088 		MSR primask, r3	@ tmp110
 213              	@ 0 "" 2
 367:cmsis_core/core_cm0.c **** }
 214              		.loc 1 367 0
 215              		.thumb
 216              		.syntax unified
 217 000a C046     		nop
 218 000c 02B0     		add	sp, sp, #8	@,,
 219              		@ sp needed	@
 220 000e 7047     		bx	lr
 221              		.cfi_endproc
 222              	.LFE5:
 223              		.size	__set_PRIMASK, .-__set_PRIMASK
 224              		.section	.text.__get_CONTROL,"ax",%progbits
 225              		.align	2
 226              		.global	__get_CONTROL
 227              		.code	16
 228              		.thumb_func
 229              		.type	__get_CONTROL, %function
 230              	__get_CONTROL:
 231              	.LFB6:
 368:cmsis_core/core_cm0.c **** 
 369:cmsis_core/core_cm0.c **** /**
 370:cmsis_core/core_cm0.c ****  * @brief  Return the Control Register value
 371:cmsis_core/core_cm0.c **** * 
 372:cmsis_core/core_cm0.c **** *  @return Control value
 373:cmsis_core/core_cm0.c ****  *
 374:cmsis_core/core_cm0.c ****  * Return the content of the control register
 375:cmsis_core/core_cm0.c ****  */
 376:cmsis_core/core_cm0.c **** uint32_t __get_CONTROL(void)
 377:cmsis_core/core_cm0.c **** {
 232              		.loc 1 377 0
 233              		.cfi_startproc
 234 0000 82B0     		sub	sp, sp, #8	@,,
 235              	.LCFI2:
 236              		.cfi_def_cfa_offset 8
 378:cmsis_core/core_cm0.c ****   uint32_t result=0;
 237              		.loc 1 378 0
 238 0002 0023     		movs	r3, #0	@ tmp112,
 239 0004 0193     		str	r3, [sp, #4]	@ tmp112, result
 379:cmsis_core/core_cm0.c **** 
 380:cmsis_core/core_cm0.c ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 240              		.loc 1 380 0
 241              		.syntax divided
 242              	@ 380 "cmsis_core/core_cm0.c" 1
 243 0006 EFF31483 		MRS r3, control	@ result
 244              	@ 0 "" 2
 245              		.thumb
 246              		.syntax unified
 247 000a 0193     		str	r3, [sp, #4]	@ result, result
ARM GAS  /tmp/ccBRnU2t.s 			page 12


 381:cmsis_core/core_cm0.c ****   return(result);
 248              		.loc 1 381 0
 249 000c 019B     		ldr	r3, [sp, #4]	@ D.4291, result
 382:cmsis_core/core_cm0.c **** }
 250              		.loc 1 382 0
 251 000e 1800     		movs	r0, r3	@, <retval>
 252 0010 02B0     		add	sp, sp, #8	@,,
 253              		@ sp needed	@
 254 0012 7047     		bx	lr
 255              		.cfi_endproc
 256              	.LFE6:
 257              		.size	__get_CONTROL, .-__get_CONTROL
 258              		.section	.text.__set_CONTROL,"ax",%progbits
 259              		.align	2
 260              		.global	__set_CONTROL
 261              		.code	16
 262              		.thumb_func
 263              		.type	__set_CONTROL, %function
 264              	__set_CONTROL:
 265              	.LFB7:
 383:cmsis_core/core_cm0.c **** 
 384:cmsis_core/core_cm0.c **** /**
 385:cmsis_core/core_cm0.c ****  * @brief  Set the Control Register value
 386:cmsis_core/core_cm0.c ****  *
 387:cmsis_core/core_cm0.c ****  * @param  control  Control value
 388:cmsis_core/core_cm0.c ****  *
 389:cmsis_core/core_cm0.c ****  * Set the control register
 390:cmsis_core/core_cm0.c ****  */
 391:cmsis_core/core_cm0.c **** void __set_CONTROL(uint32_t control)
 392:cmsis_core/core_cm0.c **** {
 266              		.loc 1 392 0
 267              		.cfi_startproc
 268 0000 82B0     		sub	sp, sp, #8	@,,
 269              	.LCFI3:
 270              		.cfi_def_cfa_offset 8
 271 0002 0190     		str	r0, [sp, #4]	@ control, control
 393:cmsis_core/core_cm0.c ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 272              		.loc 1 393 0
 273 0004 019B     		ldr	r3, [sp, #4]	@ tmp110, control
 274              		.syntax divided
 275              	@ 393 "cmsis_core/core_cm0.c" 1
 276 0006 83F31488 		MSR control, r3	@ tmp110
 277              	@ 0 "" 2
 394:cmsis_core/core_cm0.c **** }
 278              		.loc 1 394 0
 279              		.thumb
 280              		.syntax unified
 281 000a C046     		nop
 282 000c 02B0     		add	sp, sp, #8	@,,
 283              		@ sp needed	@
 284 000e 7047     		bx	lr
 285              		.cfi_endproc
 286              	.LFE7:
 287              		.size	__set_CONTROL, .-__set_CONTROL
 288              		.section	.text.__REV,"ax",%progbits
 289              		.align	2
 290              		.global	__REV
ARM GAS  /tmp/ccBRnU2t.s 			page 13


 291              		.code	16
 292              		.thumb_func
 293              		.type	__REV, %function
 294              	__REV:
 295              	.LFB8:
 395:cmsis_core/core_cm0.c **** 
 396:cmsis_core/core_cm0.c **** 
 397:cmsis_core/core_cm0.c **** /**
 398:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in integer value
 399:cmsis_core/core_cm0.c ****  *
 400:cmsis_core/core_cm0.c ****  * @param  value  value to reverse
 401:cmsis_core/core_cm0.c ****  * @return        reversed value
 402:cmsis_core/core_cm0.c ****  *
 403:cmsis_core/core_cm0.c ****  * Reverse byte order in integer value
 404:cmsis_core/core_cm0.c ****  */
 405:cmsis_core/core_cm0.c **** uint32_t __REV(uint32_t value)
 406:cmsis_core/core_cm0.c **** {
 296              		.loc 1 406 0
 297              		.cfi_startproc
 298 0000 84B0     		sub	sp, sp, #16	@,,
 299              	.LCFI4:
 300              		.cfi_def_cfa_offset 16
 301 0002 0190     		str	r0, [sp, #4]	@ value, value
 407:cmsis_core/core_cm0.c ****   uint32_t result=0;
 302              		.loc 1 407 0
 303 0004 0023     		movs	r3, #0	@ tmp112,
 304 0006 0393     		str	r3, [sp, #12]	@ tmp112, result
 408:cmsis_core/core_cm0.c ****   
 409:cmsis_core/core_cm0.c ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 305              		.loc 1 409 0
 306 0008 019B     		ldr	r3, [sp, #4]	@ tmp114, value
 307              		.syntax divided
 308              	@ 409 "cmsis_core/core_cm0.c" 1
 309 000a 1BBA     		rev r3, r3	@ result, tmp114
 310              	@ 0 "" 2
 311              		.thumb
 312              		.syntax unified
 313 000c 0393     		str	r3, [sp, #12]	@ result, result
 410:cmsis_core/core_cm0.c ****   return(result);
 314              		.loc 1 410 0
 315 000e 039B     		ldr	r3, [sp, #12]	@ D.4293, result
 411:cmsis_core/core_cm0.c **** }
 316              		.loc 1 411 0
 317 0010 1800     		movs	r0, r3	@, <retval>
 318 0012 04B0     		add	sp, sp, #16	@,,
 319              		@ sp needed	@
 320 0014 7047     		bx	lr
 321              		.cfi_endproc
 322              	.LFE8:
 323              		.size	__REV, .-__REV
 324 0016 C046     		.section	.text.__REV16,"ax",%progbits
 325              		.align	2
 326              		.global	__REV16
 327              		.code	16
 328              		.thumb_func
 329              		.type	__REV16, %function
 330              	__REV16:
ARM GAS  /tmp/ccBRnU2t.s 			page 14


 331              	.LFB9:
 412:cmsis_core/core_cm0.c **** 
 413:cmsis_core/core_cm0.c **** /**
 414:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in unsigned short value
 415:cmsis_core/core_cm0.c ****  *
 416:cmsis_core/core_cm0.c ****  * @param  value  value to reverse
 417:cmsis_core/core_cm0.c ****  * @return        reversed value
 418:cmsis_core/core_cm0.c ****  *
 419:cmsis_core/core_cm0.c ****  * Reverse byte order in unsigned short value
 420:cmsis_core/core_cm0.c ****  */
 421:cmsis_core/core_cm0.c **** uint32_t __REV16(uint16_t value)
 422:cmsis_core/core_cm0.c **** {
 332              		.loc 1 422 0
 333              		.cfi_startproc
 334 0000 84B0     		sub	sp, sp, #16	@,,
 335              	.LCFI5:
 336              		.cfi_def_cfa_offset 16
 337 0002 0200     		movs	r2, r0	@ tmp112, value
 338 0004 6B46     		mov	r3, sp	@ tmp120,
 339 0006 0633     		adds	r3, r3, #6	@ tmp113,
 340 0008 1A80     		strh	r2, [r3]	@ tmp114, value
 423:cmsis_core/core_cm0.c ****   uint32_t result=0;
 341              		.loc 1 423 0
 342 000a 0023     		movs	r3, #0	@ tmp115,
 343 000c 0393     		str	r3, [sp, #12]	@ tmp115, result
 424:cmsis_core/core_cm0.c ****   
 425:cmsis_core/core_cm0.c ****   __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 344              		.loc 1 425 0
 345 000e 6B46     		mov	r3, sp	@ tmp121,
 346 0010 0633     		adds	r3, r3, #6	@ tmp117,
 347 0012 1B88     		ldrh	r3, [r3]	@ tmp118, value
 348              		.syntax divided
 349              	@ 425 "cmsis_core/core_cm0.c" 1
 350 0014 5BBA     		rev16 r3, r3	@ result, tmp118
 351              	@ 0 "" 2
 352              		.thumb
 353              		.syntax unified
 354 0016 0393     		str	r3, [sp, #12]	@ result, result
 426:cmsis_core/core_cm0.c ****   return(result);
 355              		.loc 1 426 0
 356 0018 039B     		ldr	r3, [sp, #12]	@ D.4295, result
 427:cmsis_core/core_cm0.c **** }
 357              		.loc 1 427 0
 358 001a 1800     		movs	r0, r3	@, <retval>
 359 001c 04B0     		add	sp, sp, #16	@,,
 360              		@ sp needed	@
 361 001e 7047     		bx	lr
 362              		.cfi_endproc
 363              	.LFE9:
 364              		.size	__REV16, .-__REV16
 365              		.section	.text.__REVSH,"ax",%progbits
 366              		.align	2
 367              		.global	__REVSH
 368              		.code	16
 369              		.thumb_func
 370              		.type	__REVSH, %function
 371              	__REVSH:
ARM GAS  /tmp/ccBRnU2t.s 			page 15


 372              	.LFB10:
 428:cmsis_core/core_cm0.c **** 
 429:cmsis_core/core_cm0.c **** /**
 430:cmsis_core/core_cm0.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 431:cmsis_core/core_cm0.c ****  *
 432:cmsis_core/core_cm0.c ****  * @param  value  value to reverse
 433:cmsis_core/core_cm0.c ****  * @return        reversed value
 434:cmsis_core/core_cm0.c ****  *
 435:cmsis_core/core_cm0.c ****  * Reverse byte order in signed short value with sign extension to integer
 436:cmsis_core/core_cm0.c ****  */
 437:cmsis_core/core_cm0.c **** int32_t __REVSH(int16_t value)
 438:cmsis_core/core_cm0.c **** {
 373              		.loc 1 438 0
 374              		.cfi_startproc
 375 0000 84B0     		sub	sp, sp, #16	@,,
 376              	.LCFI6:
 377              		.cfi_def_cfa_offset 16
 378 0002 0200     		movs	r2, r0	@ tmp112, value
 379 0004 6B46     		mov	r3, sp	@ tmp120,
 380 0006 0633     		adds	r3, r3, #6	@ tmp113,
 381 0008 1A80     		strh	r2, [r3]	@ tmp114, value
 439:cmsis_core/core_cm0.c ****   uint32_t result=0;
 382              		.loc 1 439 0
 383 000a 0023     		movs	r3, #0	@ tmp115,
 384 000c 0393     		str	r3, [sp, #12]	@ tmp115, result
 440:cmsis_core/core_cm0.c ****   
 441:cmsis_core/core_cm0.c ****   __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 385              		.loc 1 441 0
 386 000e 6B46     		mov	r3, sp	@ tmp121,
 387 0010 0633     		adds	r3, r3, #6	@ tmp117,
 388 0012 1B88     		ldrh	r3, [r3]	@ tmp118, value
 389              		.syntax divided
 390              	@ 441 "cmsis_core/core_cm0.c" 1
 391 0014 DBBA     		revsh r3, r3	@ result, tmp118
 392              	@ 0 "" 2
 393              		.thumb
 394              		.syntax unified
 395 0016 0393     		str	r3, [sp, #12]	@ result, result
 442:cmsis_core/core_cm0.c ****   return(result);
 396              		.loc 1 442 0
 397 0018 039B     		ldr	r3, [sp, #12]	@ D.4297, result
 443:cmsis_core/core_cm0.c **** }
 398              		.loc 1 443 0
 399 001a 1800     		movs	r0, r3	@, <retval>
 400 001c 04B0     		add	sp, sp, #16	@,,
 401              		@ sp needed	@
 402 001e 7047     		bx	lr
 403              		.cfi_endproc
 404              	.LFE10:
 405              		.size	__REVSH, .-__REVSH
 406              		.text
 407              	.Letext0:
 408              		.file 2 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 409              		.file 3 "/usr/local/sbin/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 410              		.section	.debug_info,"",%progbits
 411              	.Ldebug_info0:
 412 0000 DA020000 		.4byte	0x2da
ARM GAS  /tmp/ccBRnU2t.s 			page 16


 413 0004 0200     		.2byte	0x2
 414 0006 00000000 		.4byte	.Ldebug_abbrev0
 415 000a 04       		.byte	0x4
 416 000b 01       		.uleb128 0x1
 417 000c A8010000 		.4byte	.LASF34
 418 0010 0C       		.byte	0xc
 419 0011 3D000000 		.4byte	.LASF35
 420 0015 00000000 		.4byte	.LASF36
 421 0019 00000000 		.4byte	.Ldebug_ranges0+0
 422 001d 00000000 		.4byte	0
 423 0021 00000000 		.4byte	0
 424 0025 00000000 		.4byte	.Ldebug_line0
 425 0029 02       		.uleb128 0x2
 426 002a 01       		.byte	0x1
 427 002b 06       		.byte	0x6
 428 002c 65020000 		.4byte	.LASF0
 429 0030 02       		.uleb128 0x2
 430 0031 01       		.byte	0x1
 431 0032 08       		.byte	0x8
 432 0033 B4000000 		.4byte	.LASF1
 433 0037 03       		.uleb128 0x3
 434 0038 53000000 		.4byte	.LASF3
 435 003c 02       		.byte	0x2
 436 003d 29       		.byte	0x29
 437 003e 42000000 		.4byte	0x42
 438 0042 02       		.uleb128 0x2
 439 0043 02       		.byte	0x2
 440 0044 05       		.byte	0x5
 441 0045 95010000 		.4byte	.LASF2
 442 0049 03       		.uleb128 0x3
 443 004a FD000000 		.4byte	.LASF4
 444 004e 02       		.byte	0x2
 445 004f 2B       		.byte	0x2b
 446 0050 54000000 		.4byte	0x54
 447 0054 02       		.uleb128 0x2
 448 0055 02       		.byte	0x2
 449 0056 07       		.byte	0x7
 450 0057 E2000000 		.4byte	.LASF5
 451 005b 03       		.uleb128 0x3
 452 005c 63000000 		.4byte	.LASF6
 453 0060 02       		.byte	0x2
 454 0061 3F       		.byte	0x3f
 455 0062 66000000 		.4byte	0x66
 456 0066 02       		.uleb128 0x2
 457 0067 04       		.byte	0x4
 458 0068 05       		.byte	0x5
 459 0069 5C020000 		.4byte	.LASF7
 460 006d 03       		.uleb128 0x3
 461 006e 08010000 		.4byte	.LASF8
 462 0072 02       		.byte	0x2
 463 0073 41       		.byte	0x41
 464 0074 78000000 		.4byte	0x78
 465 0078 02       		.uleb128 0x2
 466 0079 04       		.byte	0x4
 467 007a 07       		.byte	0x7
 468 007b D0000000 		.4byte	.LASF9
 469 007f 02       		.uleb128 0x2
ARM GAS  /tmp/ccBRnU2t.s 			page 17


 470 0080 08       		.byte	0x8
 471 0081 05       		.byte	0x5
 472 0082 65010000 		.4byte	.LASF10
 473 0086 02       		.uleb128 0x2
 474 0087 08       		.byte	0x8
 475 0088 07       		.byte	0x7
 476 0089 20010000 		.4byte	.LASF11
 477 008d 04       		.uleb128 0x4
 478 008e 04       		.byte	0x4
 479 008f 05       		.byte	0x5
 480 0090 696E7400 		.ascii	"int\000"
 481 0094 02       		.uleb128 0x2
 482 0095 04       		.byte	0x4
 483 0096 07       		.byte	0x7
 484 0097 13010000 		.4byte	.LASF12
 485 009b 03       		.uleb128 0x3
 486 009c 3E010000 		.4byte	.LASF13
 487 00a0 03       		.byte	0x3
 488 00a1 19       		.byte	0x19
 489 00a2 37000000 		.4byte	0x37
 490 00a6 03       		.uleb128 0x3
 491 00a7 9F010000 		.4byte	.LASF14
 492 00ab 03       		.byte	0x3
 493 00ac 1A       		.byte	0x1a
 494 00ad 49000000 		.4byte	0x49
 495 00b1 03       		.uleb128 0x3
 496 00b2 46010000 		.4byte	.LASF15
 497 00b6 03       		.byte	0x3
 498 00b7 1F       		.byte	0x1f
 499 00b8 5B000000 		.4byte	0x5b
 500 00bc 03       		.uleb128 0x3
 501 00bd 53020000 		.4byte	.LASF16
 502 00c1 03       		.byte	0x3
 503 00c2 20       		.byte	0x20
 504 00c3 6D000000 		.4byte	0x6d
 505 00c7 05       		.uleb128 0x5
 506 00c8 01       		.byte	0x1
 507 00c9 98000000 		.4byte	.LASF17
 508 00cd 01       		.byte	0x1
 509 00ce 1A01     		.2byte	0x11a
 510 00d0 01       		.byte	0x1
 511 00d1 BC000000 		.4byte	0xbc
 512 00d5 00000000 		.4byte	.LFB0
 513 00d9 0E000000 		.4byte	.LFE0
 514 00dd 02       		.byte	0x2
 515 00de 7D       		.byte	0x7d
 516 00df 00       		.sleb128 0
 517 00e0 01       		.byte	0x1
 518 00e1 F4000000 		.4byte	0xf4
 519 00e5 06       		.uleb128 0x6
 520 00e6 37010000 		.4byte	.LASF19
 521 00ea 01       		.byte	0x1
 522 00eb 1C01     		.2byte	0x11c
 523 00ed BC000000 		.4byte	0xbc
 524 00f1 01       		.byte	0x1
 525 00f2 54       		.byte	0x54
 526 00f3 00       		.byte	0
ARM GAS  /tmp/ccBRnU2t.s 			page 18


 527 00f4 07       		.uleb128 0x7
 528 00f5 01       		.byte	0x1
 529 00f6 A2000000 		.4byte	.LASF20
 530 00fa 01       		.byte	0x1
 531 00fb 2D01     		.2byte	0x12d
 532 00fd 01       		.byte	0x1
 533 00fe 00000000 		.4byte	.LFB1
 534 0102 0A000000 		.4byte	.LFE1
 535 0106 02       		.byte	0x2
 536 0107 7D       		.byte	0x7d
 537 0108 00       		.sleb128 0
 538 0109 01       		.byte	0x1
 539 010a 1D010000 		.4byte	0x11d
 540 010e 08       		.uleb128 0x8
 541 010f 75000000 		.4byte	.LASF22
 542 0113 01       		.byte	0x1
 543 0114 2D01     		.2byte	0x12d
 544 0116 BC000000 		.4byte	0xbc
 545 011a 01       		.byte	0x1
 546 011b 53       		.byte	0x53
 547 011c 00       		.byte	0
 548 011d 05       		.uleb128 0x5
 549 011e 01       		.byte	0x1
 550 011f 84000000 		.4byte	.LASF18
 551 0123 01       		.byte	0x1
 552 0124 3C01     		.2byte	0x13c
 553 0126 01       		.byte	0x1
 554 0127 BC000000 		.4byte	0xbc
 555 012b 00000000 		.4byte	.LFB2
 556 012f 0E000000 		.4byte	.LFE2
 557 0133 02       		.byte	0x2
 558 0134 7D       		.byte	0x7d
 559 0135 00       		.sleb128 0
 560 0136 01       		.byte	0x1
 561 0137 4A010000 		.4byte	0x14a
 562 013b 06       		.uleb128 0x6
 563 013c 37010000 		.4byte	.LASF19
 564 0140 01       		.byte	0x1
 565 0141 3E01     		.2byte	0x13e
 566 0143 BC000000 		.4byte	0xbc
 567 0147 01       		.byte	0x1
 568 0148 54       		.byte	0x54
 569 0149 00       		.byte	0
 570 014a 07       		.uleb128 0x7
 571 014b 01       		.byte	0x1
 572 014c 8E000000 		.4byte	.LASF21
 573 0150 01       		.byte	0x1
 574 0151 4F01     		.2byte	0x14f
 575 0153 01       		.byte	0x1
 576 0154 00000000 		.4byte	.LFB3
 577 0158 0A000000 		.4byte	.LFE3
 578 015c 02       		.byte	0x2
 579 015d 7D       		.byte	0x7d
 580 015e 00       		.sleb128 0
 581 015f 01       		.byte	0x1
 582 0160 73010000 		.4byte	0x173
 583 0164 08       		.uleb128 0x8
ARM GAS  /tmp/ccBRnU2t.s 			page 19


 584 0165 56010000 		.4byte	.LASF23
 585 0169 01       		.byte	0x1
 586 016a 4F01     		.2byte	0x14f
 587 016c BC000000 		.4byte	0xbc
 588 0170 01       		.byte	0x1
 589 0171 53       		.byte	0x53
 590 0172 00       		.byte	0
 591 0173 09       		.uleb128 0x9
 592 0174 01       		.byte	0x1
 593 0175 C2000000 		.4byte	.LASF24
 594 0179 01       		.byte	0x1
 595 017a 5D01     		.2byte	0x15d
 596 017c 01       		.byte	0x1
 597 017d BC000000 		.4byte	0xbc
 598 0181 00000000 		.4byte	.LFB4
 599 0185 14000000 		.4byte	.LFE4
 600 0189 00000000 		.4byte	.LLST0
 601 018d 01       		.byte	0x1
 602 018e A2010000 		.4byte	0x1a2
 603 0192 06       		.uleb128 0x6
 604 0193 37010000 		.4byte	.LASF19
 605 0197 01       		.byte	0x1
 606 0198 5F01     		.2byte	0x15f
 607 019a BC000000 		.4byte	0xbc
 608 019e 02       		.byte	0x2
 609 019f 91       		.byte	0x91
 610 01a0 7C       		.sleb128 -4
 611 01a1 00       		.byte	0
 612 01a2 0A       		.uleb128 0xa
 613 01a3 01       		.byte	0x1
 614 01a4 73010000 		.4byte	.LASF25
 615 01a8 01       		.byte	0x1
 616 01a9 6C01     		.2byte	0x16c
 617 01ab 01       		.byte	0x1
 618 01ac 00000000 		.4byte	.LFB5
 619 01b0 10000000 		.4byte	.LFE5
 620 01b4 20000000 		.4byte	.LLST1
 621 01b8 01       		.byte	0x1
 622 01b9 CD010000 		.4byte	0x1cd
 623 01bd 08       		.uleb128 0x8
 624 01be 6D000000 		.4byte	.LASF26
 625 01c2 01       		.byte	0x1
 626 01c3 6C01     		.2byte	0x16c
 627 01c5 BC000000 		.4byte	0xbc
 628 01c9 02       		.byte	0x2
 629 01ca 91       		.byte	0x91
 630 01cb 7C       		.sleb128 -4
 631 01cc 00       		.byte	0
 632 01cd 09       		.uleb128 0x9
 633 01ce 01       		.byte	0x1
 634 01cf 87010000 		.4byte	.LASF27
 635 01d3 01       		.byte	0x1
 636 01d4 7801     		.2byte	0x178
 637 01d6 01       		.byte	0x1
 638 01d7 BC000000 		.4byte	0xbc
 639 01db 00000000 		.4byte	.LFB6
 640 01df 14000000 		.4byte	.LFE6
ARM GAS  /tmp/ccBRnU2t.s 			page 20


 641 01e3 40000000 		.4byte	.LLST2
 642 01e7 01       		.byte	0x1
 643 01e8 FC010000 		.4byte	0x1fc
 644 01ec 06       		.uleb128 0x6
 645 01ed 37010000 		.4byte	.LASF19
 646 01f1 01       		.byte	0x1
 647 01f2 7A01     		.2byte	0x17a
 648 01f4 BC000000 		.4byte	0xbc
 649 01f8 02       		.byte	0x2
 650 01f9 91       		.byte	0x91
 651 01fa 7C       		.sleb128 -4
 652 01fb 00       		.byte	0
 653 01fc 0A       		.uleb128 0xa
 654 01fd 01       		.byte	0x1
 655 01fe 2F000000 		.4byte	.LASF28
 656 0202 01       		.byte	0x1
 657 0203 8701     		.2byte	0x187
 658 0205 01       		.byte	0x1
 659 0206 00000000 		.4byte	.LFB7
 660 020a 10000000 		.4byte	.LFE7
 661 020e 60000000 		.4byte	.LLST3
 662 0212 01       		.byte	0x1
 663 0213 27020000 		.4byte	0x227
 664 0217 08       		.uleb128 0x8
 665 0218 F5000000 		.4byte	.LASF29
 666 021c 01       		.byte	0x1
 667 021d 8701     		.2byte	0x187
 668 021f BC000000 		.4byte	0xbc
 669 0223 02       		.byte	0x2
 670 0224 91       		.byte	0x91
 671 0225 7C       		.sleb128 -4
 672 0226 00       		.byte	0
 673 0227 09       		.uleb128 0x9
 674 0228 01       		.byte	0x1
 675 0229 81010000 		.4byte	.LASF30
 676 022d 01       		.byte	0x1
 677 022e 9501     		.2byte	0x195
 678 0230 01       		.byte	0x1
 679 0231 BC000000 		.4byte	0xbc
 680 0235 00000000 		.4byte	.LFB8
 681 0239 16000000 		.4byte	.LFE8
 682 023d 80000000 		.4byte	.LLST4
 683 0241 01       		.byte	0x1
 684 0242 65020000 		.4byte	0x265
 685 0246 08       		.uleb128 0x8
 686 0247 5D000000 		.4byte	.LASF31
 687 024b 01       		.byte	0x1
 688 024c 9501     		.2byte	0x195
 689 024e BC000000 		.4byte	0xbc
 690 0252 02       		.byte	0x2
 691 0253 91       		.byte	0x91
 692 0254 74       		.sleb128 -12
 693 0255 06       		.uleb128 0x6
 694 0256 37010000 		.4byte	.LASF19
 695 025a 01       		.byte	0x1
 696 025b 9701     		.2byte	0x197
 697 025d BC000000 		.4byte	0xbc
ARM GAS  /tmp/ccBRnU2t.s 			page 21


 698 0261 02       		.byte	0x2
 699 0262 91       		.byte	0x91
 700 0263 7C       		.sleb128 -4
 701 0264 00       		.byte	0
 702 0265 09       		.uleb128 0x9
 703 0266 01       		.byte	0x1
 704 0267 AC000000 		.4byte	.LASF32
 705 026b 01       		.byte	0x1
 706 026c A501     		.2byte	0x1a5
 707 026e 01       		.byte	0x1
 708 026f BC000000 		.4byte	0xbc
 709 0273 00000000 		.4byte	.LFB9
 710 0277 20000000 		.4byte	.LFE9
 711 027b A0000000 		.4byte	.LLST5
 712 027f 01       		.byte	0x1
 713 0280 A3020000 		.4byte	0x2a3
 714 0284 08       		.uleb128 0x8
 715 0285 5D000000 		.4byte	.LASF31
 716 0289 01       		.byte	0x1
 717 028a A501     		.2byte	0x1a5
 718 028c A6000000 		.4byte	0xa6
 719 0290 02       		.byte	0x2
 720 0291 91       		.byte	0x91
 721 0292 76       		.sleb128 -10
 722 0293 06       		.uleb128 0x6
 723 0294 37010000 		.4byte	.LASF19
 724 0298 01       		.byte	0x1
 725 0299 A701     		.2byte	0x1a7
 726 029b BC000000 		.4byte	0xbc
 727 029f 02       		.byte	0x2
 728 02a0 91       		.byte	0x91
 729 02a1 7C       		.sleb128 -4
 730 02a2 00       		.byte	0
 731 02a3 0B       		.uleb128 0xb
 732 02a4 01       		.byte	0x1
 733 02a5 4E010000 		.4byte	.LASF33
 734 02a9 01       		.byte	0x1
 735 02aa B501     		.2byte	0x1b5
 736 02ac 01       		.byte	0x1
 737 02ad B1000000 		.4byte	0xb1
 738 02b1 00000000 		.4byte	.LFB10
 739 02b5 20000000 		.4byte	.LFE10
 740 02b9 C0000000 		.4byte	.LLST6
 741 02bd 01       		.byte	0x1
 742 02be 08       		.uleb128 0x8
 743 02bf 5D000000 		.4byte	.LASF31
 744 02c3 01       		.byte	0x1
 745 02c4 B501     		.2byte	0x1b5
 746 02c6 9B000000 		.4byte	0x9b
 747 02ca 02       		.byte	0x2
 748 02cb 91       		.byte	0x91
 749 02cc 76       		.sleb128 -10
 750 02cd 06       		.uleb128 0x6
 751 02ce 37010000 		.4byte	.LASF19
 752 02d2 01       		.byte	0x1
 753 02d3 B701     		.2byte	0x1b7
 754 02d5 BC000000 		.4byte	0xbc
ARM GAS  /tmp/ccBRnU2t.s 			page 22


 755 02d9 02       		.byte	0x2
 756 02da 91       		.byte	0x91
 757 02db 7C       		.sleb128 -4
 758 02dc 00       		.byte	0
 759 02dd 00       		.byte	0
 760              		.section	.debug_abbrev,"",%progbits
 761              	.Ldebug_abbrev0:
 762 0000 01       		.uleb128 0x1
 763 0001 11       		.uleb128 0x11
 764 0002 01       		.byte	0x1
 765 0003 25       		.uleb128 0x25
 766 0004 0E       		.uleb128 0xe
 767 0005 13       		.uleb128 0x13
 768 0006 0B       		.uleb128 0xb
 769 0007 03       		.uleb128 0x3
 770 0008 0E       		.uleb128 0xe
 771 0009 1B       		.uleb128 0x1b
 772 000a 0E       		.uleb128 0xe
 773 000b 55       		.uleb128 0x55
 774 000c 06       		.uleb128 0x6
 775 000d 11       		.uleb128 0x11
 776 000e 01       		.uleb128 0x1
 777 000f 52       		.uleb128 0x52
 778 0010 01       		.uleb128 0x1
 779 0011 10       		.uleb128 0x10
 780 0012 06       		.uleb128 0x6
 781 0013 00       		.byte	0
 782 0014 00       		.byte	0
 783 0015 02       		.uleb128 0x2
 784 0016 24       		.uleb128 0x24
 785 0017 00       		.byte	0
 786 0018 0B       		.uleb128 0xb
 787 0019 0B       		.uleb128 0xb
 788 001a 3E       		.uleb128 0x3e
 789 001b 0B       		.uleb128 0xb
 790 001c 03       		.uleb128 0x3
 791 001d 0E       		.uleb128 0xe
 792 001e 00       		.byte	0
 793 001f 00       		.byte	0
 794 0020 03       		.uleb128 0x3
 795 0021 16       		.uleb128 0x16
 796 0022 00       		.byte	0
 797 0023 03       		.uleb128 0x3
 798 0024 0E       		.uleb128 0xe
 799 0025 3A       		.uleb128 0x3a
 800 0026 0B       		.uleb128 0xb
 801 0027 3B       		.uleb128 0x3b
 802 0028 0B       		.uleb128 0xb
 803 0029 49       		.uleb128 0x49
 804 002a 13       		.uleb128 0x13
 805 002b 00       		.byte	0
 806 002c 00       		.byte	0
 807 002d 04       		.uleb128 0x4
 808 002e 24       		.uleb128 0x24
 809 002f 00       		.byte	0
 810 0030 0B       		.uleb128 0xb
 811 0031 0B       		.uleb128 0xb
ARM GAS  /tmp/ccBRnU2t.s 			page 23


 812 0032 3E       		.uleb128 0x3e
 813 0033 0B       		.uleb128 0xb
 814 0034 03       		.uleb128 0x3
 815 0035 08       		.uleb128 0x8
 816 0036 00       		.byte	0
 817 0037 00       		.byte	0
 818 0038 05       		.uleb128 0x5
 819 0039 2E       		.uleb128 0x2e
 820 003a 01       		.byte	0x1
 821 003b 3F       		.uleb128 0x3f
 822 003c 0C       		.uleb128 0xc
 823 003d 03       		.uleb128 0x3
 824 003e 0E       		.uleb128 0xe
 825 003f 3A       		.uleb128 0x3a
 826 0040 0B       		.uleb128 0xb
 827 0041 3B       		.uleb128 0x3b
 828 0042 05       		.uleb128 0x5
 829 0043 27       		.uleb128 0x27
 830 0044 0C       		.uleb128 0xc
 831 0045 49       		.uleb128 0x49
 832 0046 13       		.uleb128 0x13
 833 0047 11       		.uleb128 0x11
 834 0048 01       		.uleb128 0x1
 835 0049 12       		.uleb128 0x12
 836 004a 01       		.uleb128 0x1
 837 004b 40       		.uleb128 0x40
 838 004c 0A       		.uleb128 0xa
 839 004d 9742     		.uleb128 0x2117
 840 004f 0C       		.uleb128 0xc
 841 0050 01       		.uleb128 0x1
 842 0051 13       		.uleb128 0x13
 843 0052 00       		.byte	0
 844 0053 00       		.byte	0
 845 0054 06       		.uleb128 0x6
 846 0055 34       		.uleb128 0x34
 847 0056 00       		.byte	0
 848 0057 03       		.uleb128 0x3
 849 0058 0E       		.uleb128 0xe
 850 0059 3A       		.uleb128 0x3a
 851 005a 0B       		.uleb128 0xb
 852 005b 3B       		.uleb128 0x3b
 853 005c 05       		.uleb128 0x5
 854 005d 49       		.uleb128 0x49
 855 005e 13       		.uleb128 0x13
 856 005f 02       		.uleb128 0x2
 857 0060 0A       		.uleb128 0xa
 858 0061 00       		.byte	0
 859 0062 00       		.byte	0
 860 0063 07       		.uleb128 0x7
 861 0064 2E       		.uleb128 0x2e
 862 0065 01       		.byte	0x1
 863 0066 3F       		.uleb128 0x3f
 864 0067 0C       		.uleb128 0xc
 865 0068 03       		.uleb128 0x3
 866 0069 0E       		.uleb128 0xe
 867 006a 3A       		.uleb128 0x3a
 868 006b 0B       		.uleb128 0xb
ARM GAS  /tmp/ccBRnU2t.s 			page 24


 869 006c 3B       		.uleb128 0x3b
 870 006d 05       		.uleb128 0x5
 871 006e 27       		.uleb128 0x27
 872 006f 0C       		.uleb128 0xc
 873 0070 11       		.uleb128 0x11
 874 0071 01       		.uleb128 0x1
 875 0072 12       		.uleb128 0x12
 876 0073 01       		.uleb128 0x1
 877 0074 40       		.uleb128 0x40
 878 0075 0A       		.uleb128 0xa
 879 0076 9742     		.uleb128 0x2117
 880 0078 0C       		.uleb128 0xc
 881 0079 01       		.uleb128 0x1
 882 007a 13       		.uleb128 0x13
 883 007b 00       		.byte	0
 884 007c 00       		.byte	0
 885 007d 08       		.uleb128 0x8
 886 007e 05       		.uleb128 0x5
 887 007f 00       		.byte	0
 888 0080 03       		.uleb128 0x3
 889 0081 0E       		.uleb128 0xe
 890 0082 3A       		.uleb128 0x3a
 891 0083 0B       		.uleb128 0xb
 892 0084 3B       		.uleb128 0x3b
 893 0085 05       		.uleb128 0x5
 894 0086 49       		.uleb128 0x49
 895 0087 13       		.uleb128 0x13
 896 0088 02       		.uleb128 0x2
 897 0089 0A       		.uleb128 0xa
 898 008a 00       		.byte	0
 899 008b 00       		.byte	0
 900 008c 09       		.uleb128 0x9
 901 008d 2E       		.uleb128 0x2e
 902 008e 01       		.byte	0x1
 903 008f 3F       		.uleb128 0x3f
 904 0090 0C       		.uleb128 0xc
 905 0091 03       		.uleb128 0x3
 906 0092 0E       		.uleb128 0xe
 907 0093 3A       		.uleb128 0x3a
 908 0094 0B       		.uleb128 0xb
 909 0095 3B       		.uleb128 0x3b
 910 0096 05       		.uleb128 0x5
 911 0097 27       		.uleb128 0x27
 912 0098 0C       		.uleb128 0xc
 913 0099 49       		.uleb128 0x49
 914 009a 13       		.uleb128 0x13
 915 009b 11       		.uleb128 0x11
 916 009c 01       		.uleb128 0x1
 917 009d 12       		.uleb128 0x12
 918 009e 01       		.uleb128 0x1
 919 009f 40       		.uleb128 0x40
 920 00a0 06       		.uleb128 0x6
 921 00a1 9742     		.uleb128 0x2117
 922 00a3 0C       		.uleb128 0xc
 923 00a4 01       		.uleb128 0x1
 924 00a5 13       		.uleb128 0x13
 925 00a6 00       		.byte	0
ARM GAS  /tmp/ccBRnU2t.s 			page 25


 926 00a7 00       		.byte	0
 927 00a8 0A       		.uleb128 0xa
 928 00a9 2E       		.uleb128 0x2e
 929 00aa 01       		.byte	0x1
 930 00ab 3F       		.uleb128 0x3f
 931 00ac 0C       		.uleb128 0xc
 932 00ad 03       		.uleb128 0x3
 933 00ae 0E       		.uleb128 0xe
 934 00af 3A       		.uleb128 0x3a
 935 00b0 0B       		.uleb128 0xb
 936 00b1 3B       		.uleb128 0x3b
 937 00b2 05       		.uleb128 0x5
 938 00b3 27       		.uleb128 0x27
 939 00b4 0C       		.uleb128 0xc
 940 00b5 11       		.uleb128 0x11
 941 00b6 01       		.uleb128 0x1
 942 00b7 12       		.uleb128 0x12
 943 00b8 01       		.uleb128 0x1
 944 00b9 40       		.uleb128 0x40
 945 00ba 06       		.uleb128 0x6
 946 00bb 9742     		.uleb128 0x2117
 947 00bd 0C       		.uleb128 0xc
 948 00be 01       		.uleb128 0x1
 949 00bf 13       		.uleb128 0x13
 950 00c0 00       		.byte	0
 951 00c1 00       		.byte	0
 952 00c2 0B       		.uleb128 0xb
 953 00c3 2E       		.uleb128 0x2e
 954 00c4 01       		.byte	0x1
 955 00c5 3F       		.uleb128 0x3f
 956 00c6 0C       		.uleb128 0xc
 957 00c7 03       		.uleb128 0x3
 958 00c8 0E       		.uleb128 0xe
 959 00c9 3A       		.uleb128 0x3a
 960 00ca 0B       		.uleb128 0xb
 961 00cb 3B       		.uleb128 0x3b
 962 00cc 05       		.uleb128 0x5
 963 00cd 27       		.uleb128 0x27
 964 00ce 0C       		.uleb128 0xc
 965 00cf 49       		.uleb128 0x49
 966 00d0 13       		.uleb128 0x13
 967 00d1 11       		.uleb128 0x11
 968 00d2 01       		.uleb128 0x1
 969 00d3 12       		.uleb128 0x12
 970 00d4 01       		.uleb128 0x1
 971 00d5 40       		.uleb128 0x40
 972 00d6 06       		.uleb128 0x6
 973 00d7 9742     		.uleb128 0x2117
 974 00d9 0C       		.uleb128 0xc
 975 00da 00       		.byte	0
 976 00db 00       		.byte	0
 977 00dc 00       		.byte	0
 978              		.section	.debug_loc,"",%progbits
 979              	.Ldebug_loc0:
 980              	.LLST0:
 981 0000 00000000 		.4byte	.LFB4
 982 0004 02000000 		.4byte	.LCFI0
ARM GAS  /tmp/ccBRnU2t.s 			page 26


 983 0008 0200     		.2byte	0x2
 984 000a 7D       		.byte	0x7d
 985 000b 00       		.sleb128 0
 986 000c 02000000 		.4byte	.LCFI0
 987 0010 14000000 		.4byte	.LFE4
 988 0014 0200     		.2byte	0x2
 989 0016 7D       		.byte	0x7d
 990 0017 08       		.sleb128 8
 991 0018 00000000 		.4byte	0
 992 001c 00000000 		.4byte	0
 993              	.LLST1:
 994 0020 00000000 		.4byte	.LFB5
 995 0024 02000000 		.4byte	.LCFI1
 996 0028 0200     		.2byte	0x2
 997 002a 7D       		.byte	0x7d
 998 002b 00       		.sleb128 0
 999 002c 02000000 		.4byte	.LCFI1
 1000 0030 10000000 		.4byte	.LFE5
 1001 0034 0200     		.2byte	0x2
 1002 0036 7D       		.byte	0x7d
 1003 0037 08       		.sleb128 8
 1004 0038 00000000 		.4byte	0
 1005 003c 00000000 		.4byte	0
 1006              	.LLST2:
 1007 0040 00000000 		.4byte	.LFB6
 1008 0044 02000000 		.4byte	.LCFI2
 1009 0048 0200     		.2byte	0x2
 1010 004a 7D       		.byte	0x7d
 1011 004b 00       		.sleb128 0
 1012 004c 02000000 		.4byte	.LCFI2
 1013 0050 14000000 		.4byte	.LFE6
 1014 0054 0200     		.2byte	0x2
 1015 0056 7D       		.byte	0x7d
 1016 0057 08       		.sleb128 8
 1017 0058 00000000 		.4byte	0
 1018 005c 00000000 		.4byte	0
 1019              	.LLST3:
 1020 0060 00000000 		.4byte	.LFB7
 1021 0064 02000000 		.4byte	.LCFI3
 1022 0068 0200     		.2byte	0x2
 1023 006a 7D       		.byte	0x7d
 1024 006b 00       		.sleb128 0
 1025 006c 02000000 		.4byte	.LCFI3
 1026 0070 10000000 		.4byte	.LFE7
 1027 0074 0200     		.2byte	0x2
 1028 0076 7D       		.byte	0x7d
 1029 0077 08       		.sleb128 8
 1030 0078 00000000 		.4byte	0
 1031 007c 00000000 		.4byte	0
 1032              	.LLST4:
 1033 0080 00000000 		.4byte	.LFB8
 1034 0084 02000000 		.4byte	.LCFI4
 1035 0088 0200     		.2byte	0x2
 1036 008a 7D       		.byte	0x7d
 1037 008b 00       		.sleb128 0
 1038 008c 02000000 		.4byte	.LCFI4
 1039 0090 16000000 		.4byte	.LFE8
ARM GAS  /tmp/ccBRnU2t.s 			page 27


 1040 0094 0200     		.2byte	0x2
 1041 0096 7D       		.byte	0x7d
 1042 0097 10       		.sleb128 16
 1043 0098 00000000 		.4byte	0
 1044 009c 00000000 		.4byte	0
 1045              	.LLST5:
 1046 00a0 00000000 		.4byte	.LFB9
 1047 00a4 02000000 		.4byte	.LCFI5
 1048 00a8 0200     		.2byte	0x2
 1049 00aa 7D       		.byte	0x7d
 1050 00ab 00       		.sleb128 0
 1051 00ac 02000000 		.4byte	.LCFI5
 1052 00b0 20000000 		.4byte	.LFE9
 1053 00b4 0200     		.2byte	0x2
 1054 00b6 7D       		.byte	0x7d
 1055 00b7 10       		.sleb128 16
 1056 00b8 00000000 		.4byte	0
 1057 00bc 00000000 		.4byte	0
 1058              	.LLST6:
 1059 00c0 00000000 		.4byte	.LFB10
 1060 00c4 02000000 		.4byte	.LCFI6
 1061 00c8 0200     		.2byte	0x2
 1062 00ca 7D       		.byte	0x7d
 1063 00cb 00       		.sleb128 0
 1064 00cc 02000000 		.4byte	.LCFI6
 1065 00d0 20000000 		.4byte	.LFE10
 1066 00d4 0200     		.2byte	0x2
 1067 00d6 7D       		.byte	0x7d
 1068 00d7 10       		.sleb128 16
 1069 00d8 00000000 		.4byte	0
 1070 00dc 00000000 		.4byte	0
 1071              		.section	.debug_aranges,"",%progbits
 1072 0000 6C000000 		.4byte	0x6c
 1073 0004 0200     		.2byte	0x2
 1074 0006 00000000 		.4byte	.Ldebug_info0
 1075 000a 04       		.byte	0x4
 1076 000b 00       		.byte	0
 1077 000c 0000     		.2byte	0
 1078 000e 0000     		.2byte	0
 1079 0010 00000000 		.4byte	.LFB0
 1080 0014 0E000000 		.4byte	.LFE0-.LFB0
 1081 0018 00000000 		.4byte	.LFB1
 1082 001c 0A000000 		.4byte	.LFE1-.LFB1
 1083 0020 00000000 		.4byte	.LFB2
 1084 0024 0E000000 		.4byte	.LFE2-.LFB2
 1085 0028 00000000 		.4byte	.LFB3
 1086 002c 0A000000 		.4byte	.LFE3-.LFB3
 1087 0030 00000000 		.4byte	.LFB4
 1088 0034 14000000 		.4byte	.LFE4-.LFB4
 1089 0038 00000000 		.4byte	.LFB5
 1090 003c 10000000 		.4byte	.LFE5-.LFB5
 1091 0040 00000000 		.4byte	.LFB6
 1092 0044 14000000 		.4byte	.LFE6-.LFB6
 1093 0048 00000000 		.4byte	.LFB7
 1094 004c 10000000 		.4byte	.LFE7-.LFB7
 1095 0050 00000000 		.4byte	.LFB8
 1096 0054 16000000 		.4byte	.LFE8-.LFB8
ARM GAS  /tmp/ccBRnU2t.s 			page 28


 1097 0058 00000000 		.4byte	.LFB9
 1098 005c 20000000 		.4byte	.LFE9-.LFB9
 1099 0060 00000000 		.4byte	.LFB10
 1100 0064 20000000 		.4byte	.LFE10-.LFB10
 1101 0068 00000000 		.4byte	0
 1102 006c 00000000 		.4byte	0
 1103              		.section	.debug_ranges,"",%progbits
 1104              	.Ldebug_ranges0:
 1105 0000 00000000 		.4byte	.LFB0
 1106 0004 0E000000 		.4byte	.LFE0
 1107 0008 00000000 		.4byte	.LFB1
 1108 000c 0A000000 		.4byte	.LFE1
 1109 0010 00000000 		.4byte	.LFB2
 1110 0014 0E000000 		.4byte	.LFE2
 1111 0018 00000000 		.4byte	.LFB3
 1112 001c 0A000000 		.4byte	.LFE3
 1113 0020 00000000 		.4byte	.LFB4
 1114 0024 14000000 		.4byte	.LFE4
 1115 0028 00000000 		.4byte	.LFB5
 1116 002c 10000000 		.4byte	.LFE5
 1117 0030 00000000 		.4byte	.LFB6
 1118 0034 14000000 		.4byte	.LFE6
 1119 0038 00000000 		.4byte	.LFB7
 1120 003c 10000000 		.4byte	.LFE7
 1121 0040 00000000 		.4byte	.LFB8
 1122 0044 16000000 		.4byte	.LFE8
 1123 0048 00000000 		.4byte	.LFB9
 1124 004c 20000000 		.4byte	.LFE9
 1125 0050 00000000 		.4byte	.LFB10
 1126 0054 20000000 		.4byte	.LFE10
 1127 0058 00000000 		.4byte	0
 1128 005c 00000000 		.4byte	0
 1129              		.section	.debug_line,"",%progbits
 1130              	.Ldebug_line0:
 1131 0000 B7010000 		.section	.debug_str,"MS",%progbits,1
 1131      0200DF00 
 1131      00000201 
 1131      FB0E0D00 
 1131      01010101 
 1132              	.LASF36:
 1133 0000 2F686F6D 		.ascii	"/home/med/Documents/stm32_proj/emacs_dexel_pfc\000"
 1133      652F6D65 
 1133      642F446F 
 1133      63756D65 
 1133      6E74732F 
 1134              	.LASF28:
 1135 002f 5F5F7365 		.ascii	"__set_CONTROL\000"
 1135      745F434F 
 1135      4E54524F 
 1135      4C00
 1136              	.LASF35:
 1137 003d 636D7369 		.ascii	"cmsis_core/core_cm0.c\000"
 1137      735F636F 
 1137      72652F63 
 1137      6F72655F 
 1137      636D302E 
 1138              	.LASF3:
ARM GAS  /tmp/ccBRnU2t.s 			page 29


 1139 0053 5F5F696E 		.ascii	"__int16_t\000"
 1139      7431365F 
 1139      7400
 1140              	.LASF31:
 1141 005d 76616C75 		.ascii	"value\000"
 1141      6500
 1142              	.LASF6:
 1143 0063 5F5F696E 		.ascii	"__int32_t\000"
 1143      7433325F 
 1143      7400
 1144              	.LASF26:
 1145 006d 7072694D 		.ascii	"priMask\000"
 1145      61736B00 
 1146              	.LASF22:
 1147 0075 746F704F 		.ascii	"topOfProcStack\000"
 1147      6650726F 
 1147      63537461 
 1147      636B00
 1148              	.LASF18:
 1149 0084 5F5F6765 		.ascii	"__get_MSP\000"
 1149      745F4D53 
 1149      5000
 1150              	.LASF21:
 1151 008e 5F5F7365 		.ascii	"__set_MSP\000"
 1151      745F4D53 
 1151      5000
 1152              	.LASF17:
 1153 0098 5F5F6765 		.ascii	"__get_PSP\000"
 1153      745F5053 
 1153      5000
 1154              	.LASF20:
 1155 00a2 5F5F7365 		.ascii	"__set_PSP\000"
 1155      745F5053 
 1155      5000
 1156              	.LASF32:
 1157 00ac 5F5F5245 		.ascii	"__REV16\000"
 1157      56313600 
 1158              	.LASF1:
 1159 00b4 756E7369 		.ascii	"unsigned char\000"
 1159      676E6564 
 1159      20636861 
 1159      7200
 1160              	.LASF24:
 1161 00c2 5F5F6765 		.ascii	"__get_PRIMASK\000"
 1161      745F5052 
 1161      494D4153 
 1161      4B00
 1162              	.LASF9:
 1163 00d0 6C6F6E67 		.ascii	"long unsigned int\000"
 1163      20756E73 
 1163      69676E65 
 1163      6420696E 
 1163      7400
 1164              	.LASF5:
 1165 00e2 73686F72 		.ascii	"short unsigned int\000"
 1165      7420756E 
 1165      7369676E 
ARM GAS  /tmp/ccBRnU2t.s 			page 30


 1165      65642069 
 1165      6E7400
 1166              	.LASF29:
 1167 00f5 636F6E74 		.ascii	"control\000"
 1167      726F6C00 
 1168              	.LASF4:
 1169 00fd 5F5F7569 		.ascii	"__uint16_t\000"
 1169      6E743136 
 1169      5F7400
 1170              	.LASF8:
 1171 0108 5F5F7569 		.ascii	"__uint32_t\000"
 1171      6E743332 
 1171      5F7400
 1172              	.LASF12:
 1173 0113 756E7369 		.ascii	"unsigned int\000"
 1173      676E6564 
 1173      20696E74 
 1173      00
 1174              	.LASF11:
 1175 0120 6C6F6E67 		.ascii	"long long unsigned int\000"
 1175      206C6F6E 
 1175      6720756E 
 1175      7369676E 
 1175      65642069 
 1176              	.LASF19:
 1177 0137 72657375 		.ascii	"result\000"
 1177      6C7400
 1178              	.LASF13:
 1179 013e 696E7431 		.ascii	"int16_t\000"
 1179      365F7400 
 1180              	.LASF15:
 1181 0146 696E7433 		.ascii	"int32_t\000"
 1181      325F7400 
 1182              	.LASF33:
 1183 014e 5F5F5245 		.ascii	"__REVSH\000"
 1183      56534800 
 1184              	.LASF23:
 1185 0156 746F704F 		.ascii	"topOfMainStack\000"
 1185      664D6169 
 1185      6E537461 
 1185      636B00
 1186              	.LASF10:
 1187 0165 6C6F6E67 		.ascii	"long long int\000"
 1187      206C6F6E 
 1187      6720696E 
 1187      7400
 1188              	.LASF25:
 1189 0173 5F5F7365 		.ascii	"__set_PRIMASK\000"
 1189      745F5052 
 1189      494D4153 
 1189      4B00
 1190              	.LASF30:
 1191 0181 5F5F5245 		.ascii	"__REV\000"
 1191      5600
 1192              	.LASF27:
 1193 0187 5F5F6765 		.ascii	"__get_CONTROL\000"
 1193      745F434F 
ARM GAS  /tmp/ccBRnU2t.s 			page 31


 1193      4E54524F 
 1193      4C00
 1194              	.LASF2:
 1195 0195 73686F72 		.ascii	"short int\000"
 1195      7420696E 
 1195      7400
 1196              	.LASF14:
 1197 019f 75696E74 		.ascii	"uint16_t\000"
 1197      31365F74 
 1197      00
 1198              	.LASF34:
 1199 01a8 474E5520 		.ascii	"GNU C11 5.2.1 20151202 (release) [ARM/embedded-5-br"
 1199      43313120 
 1199      352E322E 
 1199      31203230 
 1199      31353132 
 1200 01db 616E6368 		.ascii	"anch revision 231848] -mcpu=cortex-m0 -mthumb -g -g"
 1200      20726576 
 1200      6973696F 
 1200      6E203233 
 1200      31383438 
 1201 020e 64776172 		.ascii	"dwarf-2 -O0 -fomit-frame-pointer -fdata-sections -f"
 1201      662D3220 
 1201      2D4F3020 
 1201      2D666F6D 
 1201      69742D66 
 1202 0241 66756E63 		.ascii	"function-sections\000"
 1202      74696F6E 
 1202      2D736563 
 1202      74696F6E 
 1202      7300
 1203              	.LASF16:
 1204 0253 75696E74 		.ascii	"uint32_t\000"
 1204      33325F74 
 1204      00
 1205              	.LASF7:
 1206 025c 6C6F6E67 		.ascii	"long int\000"
 1206      20696E74 
 1206      00
 1207              	.LASF0:
 1208 0265 7369676E 		.ascii	"signed char\000"
 1208      65642063 
 1208      68617200 
 1209              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.2.1 20151202 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccBRnU2t.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 core_cm0.c
     /tmp/ccBRnU2t.s:54     .text.__get_PSP:00000000 $t
     /tmp/ccBRnU2t.s:59     .text.__get_PSP:00000000 __get_PSP
     /tmp/ccBRnU2t.s:83     .text.__set_PSP:00000000 $t
     /tmp/ccBRnU2t.s:88     .text.__set_PSP:00000000 __set_PSP
     /tmp/ccBRnU2t.s:108    .text.__get_MSP:00000000 $t
     /tmp/ccBRnU2t.s:113    .text.__get_MSP:00000000 __get_MSP
     /tmp/ccBRnU2t.s:136    .text.__set_MSP:00000000 $t
     /tmp/ccBRnU2t.s:141    .text.__set_MSP:00000000 __set_MSP
     /tmp/ccBRnU2t.s:161    .text.__get_PRIMASK:00000000 $t
     /tmp/ccBRnU2t.s:166    .text.__get_PRIMASK:00000000 __get_PRIMASK
     /tmp/ccBRnU2t.s:195    .text.__set_PRIMASK:00000000 $t
     /tmp/ccBRnU2t.s:200    .text.__set_PRIMASK:00000000 __set_PRIMASK
     /tmp/ccBRnU2t.s:225    .text.__get_CONTROL:00000000 $t
     /tmp/ccBRnU2t.s:230    .text.__get_CONTROL:00000000 __get_CONTROL
     /tmp/ccBRnU2t.s:259    .text.__set_CONTROL:00000000 $t
     /tmp/ccBRnU2t.s:264    .text.__set_CONTROL:00000000 __set_CONTROL
     /tmp/ccBRnU2t.s:289    .text.__REV:00000000 $t
     /tmp/ccBRnU2t.s:294    .text.__REV:00000000 __REV
     /tmp/ccBRnU2t.s:325    .text.__REV16:00000000 $t
     /tmp/ccBRnU2t.s:330    .text.__REV16:00000000 __REV16
     /tmp/ccBRnU2t.s:366    .text.__REVSH:00000000 $t
     /tmp/ccBRnU2t.s:371    .text.__REVSH:00000000 __REVSH
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
